classes = { }
classes['effect_type'] = {
    string_id = "efftype_id",
    attributes = {
        id = { type = "efftype_id" },
    },
    functions = {
        { name = "gain_game_message_type", rval = "game_message_type", args = { }, comment = "Returns the appropriate game_message_type when a new effect is obtained. This is equal to          *  an effect's 'rating' value.", location = { "./src/effect.h", 49 } },
        { name = "get_apply_memorial_log", rval = "std::string", args = { }, comment = "Returns the memorial log added when a new effect is obtained.", location = { "./src/effect.h", 57 } },
        { name = "get_apply_message", rval = "std::string", args = { }, comment = "Returns the message displayed when a new effect is obtained.", location = { "./src/effect.h", 55 } },
        { name = "get_main_parts", rval = "bool", args = { }, comment = "Returns true if an effect will only target main body parts (i.e., those with HP).", location = { "./src/effect.h", 64 } },
        { name = "get_rating", rval = "effect_rating", args = { }, comment = "Returns if an effect is good or bad for message display.", location = { "./src/effect.h", 38 } },
        { name = "get_remove_memorial_log", rval = "std::string", args = { }, comment = "Returns the memorial log added when an effect is removed.", location = { "./src/effect.h", 61 } },
        { name = "get_remove_message", rval = "std::string", args = { }, comment = "Returns the message displayed when an effect is removed.", location = { "./src/effect.h", 59 } },
        { name = "lose_game_message_type", rval = "game_message_type", args = { }, comment = "Returns the appropriate game_message_type when an effect is lost. This is opposite to          *  an effect's 'rating' value.", location = { "./src/effect.h", 52 } },
        { name = "register_ma_buff_effect", static = true, rval = nil, args = { "effect_type" }, comment = "Registers the effect in the global map", location = { "./src/effect.h", 72 } },
        { name = "use_desc_ints", rval = "bool", args = { "bool" }, comment = "Returns true if there is a listed description in the JSON entry for each intensity          *  from 1 to max_intensity with the matching reduced value.", location = { "./src/effect.h", 45 } },
        { name = "use_name_ints", rval = "bool", args = { }, comment = "Returns true if there is a listed name in the JSON entry for each intensity from          *  1 to max_intensity.", location = { "./src/effect.h", 42 } },
    }
}
classes['calendar'] = {
    new = {
        { "calendar" },
        { "int" },
        { "int", "int", "int", "season_type", "int" },
        { },
    },
    by_value_and_reference = true,
    has_equal = true,
    attributes = {
        INDEFINITELY_LONG = { type = "int", static = true },
        initial_season = { type = "season_type", writable = true, static = true },
        start = { type = "calendar", writable = true, static = true },
        turn = { type = "calendar", writable = true, static = true },
    },
    functions = {
        { name = "current_daylight_level", rval = "float", args = { }, comment = "Returns the current seasonally-adjusted maximum daylight level", location = { "./src/calendar.h", 208 } },
        { name = "day_of_week", rval = "std::string", args = { }, comment = "Returns the name of the current day of the week          *          * @note: Day 0 is a Thursday for highly technical reasons which are hard to explain", location = { "./src/calendar.h", 324 } },
        { name = "day_of_year", rval = "int", args = { }, comment = "@returns Number of days elapsed in current year", location = { "./src/calendar.h", 284 } },
        { name = "days", rval = "int", args = { }, comment = "Days since start of current season", location = { "./src/calendar.h", 225 } },
        { name = "diurnal_time_before", rval = "int", args = { "int" }, comment = "Calculate number of turns until a specified time.          *          * @param turn Specified diurnal time and date (in turns)          * @returns the remaining time (in turns) before the specified diurnal time", location = { "./src/calendar.h", 291 } },
        { name = "get_season", rval = "season_type", args = { }, comment = "Current season", location = { "./src/calendar.h", 229 } },
        { name = "get_turn", rval = "int", args = { }, comment = "@returns the current turn_number.", location = { "./src/calendar.h", 166 } },
        { name = "hours", rval = "int", args = { }, comment = "Hour portion of current time of day", location = { "./src/calendar.h", 221 } },
        { name = "increment", rval = nil, args = { }, comment = "Increases turn_number by 1. (6 seconds)", location = { "./src/calendar.h", 192 } },
        { name = "is_night", rval = "bool", args = { }, comment = "Returns true if it's currently after sunset + TWILIGHT_SECONDS or before sunrise - TWILIGHT_SECONDS.", location = { "./src/calendar.h", 206 } },
        { name = "minutes", rval = "int", args = { }, comment = "Minutes portion of current time of day", location = { "./src/calendar.h", 217 } },
        { name = "minutes_past_midnight", rval = "int", args = { }, comment = "Returns the number of minutes past midnight. Used for weather calculations.", location = { "./src/calendar.h", 196 } },
        { name = "moon", rval = "moon_phase", args = { }, comment = "Returns the current light level of the moon.", location = { "./src/calendar.h", 200 } },
        { name = "name_season", static = true, rval = "std::string", args = { "season_type" }, comment = "Returns the translated name of the season.", location = { "./src/calendar.h", 327 } },
        { name = "once_every", static = true, rval = "bool", args = { "int" }, comment = "Predicate to handle rate-limiting.          *          * @param event_frequency Number of turns between true returns          * @returns true after every 'event_frequency' turns", location = { "./src/calendar.h", 243 } },
        { name = "print_approx_duration", static = true, rval = "std::string", args = { "int" }, comment = "Returns approximate duration.          * @param turns Duration to print, measured in six-second turns          * @param verbose If true, 'less than' and 'more than' will be printed instead of '<' and '>' respectively.", location = { "./src/calendar.h", 313 } },
        { name = "print_approx_duration", static = true, rval = "std::string", args = { "int", "bool" }, comment = "Returns approximate duration.          * @param turns Duration to print, measured in six-second turns          * @param verbose If true, 'less than' and 'more than' will be printed instead of '<' and '>' respectively.", location = { "./src/calendar.h", 313 } },
        { name = "print_clipped_duration", static = true, rval = "std::string", args = { "int" }, comment = "Print approximate duration in largest practical units          *          * Generates a string showing a duration in appropriate units.  Durations of under one          * minute are shown in seconds.  Durations of one minute to one hour are shown as a whole          * number of minutes.  Durations of one hour to one day are shown as a whole number of hours.          * Larger durations are shown as a number of whole days.          *          * @param turns Specified duration in six-second turns.          * @returns String with value and units, suitable for display to player", location = { "./src/calendar.h", 304 } },
        { name = "print_duration", static = true, rval = "std::string", args = { "int" }, comment = "Returns normal duration.", location = { "./src/calendar.h", 307 } },
        { name = "print_time", rval = "std::string", args = { "bool" }, comment = "Returns the current time in a string according to the options set", location = { "./src/calendar.h", 316 } },
        { name = "print_time", rval = "std::string", args = { }, comment = "Returns the current time in a string according to the options set", location = { "./src/calendar.h", 316 } },
        { name = "season_length", static = true, rval = "int", args = { }, comment = "@returns Number of days in a season (configured in current world settings)", location = { "./src/calendar.h", 274 } },
        { name = "season_ratio", static = true, rval = "float", args = { }, location = { "./src/calendar.h", 276 } },
        { name = "season_turns", static = true, rval = "int", args = { }, comment = "@returns Number of six-second turns in a season (configured in current world settings)", location = { "./src/calendar.h", 269 } },
        { name = "seconds", rval = "int", args = { }, comment = "Seconds portion of current time of day", location = { "./src/calendar.h", 213 } },
        { name = "seconds_past_midnight", rval = "int", args = { }, comment = "Returns the number of seconds past midnight. Used for sunrise/set calculations.", location = { "./src/calendar.h", 198 } },
        { name = "sunlight", rval = "float", args = { }, comment = "Returns the current sunlight or moonlight level through the preceding functions.", location = { "./src/calendar.h", 210 } },
        { name = "sunrise", rval = "calendar", args = { }, comment = "Returns the current sunrise time based on the time of year.", location = { "./src/calendar.h", 202 } },
        { name = "sunset", rval = "calendar", args = { }, comment = "Returns the current sunset time based on the time of year.", location = { "./src/calendar.h", 204 } },
        { name = "textify_period", rval = "std::string", args = { }, comment = "Returns the period a calendar has been running in word form; i.e. '1 second', '2 days'.", location = { "./src/calendar.h", 318 } },
        { name = "turn_of_year", rval = "int", args = { }, comment = "@returns Number of turns elapsed in current year", location = { "./src/calendar.h", 281 } },
        { name = "year_length", static = true, rval = "int", args = { }, comment = "@returns Number of days in a year, (configured in current world settings)", location = { "./src/calendar.h", 264 } },
        { name = "year_turns", static = true, rval = "int", args = { }, comment = "Number of six-second turns in a year, (configured in current world settings)", location = { "./src/calendar.h", 259 } },
        { name = "years", rval = "int", args = { }, comment = "Current year, with default game start as year 0", location = { "./src/calendar.h", 233 } },
    }
}
classes['Character'] = {
    parents = {
        "Creature",
    },
    attributes = {
        dex_cur = { type = "int", writable = true },
        dex_max = { type = "int", writable = true },
        int_cur = { type = "int", writable = true },
        int_max = { type = "int", writable = true },
        inv = { type = "inventory", writable = true },
        last_item = { type = "std::string", writable = true },
        male = { type = "bool", writable = true },
        name = { type = "std::string", writable = true },
        nv_cached = { type = "bool", writable = true },
        per_cur = { type = "int", writable = true },
        per_max = { type = "int", writable = true },
        ret_null = { type = "item", writable = true },
        str_cur = { type = "int", writable = true },
        str_max = { type = "int", writable = true },
        weapon = { type = "item", writable = true },
        worn = { type = "std::list<item>", writable = true },
    },
    functions = {
        { name = "add_traits", rval = nil, args = { }, comment = "Adds mandatory scenario and profession traits unless you already have them", location = { "./src/character.h", 545 } },
        { name = "aim_per_move", rval = "float", args = { "item", "float" }, location = { "./src/character.h", 155 } },
        { name = "ammo_count_for", rval = "int", args = { "item" }, comment = "Counts ammo and UPS charges (lower of) for a given gun on the character.", location = { "./src/character.h", 415 } },
        { name = "amount_of", rval = "int", args = { "std::string" }, comment = "Count items matching id including both this instance and any contained items          * @param what ID of items to count          * @param pseudo whether pseudo-items (from map/vehicle tiles, bionics etc) are considered          * @param limit stop searching after this many matches          * @note items must be empty to be considered a match", location = { "./src/visitable.h", 88 } },
        { name = "amount_of", rval = "int", args = { "std::string", "bool" }, comment = "Count items matching id including both this instance and any contained items          * @param what ID of items to count          * @param pseudo whether pseudo-items (from map/vehicle tiles, bionics etc) are considered          * @param limit stop searching after this many matches          * @note items must be empty to be considered a match", location = { "./src/visitable.h", 88 } },
        { name = "amount_of", rval = "int", args = { "std::string", "bool", "int" }, comment = "Count items matching id including both this instance and any contained items          * @param what ID of items to count          * @param pseudo whether pseudo-items (from map/vehicle tiles, bionics etc) are considered          * @param limit stop searching after this many matches          * @note items must be empty to be considered a match", location = { "./src/visitable.h", 88 } },
        { name = "body_window", rval = "hp_part", args = { "bool" }, comment = "Displays menu with body part hp, optionally with hp estimation after healing.          * Returns selected part.", location = { "./src/character.h", 256 } },
        { name = "body_window", rval = "hp_part", args = { "std::string", "bool", "bool", "int", "int", "int", "bool", "bool", "bool" }, location = { "./src/character.h", 257 } },
        { name = "body_window", rval = "hp_part", args = { }, comment = "Displays menu with body part hp, optionally with hp estimation after healing.          * Returns selected part.", location = { "./src/character.h", 256 } },
        { name = "boost_skill_level", rval = nil, args = { "skill_id", "int" }, location = { "./src/character.h", 458 } },
        { name = "bp_to_hp", static = true, rval = "hp_part", args = { "body_part" }, comment = "Converts a body_part to an hp_part", location = { "./src/character.h", 248 } },
        { name = "can_pickVolume", rval = "bool", args = { "item" }, location = { "./src/character.h", 430 } },
        { name = "can_pickVolume", rval = "bool", args = { "item", "bool" }, location = { "./src/character.h", 430 } },
        { name = "can_pickWeight", rval = "bool", args = { "item" }, location = { "./src/character.h", 431 } },
        { name = "can_pickWeight", rval = "bool", args = { "item", "bool" }, location = { "./src/character.h", 431 } },
        { name = "can_use", rval = "bool", args = { "item" }, comment = "Checks if character stats and skills meet minimum requirements for the item.          * Prints an appropriate message if requirements not met.          * @param it Item we are checking          * @param context optionally override effective item when checking contextual skills", location = { "./src/character.h", 438 } },
        { name = "can_use", rval = "bool", args = { "item", "item" }, comment = "Checks if character stats and skills meet minimum requirements for the item.          * Prints an appropriate message if requirements not met.          * @param it Item we are checking          * @param context optionally override effective item when checking contextual skills", location = { "./src/character.h", 438 } },
        { name = "charges_of", rval = "int", args = { "std::string" }, comment = "Count maximum available charges from this instance and any contained items          * @param what ID of item to count charges of          * @param limit stop searching after this many charges have been found", location = { "./src/visitable.h", 79 } },
        { name = "charges_of", rval = "int", args = { "std::string", "int" }, comment = "Count maximum available charges from this instance and any contained items          * @param what ID of item to count charges of          * @param limit stop searching after this many charges have been found", location = { "./src/visitable.h", 79 } },
        { name = "drop_inventory_overflow", rval = nil, args = { }, location = { "./src/character.h", 440 } },
        { name = "effective_dispersion", rval = "int", args = { "int" }, location = { "./src/character.h", 152 } },
        { name = "empty_skills", rval = nil, args = { }, location = { "./src/character.h", 531 } },
        { name = "empty_traits", rval = nil, args = { }, comment = "Empties the trait list", location = { "./src/character.h", 543 } },
        { name = "encumb", rval = "int", args = { "body_part" }, comment = "Returns ENC provided by armor, etc.", location = { "./src/character.h", 179 } },
        { name = "enumerate_unmet_requirements", rval = "std::string", args = { "item" }, comment = "Returns a string of missed requirements (both stats and skills)", location = { "./src/character.h", 475 } },
        { name = "enumerate_unmet_requirements", rval = "std::string", args = { "item", "item" }, comment = "Returns a string of missed requirements (both stats and skills)", location = { "./src/character.h", 475 } },
        { name = "find_parent", rval = "item&", args = { "item" }, comment = "Determine the immediate parent container (if any) for an item.          * @param it item to search for which must be contained (at any depth) by this object          * @return parent container or nullptr if the item is not within a container", location = { "./src/visitable.h", 52 } },
        { name = "get_base_traits", rval = "std::vector<std::string>", args = { }, comment = "Get the idents of all base traits.", location = { "./src/character.h", 535 } },
        { name = "get_dex", rval = "int", args = { }, location = { "./src/character.h", 92 } },
        { name = "get_dex_base", rval = "int", args = { }, location = { "./src/character.h", 97 } },
        { name = "get_dex_bonus", rval = "int", args = { }, location = { "./src/character.h", 102 } },
        { name = "get_fatigue", rval = "int", args = { }, location = { "./src/character.h", 131 } },
        { name = "get_healthy", rval = "int", args = { }, comment = "Getters for health values exclusive to characters", location = { "./src/character.h", 117 } },
        { name = "get_healthy_mod", rval = "int", args = { }, location = { "./src/character.h", 118 } },
        { name = "get_hunger", rval = "int", args = { }, comment = "Getter for need values exclusive to characters", location = { "./src/character.h", 129 } },
        { name = "get_int", rval = "int", args = { }, location = { "./src/character.h", 94 } },
        { name = "get_int_base", rval = "int", args = { }, location = { "./src/character.h", 99 } },
        { name = "get_int_bonus", rval = "int", args = { }, location = { "./src/character.h", 104 } },
        { name = "get_item_position", rval = "int", args = { "item" }, comment = "Returns the item position (suitable for @ref i_at or similar) of a          * specific item. Returns INT_MIN if the item is not found.          * Note that this may lose some information, for example the returned position is the          * same when the given item points to the container and when it points to the item inside          * the container. All items that are part of the same stack have the same item position.", location = { "./src/character.h", 350 } },
        { name = "get_mutations", rval = "std::vector<std::string>", args = { }, comment = "Get the idents of all traits/mutations.", location = { "./src/character.h", 537 } },
        { name = "get_per", rval = "int", args = { }, location = { "./src/character.h", 93 } },
        { name = "get_per_base", rval = "int", args = { }, location = { "./src/character.h", 98 } },
        { name = "get_per_bonus", rval = "int", args = { }, location = { "./src/character.h", 103 } },
        { name = "get_stomach_food", rval = "int", args = { }, location = { "./src/character.h", 132 } },
        { name = "get_stomach_water", rval = "int", args = { }, location = { "./src/character.h", 133 } },
        { name = "get_str", rval = "int", args = { }, comment = "Getters for stats exclusive to characters", location = { "./src/character.h", 91 } },
        { name = "get_str_base", rval = "int", args = { }, location = { "./src/character.h", 96 } },
        { name = "get_str_bonus", rval = "int", args = { }, location = { "./src/character.h", 101 } },
        { name = "get_thirst", rval = "int", args = { }, location = { "./src/character.h", 130 } },
        { name = "get_turn_died", rval = "int", args = { }, comment = "return the calendar::turn the character expired", location = { "./src/character.h", 480 } },
        { name = "get_vision_threshold", rval = "float", args = { "float" }, comment = "Returns the apparent light level at which the player can see.          * This is adjusted by the light level at the *character's* position          * to simulate glare, etc, night vision only works if you are in the dark.", location = { "./src/character.h", 223 } },
        { name = "has_active_bionic", rval = "bool", args = { "std::string" }, comment = "Returns true if the player has the entered bionic id and it is powered on", location = { "./src/character.h", 303 } },
        { name = "has_active_item", rval = "bool", args = { "std::string" }, comment = "Whether the player carries an active item of the given item type.", location = { "./src/character.h", 395 } },
        { name = "has_active_mutation", rval = "bool", args = { "std::string" }, location = { "./src/character.h", 289 } },
        { name = "has_amount", rval = "bool", args = { "std::string", "int" }, comment = "Check instance provides at least qty of an item (@see amount_of)", location = { "./src/visitable.h", 92 } },
        { name = "has_amount", rval = "bool", args = { "std::string", "int", "bool" }, comment = "Check instance provides at least qty of an item (@see amount_of)", location = { "./src/visitable.h", 92 } },
        { name = "has_artifact_with", rval = "bool", args = { "art_effect_passive" }, location = { "./src/character.h", 442 } },
        { name = "has_base_trait", rval = "bool", args = { "std::string" }, comment = "Returns true if the player has the entered starting trait", location = { "./src/character.h", 235 } },
        { name = "has_bionic", rval = "bool", args = { "std::string" }, comment = "Returns true if the player has the entered bionic id", location = { "./src/character.h", 301 } },
        { name = "has_item", rval = "bool", args = { "item" }, comment = "Returns true if this visitable instance contains the item", location = { "./src/visitable.h", 63 } },
        { name = "has_nv", rval = "bool", args = { }, comment = "Returns true if the player has some form of night vision", location = { "./src/character.h", 507 } },
        { name = "has_quality", rval = "bool", args = { "quality_id" }, comment = "Returns true if instance has amount (or more) items of at least quality level", location = { "./src/visitable.h", 69 } },
        { name = "has_quality", rval = "bool", args = { "quality_id", "int" }, comment = "Returns true if instance has amount (or more) items of at least quality level", location = { "./src/visitable.h", 69 } },
        { name = "has_quality", rval = "bool", args = { "quality_id", "int", "int" }, comment = "Returns true if instance has amount (or more) items of at least quality level", location = { "./src/visitable.h", 69 } },
        { name = "has_trait_flag", rval = "bool", args = { "std::string" }, comment = "Returns true if player has a trait with a flag", location = { "./src/character.h", 237 } },
        { name = "healing_rate", rval = "float", args = { "float" }, comment = "Average hit points healed per turn.", location = { "./src/character.h", 517 } },
        { name = "hp_to_bp", static = true, rval = "body_part", args = { "hp_part" }, comment = "Converts an hp_part to a body_part", location = { "./src/character.h", 250 } },
        { name = "i_add", rval = "item&", args = { "item" }, location = { "./src/character.h", 352 } },
        { name = "i_add_or_drop", rval = "bool", args = { "item" }, comment = "Sets invlet and adds to inventory if possible, drops otherwise, returns true if either succeeded.          *  An optional qty can be provided (and will perform better than separate calls).", location = { "./src/character.h", 386 } },
        { name = "i_add_or_drop", rval = "bool", args = { "item", "int" }, comment = "Sets invlet and adds to inventory if possible, drops otherwise, returns true if either succeeded.          *  An optional qty can be provided (and will perform better than separate calls).", location = { "./src/character.h", 386 } },
        { name = "i_at", rval = "item&", args = { "int" }, location = { "./src/character.h", 341 } },
        { name = "i_rem", rval = "item", args = { "int" }, comment = "Remove a specific item from player possession. The item is compared          * by pointer. Contents of the item are removed as well.          * @param pos The item position of the item to be removed. The item *must*          * exists, use @ref has_item to check this.          * @return A copy of the removed item.", location = { "./src/character.h", 374 } },
        { name = "i_rem", rval = "item", args = { "item" }, comment = "Remove a specific item from player possession. The item is compared          * by pointer. Contents of the item are removed as well.          * @param it A pointer to the item to be removed. The item *must* exists          * in the players possession (one can use @ref has_item to check for this).          * @return A copy of the removed item.", location = { "./src/character.h", 382 } },
        { name = "i_rem_keep_contents", rval = nil, args = { "int" }, location = { "./src/character.h", 383 } },
        { name = "is_blind", rval = "bool", args = { }, comment = "Returns true if the player isn't able to see", location = { "./src/character.h", 190 } },
        { name = "is_wearing", rval = "bool", args = { "std::string" }, comment = "Returns true if the player is wearing the item.", location = { "./src/character.h", 446 } },
        { name = "is_wearing_active_power_armor", rval = "bool", args = { }, comment = "Returns true if the character is wearing active power", location = { "./src/character.h", 187 } },
        { name = "is_wearing_on_bp", rval = "bool", args = { "std::string", "body_part" }, comment = "Returns true if the player is wearing the item on the given body_part.", location = { "./src/character.h", 448 } },
        { name = "is_worn", rval = "bool", args = { "item" }, location = { "./src/character.h", 321 } },
        { name = "limb_color", rval = "int", args = { "body_part", "bool", "bool", "bool" }, location = { "./src/character.h", 263 } },
        { name = "max_quality", rval = "int", args = { "quality_id" }, comment = "Return maximum tool quality level provided by instance or INT_MIN if not found", location = { "./src/visitable.h", 72 } },
        { name = "meets_requirements", rval = "bool", args = { "item" }, comment = "Checks whether the character meets overall requirements to be able to use the item", location = { "./src/character.h", 473 } },
        { name = "meets_requirements", rval = "bool", args = { "item", "item" }, comment = "Checks whether the character meets overall requirements to be able to use the item", location = { "./src/character.h", 473 } },
        { name = "meets_stat_requirements", rval = "bool", args = { "item" }, comment = "Checks whether the character's stats meets the stats required by the item", location = { "./src/character.h", 471 } },
        { name = "mod_dex_bonus", rval = nil, args = { "int" }, location = { "./src/character.h", 112 } },
        { name = "mod_fatigue", rval = nil, args = { "int" }, location = { "./src/character.h", 138 } },
        { name = "mod_healthy", rval = nil, args = { "int" }, comment = "Modifiers for health values exclusive to characters", location = { "./src/character.h", 121 } },
        { name = "mod_healthy_mod", rval = nil, args = { "int", "int" }, location = { "./src/character.h", 122 } },
        { name = "mod_hunger", rval = nil, args = { "int" }, comment = "Modifiers for need values exclusive to characters", location = { "./src/character.h", 136 } },
        { name = "mod_int_bonus", rval = nil, args = { "int" }, location = { "./src/character.h", 114 } },
        { name = "mod_per_bonus", rval = nil, args = { "int" }, location = { "./src/character.h", 113 } },
        { name = "mod_stomach_food", rval = nil, args = { "int" }, location = { "./src/character.h", 139 } },
        { name = "mod_stomach_water", rval = nil, args = { "int" }, location = { "./src/character.h", 140 } },
        { name = "mod_str_bonus", rval = nil, args = { "int" }, location = { "./src/character.h", 111 } },
        { name = "mod_thirst", rval = nil, args = { "int" }, location = { "./src/character.h", 137 } },
        { name = "mutation_armor", rval = "float", args = { "body_part", "damage_type" }, location = { "./src/character.h", 296 } },
        { name = "mutation_armor", rval = "float", args = { "body_part", "damage_unit" }, location = { "./src/character.h", 297 } },
        { name = "mutation_effect", rval = nil, args = { "std::string" }, comment = "Handles things like destruction of armor, etc.", location = { "./src/character.h", 285 } },
        { name = "mutation_loss_effect", rval = nil, args = { "std::string" }, comment = "Handles what happens when you lose a mutation.", location = { "./src/character.h", 287 } },
        { name = "mutation_value", rval = "float", args = { "std::string" }, comment = "Goes over all mutations, gets min and max of a value with given name          * @return min( 0, lowest ) + max( 0, highest )", location = { "./src/character.h", 523 } },
        { name = "on_item_takeoff", rval = nil, args = { "item" }, location = { "./src/character.h", 570 } },
        { name = "on_item_wear", rval = nil, args = { "item" }, location = { "./src/character.h", 569 } },
        { name = "pick_name", rval = nil, args = { "bool" }, comment = "Returns a random name from NAMES_", location = { "./src/character.h", 533 } },
        { name = "pick_name", rval = nil, args = { }, comment = "Returns a random name from NAMES_", location = { "./src/character.h", 533 } },
        { name = "pour_into", rval = "bool", args = { "item", "item" }, comment = "Try to pour the given liquid into the given container/vehicle. The transferred charges are          * removed from the liquid item. Check the charges of afterwards to see if anything has          * been transferred at all.          * The functions do not consume any move points.          * @return Whether anything has been moved at all. `false` indicates the transfer is not          * possible at all. `true` indicates at least some of the liquid has been moved.          */         /**@{", location = { "./src/character.h", 363 } },
        { name = "pour_into", rval = "bool", args = { "vehicle", "item" }, location = { "./src/character.h", 364 } },
        { name = "random_bad_trait", rval = "std::string", args = { }, comment = "Returns the id of a random starting trait that costs < 0 points", location = { "./src/character.h", 229 } },
        { name = "random_good_trait", rval = "std::string", args = { }, comment = "Returns the id of a random starting trait that costs >= 0 points", location = { "./src/character.h", 227 } },
        { name = "recalc_hp", rval = nil, args = { }, comment = "Recalculates HP after a change to max strength", location = { "./src/character.h", 207 } },
        { name = "recalc_sight_limits", rval = nil, args = { }, comment = "Modifies the player's sight values          *  Must be called when any of the following change:          *  This must be called when any of the following change:          * - effects          * - bionics          * - traits          * - underwater          * - clothes", location = { "./src/character.h", 217 } },
        { name = "remove_item", rval = "item", args = { "item" }, comment = "Removes and returns the item which must be contained by this instance", location = { "./src/visitable.h", 111 } },
        { name = "remove_mission_items", rval = nil, args = { "int" }, location = { "./src/character.h", 397 } },
        { name = "remove_weapon", rval = "item", args = { }, location = { "./src/character.h", 396 } },
        { name = "reset_encumbrance", rval = nil, args = { }, comment = "Recalculates encumbrance cache.", location = { "./src/character.h", 177 } },
        { name = "rest_quality", rval = "float", args = { }, comment = "Returns >0 if character is sitting/lying and relatively inactive.          * 1 represents sleep on comfortable bed, so anything above that should be rare.", location = { "./src/character.h", 513 } },
        { name = "set_dex_bonus", rval = nil, args = { "int" }, location = { "./src/character.h", 108 } },
        { name = "set_fatigue", rval = nil, args = { "int" }, location = { "./src/character.h", 145 } },
        { name = "set_healthy", rval = nil, args = { "int" }, comment = "Setters for health values exclusive to characters", location = { "./src/character.h", 125 } },
        { name = "set_healthy_mod", rval = nil, args = { "int" }, location = { "./src/character.h", 126 } },
        { name = "set_hunger", rval = nil, args = { "int" }, comment = "Setters for need values exclusive to characters", location = { "./src/character.h", 143 } },
        { name = "set_int_bonus", rval = nil, args = { "int" }, location = { "./src/character.h", 110 } },
        { name = "set_mutation", rval = nil, args = { "std::string" }, comment = "Add or removes a mutation on the player, but does not trigger mutation loss/gain effects.", location = { "./src/character.h", 244 } },
        { name = "set_per_bonus", rval = nil, args = { "int" }, location = { "./src/character.h", 109 } },
        { name = "set_skill_level", rval = nil, args = { "skill_id", "int" }, location = { "./src/character.h", 457 } },
        { name = "set_stomach_food", rval = nil, args = { "int" }, location = { "./src/character.h", 146 } },
        { name = "set_stomach_water", rval = nil, args = { "int" }, location = { "./src/character.h", 147 } },
        { name = "set_str_bonus", rval = nil, args = { "int" }, comment = "Setters for stats exclusive to characters", location = { "./src/character.h", 107 } },
        { name = "set_thirst", rval = nil, args = { "int" }, location = { "./src/character.h", 144 } },
        { name = "set_turn_died", rval = nil, args = { "int" }, comment = "set the turn the turn the character died if not already done", location = { "./src/character.h", 485 } },
        { name = "throw_dispersion_per_dodge", rval = "int", args = { "bool" }, comment = "How much dispersion does one point of target's dodge add when throwing at said target?", location = { "./src/character.h", 422 } },
        { name = "throw_dispersion_per_dodge", rval = "int", args = { }, comment = "How much dispersion does one point of target's dodge add when throwing at said target?", location = { "./src/character.h", 422 } },
        { name = "throw_range", rval = "int", args = { "item" }, comment = "Maximum thrown range with a given item, taking all active effects into account.", location = { "./src/character.h", 418 } },
        { name = "throwing_dispersion", rval = "int", args = { "item" }, comment = "Dispersion of a thrown item, against a given target.", location = { "./src/character.h", 420 } },
        { name = "throwing_dispersion", rval = "int", args = { "item", "Creature" }, comment = "Dispersion of a thrown item, against a given target.", location = { "./src/character.h", 420 } },
        { name = "toggle_trait", rval = nil, args = { "std::string" }, comment = "Toggles a trait on the player and in their mutation list", location = { "./src/character.h", 242 } },
        { name = "trait_by_invlet", rval = "std::string", args = { "int" }, comment = "Returns the trait id with the given invlet, or an empty string if no trait has that invlet", location = { "./src/character.h", 239 } },
        { name = "unset_mutation", rval = nil, args = { "std::string" }, location = { "./src/character.h", 245 } },
        { name = "update_health", rval = nil, args = { "int" }, comment = "Handles health fluctuations over time", location = { "./src/character.h", 162 } },
        { name = "update_health", rval = nil, args = { }, comment = "Handles health fluctuations over time", location = { "./src/character.h", 162 } },
        { name = "volume_capacity", rval = "units::volume", args = { }, location = { "./src/character.h", 427 } },
        { name = "volume_capacity_reduced_by", rval = "units::volume", args = { "units::volume" }, location = { "./src/character.h", 428 } },
        { name = "volume_carried", rval = "units::volume", args = { }, location = { "./src/character.h", 425 } },
        { name = "weight_carried", rval = "int", args = { }, location = { "./src/character.h", 424 } },
        { name = "worn_position_to_index", static = true, rval = "int", args = { "int" }, location = { "./src/character.h", 315 } },
        { name = "worn_with_flag", rval = "bool", args = { "std::string" }, comment = "Returns true if the player is wearing an item with the given flag.", location = { "./src/character.h", 450 } },
        { name = "worn_with_flag", rval = "bool", args = { "std::string", "body_part" }, comment = "Returns true if the player is wearing an item with the given flag.", location = { "./src/character.h", 450 } },
    }
}
classes['map_stack'] = {
    by_value = true,
    functions = {
        { name = "amount_can_fit", rval = "int", args = { "item" }, comment = "Returns how many of the specified item (or how many charges if it's counted by charges)          * could be added without violating either the volume or itemcount limits.          *          * @returns Value of zero or greater for all items. For items counted by charges, it is always at          * most it.charges.", location = { "./src/item_stack.h", 61 } },
        { name = "count_limit", rval = "int", args = { }, comment = "Maximum number of items allowed here", location = { "./src/item_stack.h", 46 } },
        { name = "cppbegin", rval = "std::list<item>::iterator", cpp_name = "begin", args = { }, location = { "./src/item_stack.h", 36 } },
        { name = "cppend", rval = "std::list<item>::iterator", cpp_name = "end", args = { }, location = { "./src/item_stack.h", 37 } },
        { name = "empty", rval = "bool", args = { }, location = { "./src/item_stack.h", 29 } },
        { name = "erase", rval = "std::list<item>::iterator", args = { "std::list<item>::iterator" }, location = { "./src/item_stack.h", 30 } },
        { name = "free_volume", rval = "units::volume", args = { }, location = { "./src/item_stack.h", 51 } },
        { name = "front", rval = "item&", args = { }, location = { "./src/item_stack.h", 33 } },
        { name = "insert_at", rval = nil, args = { "std::list<item>::iterator", "item" }, location = { "./src/item_stack.h", 32 } },
        { name = "max_volume", rval = "units::volume", args = { }, comment = "Maximum volume allowed here", location = { "./src/item_stack.h", 48 } },
        { name = "push_back", rval = nil, args = { "item" }, location = { "./src/item_stack.h", 31 } },
        { name = "size", rval = "int", args = { }, location = { "./src/item_stack.h", 28 } },
        { name = "stacks_with", rval = "item&", args = { "item" }, comment = "Return the item (or nullptr) that stacks with the argument", location = { "./src/item_stack.h", 63 } },
        { name = "stored_volume", rval = "units::volume", args = { }, comment = "Total volume of the items here", location = { "./src/item_stack.h", 50 } },
    }
}
classes['game'] = {
    attributes = {
        dangerous_proximity = { type = "int" },
        driving_view_offset = { type = "point", writable = true },
        fullscreen = { type = "bool", writable = true },
        lightning_active = { type = "bool", writable = true },
        monstairz = { type = "int", writable = true },
        narrow_sidebar = { type = "bool", writable = true },
        new_game = { type = "bool", writable = true },
        pixel_minimap_option = { type = "int", writable = true },
        right_sidebar = { type = "bool", writable = true },
        temperature = { type = "int", writable = true },
        ter_view_x = { type = "int", writable = true },
        ter_view_y = { type = "int", writable = true },
        ter_view_z = { type = "int", writable = true },
        uquit = { type = "quit_status", writable = true },
        was_fullscreen = { type = "bool", writable = true },
        weather = { type = "weather_type", writable = true },
        weight_dragged = { type = "int", writable = true },
    },
    functions = {
        { name = "add_artifact_messages", rval = nil, args = { "std::vector<art_effect_passive>" }, location = { "./src/game.h", 433 } },
        { name = "add_zombie", rval = "bool", args = { "monster" }, comment = "Calls the creature_tracker add function. Returns true if successful.", location = { "./src/game.h", 300 } },
        { name = "add_zombie", rval = "bool", args = { "monster", "bool" }, location = { "./src/game.h", 301 } },
        { name = "assign_faction_id", rval = "int", args = { }, location = { "./src/game.h", 421 } },
        { name = "assign_mission_id", rval = "int", args = { }, comment = "Returns the next available mission id.", location = { "./src/game.h", 385 } },
        { name = "assign_npc_id", rval = "int", args = { }, location = { "./src/game.h", 420 } },
        { name = "calc_driving_offset", rval = nil, args = { "vehicle" }, location = { "./src/game.h", 552 } },
        { name = "calc_driving_offset", rval = nil, args = { }, location = { "./src/game.h", 552 } },
        { name = "cancel_activity", rval = nil, args = { }, comment = "Redirects to player::cancel_activity().", location = { "./src/game.h", 370 } },
        { name = "check_mod_data", rval = "bool", args = { "std::vector<std::string>" }, comment = "Check if mods can be sucessfully loaded          *  @param opts check specific mods (or all if unspecified)          *  @return whether all mods were successfully loaded", location = { "./src/game.h", 149 } },
        { name = "check_safe_mode_allowed", rval = "bool", args = { "bool" }, comment = "Check whether movement is allowed according to safe mode settings.          * @return true if the movement is allowed, otherwise false.", location = { "./src/game.h", 673 } },
        { name = "check_safe_mode_allowed", rval = "bool", args = { }, comment = "Check whether movement is allowed according to safe mode settings.          * @return true if the movement is allowed, otherwise false.", location = { "./src/game.h", 673 } },
        { name = "check_zone", rval = "bool", args = { "std::string", "tripoint" }, location = { "./src/game.h", 439 } },
        { name = "cleanup_at_end", rval = "bool", args = { }, location = { "./src/game.h", 203 } },
        { name = "clear_zombies", rval = nil, args = { }, comment = "Redirects to the creature_tracker clear() function.", location = { "./src/game.h", 310 } },
        { name = "consume_liquid", rval = "bool", args = { "item" }, comment = "Consume / handle as much of the liquid as possible in varying ways. This function can          * be used when the action can be canceled, which implies the liquid can be put back          * to wherever it came from and is *not* lost if the player cancels the action.          * It returns when all liquid has been handled or if the player has explicitly canceled          * the action (use the charges count to distinguish).          * @return Whether any of the liquid has been consumed. `false` indicates the player has          * declined all options to handle the liquid and no charges of the liquid have been transferred.          * `true` indicates some charges have been transferred (but not necessarily all of them).", location = { "./src/game.h", 582 } },
        { name = "consume_liquid", rval = "bool", args = { "item", "int" }, comment = "Consume / handle as much of the liquid as possible in varying ways. This function can          * be used when the action can be canceled, which implies the liquid can be put back          * to wherever it came from and is *not* lost if the player cancels the action.          * It returns when all liquid has been handled or if the player has explicitly canceled          * the action (use the charges count to distinguish).          * @return Whether any of the liquid has been consumed. `false` indicates the player has          * declined all options to handle the liquid and no charges of the liquid have been transferred.          * `true` indicates some charges have been transferred (but not necessarily all of them).", location = { "./src/game.h", 582 } },
        { name = "critter_at", rval = "Creature&", args = { "tripoint" }, comment = "Returns the Creature at tripoint p", location = { "./src/game.h", 294 } },
        { name = "critter_at", rval = "Creature&", args = { "tripoint", "bool" }, comment = "Returns the Creature at tripoint p", location = { "./src/game.h", 294 } },
        { name = "delete_world", rval = nil, args = { "std::string", "bool" }, comment = "Deletes the given world. If delete_folder is true delete all the files and directories          *  of the given world folder. Else just avoid deleting the two config files and the directory          *  itself.", location = { "./src/game.h", 199 } },
        { name = "do_blast", rval = nil, args = { "tripoint", "float", "float", "bool" }, comment = "Helper for explosion, does the actual blast.", location = { "./src/game.h", 258 } },
        { name = "do_turn", rval = "bool", args = { }, comment = "MAIN GAME LOOP. Returns true if game is over (death, saved, quit, etc.).", location = { "./src/game.h", 206 } },
        { name = "draw", rval = nil, args = { }, location = { "./src/game.h", 207 } },
        { name = "draw_bullet", rval = nil, args = { "Creature", "tripoint", "int", "std::vector<tripoint>", "int" }, location = { "./src/game.h", 656 } },
        { name = "draw_critter", rval = nil, args = { "Creature", "tripoint" }, location = { "./src/game.h", 667 } },
        { name = "draw_explosion", rval = nil, args = { "tripoint", "int", "int" }, location = { "./src/game.h", 654 } },
        { name = "draw_hit_mon", rval = nil, args = { "tripoint", "monster" }, location = { "./src/game.h", 658 } },
        { name = "draw_hit_mon", rval = nil, args = { "tripoint", "monster", "bool" }, location = { "./src/game.h", 658 } },
        { name = "draw_hit_player", rval = nil, args = { "player", "int" }, location = { "./src/game.h", 659 } },
        { name = "draw_line", rval = nil, args = { "tripoint", "std::vector<tripoint>" }, location = { "./src/game.h", 661 } },
        { name = "draw_line", rval = nil, args = { "tripoint", "tripoint", "std::vector<tripoint>" }, location = { "./src/game.h", 660 } },
        { name = "draw_sct", rval = nil, args = { }, location = { "./src/game.h", 663 } },
        { name = "draw_ter", rval = nil, args = { "bool" }, location = { "./src/game.h", 208 } },
        { name = "draw_ter", rval = nil, args = { "tripoint" }, location = { "./src/game.h", 209 } },
        { name = "draw_ter", rval = nil, args = { "tripoint", "bool" }, location = { "./src/game.h", 209 } },
        { name = "draw_ter", rval = nil, args = { "tripoint", "bool", "bool" }, location = { "./src/game.h", 209 } },
        { name = "draw_ter", rval = nil, args = { }, location = { "./src/game.h", 208 } },
        { name = "draw_trail_to_square", rval = nil, args = { "tripoint", "bool" }, location = { "./src/game.h", 457 } },
        { name = "draw_veh_dir_indicator", rval = nil, args = { "bool" }, location = { "./src/game.h", 218 } },
        { name = "draw_zones", rval = nil, args = { "tripoint", "tripoint", "tripoint" }, location = { "./src/game.h", 664 } },
        { name = "dump_stats", rval = "bool", args = { "std::string", "dump_mode", "std::vector<std::string>" }, comment = "write statisics to stdout and @return true if sucessful", location = { "./src/game.h", 192 } },
        { name = "emp_blast", rval = nil, args = { "tripoint" }, comment = "Triggers an emp blast at p.", location = { "./src/game.h", 288 } },
        { name = "exam_vehicle", rval = nil, args = { "vehicle" }, comment = "open vehicle interaction screen", location = { "./src/game.h", 683 } },
        { name = "exam_vehicle", rval = nil, args = { "vehicle", "int" }, comment = "open vehicle interaction screen", location = { "./src/game.h", 683 } },
        { name = "exam_vehicle", rval = nil, args = { "vehicle", "int", "int" }, comment = "open vehicle interaction screen", location = { "./src/game.h", 683 } },
        { name = "explosion", rval = nil, args = { "tripoint", "float" }, comment = "Create explosion at p of intensity (power) with (shrapnel) chunks of shrapnel.             Explosion intensity formula is roughly power*factor^distance.             If factor <= 0, no blast is produced", location = { "./src/game.h", 248 } },
        { name = "explosion", rval = nil, args = { "tripoint", "float", "float" }, comment = "Create explosion at p of intensity (power) with (shrapnel) chunks of shrapnel.             Explosion intensity formula is roughly power*factor^distance.             If factor <= 0, no blast is produced", location = { "./src/game.h", 248 } },
        { name = "explosion", rval = nil, args = { "tripoint", "float", "float", "bool" }, comment = "Create explosion at p of intensity (power) with (shrapnel) chunks of shrapnel.             Explosion intensity formula is roughly power*factor^distance.             If factor <= 0, no blast is produced", location = { "./src/game.h", 248 } },
        { name = "explosion", rval = nil, args = { "tripoint", "float", "float", "bool", "int" }, comment = "Create explosion at p of intensity (power) with (shrapnel) chunks of shrapnel.             Explosion intensity formula is roughly power*factor^distance.             If factor <= 0, no blast is produced", location = { "./src/game.h", 248 } },
        { name = "explosion", rval = nil, args = { "tripoint", "float", "float", "bool", "int", "int" }, comment = "Create explosion at p of intensity (power) with (shrapnel) chunks of shrapnel.             Explosion intensity formula is roughly power*factor^distance.             If factor <= 0, no blast is produced", location = { "./src/game.h", 248 } },
        { name = "extended_description", rval = nil, args = { "tripoint" }, comment = "Long description of (visible) things at tile.", location = { "./src/game.h", 455 } },
        { name = "find_npc", rval = "npc&", args = { "int" }, location = { "./src/game.h", 386 } },
        { name = "flashbang", rval = nil, args = { "tripoint" }, comment = "Triggers a flashbang explosion at p.", location = { "./src/game.h", 272 } },
        { name = "flashbang", rval = nil, args = { "tripoint", "bool" }, comment = "Triggers a flashbang explosion at p.", location = { "./src/game.h", 272 } },
        { name = "fling_creature", rval = nil, args = { "Creature", "int", "float" }, comment = "Flings the input creature in the given direction.", location = { "./src/game.h", 409 } },
        { name = "fling_creature", rval = nil, args = { "Creature", "int", "float", "bool" }, comment = "Flings the input creature in the given direction.", location = { "./src/game.h", 409 } },
        { name = "forced_door_closing", rval = "bool", args = { "tripoint", "ter_id", "int" }, location = { "./src/game.h", 702 } },
        { name = "game_error", rval = "bool", args = { }, comment = "Returns true if the game quits through some error.", location = { "./src/game.h", 179 } },
        { name = "gametype", rval = "special_game_id", args = { }, location = { "./src/game.h", 479 } },
        { name = "get_cur_om", rval = "overmap&", args = { }, comment = "The overmap which contains the center submap of the reality bubble.", location = { "./src/game.h", 512 } },
        { name = "get_levx", rval = "int", args = { }, comment = "The top left corner of the reality bubble (in submaps coordinates). This is the same          * as @ref map::abs_sub of the @ref m map.", location = { "./src/game.h", 501 } },
        { name = "get_levy", rval = "int", args = { }, location = { "./src/game.h", 502 } },
        { name = "get_levz", rval = "int", args = { }, location = { "./src/game.h", 503 } },
        { name = "get_seed", rval = "int", args = { }, location = { "./src/game.h", 812 } },
        { name = "get_temperature", rval = "int", args = { }, location = { "./src/game.h", 492 } },
        { name = "get_user_action_counter", rval = "int", args = { }, location = { "./src/game.h", 489 } },
        { name = "get_veh_dir_indicator_location", rval = "tripoint", args = { "bool" }, comment = "Returns the location where the indicator should go relative to the reality bubble,          * or tripoint_min to indicate no indicator should be drawn.          * Based on the vehicle the player is driving, if any.          * @param next If true, bases it on the vehicle the vehicle will turn to next turn,          * instead of the one it is currently facing.", location = { "./src/game.h", 217 } },
        { name = "handle_all_liquid", rval = nil, args = { "item", "int" }, comment = "@name Liquid handling          */         /**@{*/         /**          * Consume / handle all of the liquid. The function can be used when the liquid needs          * to be handled and can not be put back to where it came from (e.g. when it's a newly          * created item from crafting).          * The player is forced to handle all of it, which may required them to pour it onto          * the ground (if they don't have enough container space available) and essentially          * loose the item.          * @return Whether any of the liquid has been consumed. `false` indicates the player has          * declined all options to handle the liquid (essentially canceled the action) and no          * charges of the liquid have been transferred.          * `true` indicates some charges have been transferred (but not necessarily all of them).", location = { "./src/game.h", 570 } },
        { name = "handle_liquid", rval = "bool", args = { "item" }, comment = "This may start a player activity if either \\p source_pos or \\p source_veh is not          * null.          * The function consumes moves of the player as needed.          * Supply one of the source parameters to prevent the player from pouring the liquid back          * into that 'container'. If no source parameter is given, the liquid must not be in a          * container at all (e.g. freshly crafted, or already removed from the container).          * @param liquid The actual liquid          * @param source The container that currently contains the liquid.          * @param radius Radius to look for liquid around pos          * @param source_pos The source of the liquid when it's from the map.          * @param source_veh The vehicle that currently contains the liquid in its tank.          * @return Whether the user has handled the liquid (at least part of it). `false` indicates          * the user has rejected all possible actions. But note that `true` does *not* indicate any          * liquid was actually consumed, the user may have chosen an option that turned out to be          * invalid (chose to fill into a full/unsuitable container).          * Basically `false` indicates the user does not *want* to handle the liquid, `true`          * indicates they want to handle it.", location = { "./src/game.h", 632 } },
        { name = "handle_liquid", rval = "bool", args = { "item", "item" }, comment = "This may start a player activity if either \\p source_pos or \\p source_veh is not          * null.          * The function consumes moves of the player as needed.          * Supply one of the source parameters to prevent the player from pouring the liquid back          * into that 'container'. If no source parameter is given, the liquid must not be in a          * container at all (e.g. freshly crafted, or already removed from the container).          * @param liquid The actual liquid          * @param source The container that currently contains the liquid.          * @param radius Radius to look for liquid around pos          * @param source_pos The source of the liquid when it's from the map.          * @param source_veh The vehicle that currently contains the liquid in its tank.          * @return Whether the user has handled the liquid (at least part of it). `false` indicates          * the user has rejected all possible actions. But note that `true` does *not* indicate any          * liquid was actually consumed, the user may have chosen an option that turned out to be          * invalid (chose to fill into a full/unsuitable container).          * Basically `false` indicates the user does not *want* to handle the liquid, `true`          * indicates they want to handle it.", location = { "./src/game.h", 632 } },
        { name = "handle_liquid", rval = "bool", args = { "item", "item", "int" }, comment = "This may start a player activity if either \\p source_pos or \\p source_veh is not          * null.          * The function consumes moves of the player as needed.          * Supply one of the source parameters to prevent the player from pouring the liquid back          * into that 'container'. If no source parameter is given, the liquid must not be in a          * container at all (e.g. freshly crafted, or already removed from the container).          * @param liquid The actual liquid          * @param source The container that currently contains the liquid.          * @param radius Radius to look for liquid around pos          * @param source_pos The source of the liquid when it's from the map.          * @param source_veh The vehicle that currently contains the liquid in its tank.          * @return Whether the user has handled the liquid (at least part of it). `false` indicates          * the user has rejected all possible actions. But note that `true` does *not* indicate any          * liquid was actually consumed, the user may have chosen an option that turned out to be          * invalid (chose to fill into a full/unsuitable container).          * Basically `false` indicates the user does not *want* to handle the liquid, `true`          * indicates they want to handle it.", location = { "./src/game.h", 632 } },
        { name = "handle_liquid_from_container", rval = "bool", args = { "item" }, comment = "Shortcut to the above: handles the first item in the container.", location = { "./src/game.h", 611 } },
        { name = "handle_liquid_from_container", rval = "bool", args = { "item", "int" }, comment = "Shortcut to the above: handles the first item in the container.", location = { "./src/game.h", 611 } },
        { name = "handle_liquid_from_container", rval = "bool", args = { "std::list<item>::iterator", "item" }, comment = "Handle liquid from inside a container item. The function also handles consuming move points.          * @param in_container Iterator to the liquid. Must be valid and point to an          * item in the @ref item::contents of the container.          * @param container Container of the liquid          * @param radius around position to handle liquid for          * @return Whether the item has been removed (which implies it was handled completely).          * The iterator is invalidated in that case. Otherwise the item remains but may have          * fewer charges.", location = { "./src/game.h", 607 } },
        { name = "handle_liquid_from_container", rval = "bool", args = { "std::list<item>::iterator", "item", "int" }, comment = "Handle liquid from inside a container item. The function also handles consuming move points.          * @param in_container Iterator to the liquid. Must be valid and point to an          * item in the @ref item::contents of the container.          * @param container Container of the liquid          * @param radius around position to handle liquid for          * @return Whether the item has been removed (which implies it was handled completely).          * The iterator is invalidated in that case. Otherwise the item remains but may have          * fewer charges.", location = { "./src/game.h", 607 } },
        { name = "handle_liquid_from_ground", rval = "bool", args = { "std::list<item>::iterator", "tripoint" }, comment = "Handle finite liquid from ground. The function also handles consuming move points.          * This may start a player activity.          * @param on_ground Iterator to the item on the ground. Must be valid and point to an          * item in the stack at `m.i_at(pos)`          * @param pos The position of the item on the map.          * @param radius around position to handle liquid for          * @return Whether the item has been removed (which implies it was handled completely).          * The iterator is invalidated in that case. Otherwise the item remains but may have          * fewer charges.", location = { "./src/game.h", 595 } },
        { name = "handle_liquid_from_ground", rval = "bool", args = { "std::list<item>::iterator", "tripoint", "int" }, comment = "Handle finite liquid from ground. The function also handles consuming move points.          * This may start a player activity.          * @param on_ground Iterator to the item on the ground. Must be valid and point to an          * item in the stack at `m.i_at(pos)`          * @param pos The position of the item on the map.          * @param radius around position to handle liquid for          * @return Whether the item has been removed (which implies it was handled completely).          * The iterator is invalidated in that case. Otherwise the item remains but may have          * fewer charges.", location = { "./src/game.h", 595 } },
        { name = "has_gametype", rval = "bool", args = { }, location = { "./src/game.h", 478 } },
        { name = "increase_kill_count", rval = nil, args = { "mtype_id" }, comment = "Increments the number of kills of the given mtype_id by the player upwards.", location = { "./src/game.h", 398 } },
        { name = "init_ui", rval = nil, args = { }, comment = "Initializes the UI.", location = { "./src/game.h", 176 } },
        { name = "inv_for_all", rval = "int", args = { "std::string" }, location = { "./src/game.h", 461 } },
        { name = "inv_for_all", rval = "int", args = { "std::string", "std::string" }, location = { "./src/game.h", 461 } },
        { name = "inv_for_flag", rval = "int", args = { "std::string", "std::string" }, location = { "./src/game.h", 462 } },
        { name = "inv_for_id", rval = "int", args = { "std::string", "std::string" }, location = { "./src/game.h", 463 } },
        { name = "inventory_item_menu", rval = "int", args = { "int" }, location = { "./src/game.h", 471 } },
        { name = "inventory_item_menu", rval = "int", args = { "int", "int" }, location = { "./src/game.h", 471 } },
        { name = "inventory_item_menu", rval = "int", args = { "int", "int", "int" }, location = { "./src/game.h", 471 } },
        { name = "is_core_data_loaded", rval = "bool", args = { }, comment = "Returns whether the core data is currently loaded.", location = { "./src/game.h", 142 } },
        { name = "is_empty", rval = "bool", args = { "tripoint" }, comment = "Returns true if there is no player, NPC, or monster on the tile and move_cost > 0.", location = { "./src/game.h", 321 } },
        { name = "is_hostile_nearby", rval = "Creature&", args = { }, location = { "./src/game.h", 423 } },
        { name = "is_hostile_very_close", rval = "Creature&", args = { }, location = { "./src/game.h", 424 } },
        { name = "is_in_sunlight", rval = "bool", args = { "tripoint" }, comment = "Returns true if p is outdoors and it is sunny.", location = { "./src/game.h", 323 } },
        { name = "is_sheltered", rval = "bool", args = { "tripoint" }, comment = "Returns true if p is indoors, underground, or in a car.", location = { "./src/game.h", 325 } },
        { name = "kill_count", rval = "int", args = { "mtype_id" }, comment = "Returns the number of kills of the given mon_id by the player.", location = { "./src/game.h", 396 } },
        { name = "knockback", rval = nil, args = { "std::vector<tripoint>", "int", "int", "int" }, location = { "./src/game.h", 646 } },
        { name = "knockback", rval = nil, args = { "tripoint", "tripoint", "int", "int", "int" }, location = { "./src/game.h", 645 } },
        { name = "light_level", rval = "int", args = { "int" }, comment = "Returns coarse number-of-squares of visibility at the current light level.          * Used by monster and NPC AI.", location = { "./src/game.h", 418 } },
        { name = "list_active_characters", rval = "std::vector<std::string>", args = { }, comment = "Returns a list of currently active character saves.", location = { "./src/game.h", 201 } },
        { name = "load", rval = "bool", args = { "std::string" }, comment = "Attempt to load first valid save (if any) in world", location = { "./src/game.h", 709 } },
        { name = "load_core_data", rval = nil, args = { }, comment = "Loads core dynamic data. May throw.", location = { "./src/game.h", 139 } },
        { name = "load_map", rval = nil, args = { "tripoint" }, comment = "Load the main map at given location, see @ref map::load, in global, absolute submap          * coordinates.", location = { "./src/game.h", 508 } },
        { name = "load_mission_npcs", rval = nil, args = { }, comment = "Pulls the NPCs that were dumped into the world map on save back into mission_npcs", location = { "./src/game.h", 394 } },
        { name = "load_npcs", rval = nil, args = { }, comment = "Makes any nearby NPCs on the overmap active.", location = { "./src/game.h", 388 } },
        { name = "load_packs", rval = "bool", args = { "std::string", "std::vector<std::string>" }, comment = "Load content packs          *  @param msg string to display whilst loading prompt          *  @param packs content packs to load in correct dependent order          *  @return true if all packs were found, false if any were missing", location = { "./src/game.h", 160 } },
        { name = "load_static_data", rval = nil, args = { }, comment = "Loads static data that does not depend on mods or similar.", location = { "./src/game.h", 136 } },
        { name = "look_around", rval = "tripoint", args = { }, location = { "./src/game.h", 445 } },
        { name = "look_debug", rval = "tripoint", args = { }, location = { "./src/game.h", 437 } },
        { name = "mon_at", rval = "int", args = { "tripoint" }, comment = "Returns the monster index of the monster at the given tripoint. Returns -1 if no monster is present.", location = { "./src/game.h", 317 } },
        { name = "mon_at", rval = "int", args = { "tripoint", "bool" }, comment = "Returns the monster index of the monster at the given tripoint. Returns -1 if no monster is present.", location = { "./src/game.h", 317 } },
        { name = "monster_at", rval = "monster&", args = { "tripoint" }, comment = "Returns a pointer to the monster at the given tripoint.", location = { "./src/game.h", 319 } },
        { name = "monster_at", rval = "monster&", args = { "tripoint", "bool" }, comment = "Returns a pointer to the monster at the given tripoint.", location = { "./src/game.h", 319 } },
        { name = "moving_vehicle_dismount", rval = nil, args = { "tripoint" }, comment = "Handles players exiting from moving vehicles.", location = { "./src/game.h", 377 } },
        { name = "natural_light_level", rval = "float", args = { "int" }, location = { "./src/game.h", 414 } },
        { name = "npc_at", rval = "int", args = { "tripoint" }, comment = "Returns the NPC index of the npc at p. Returns -1 if no NPC is present.", location = { "./src/game.h", 290 } },
        { name = "npc_by_id", rval = "int", args = { "int" }, comment = "Returns the NPC index of the npc with a matching ID. Returns -1 if no NPC is present.", location = { "./src/game.h", 292 } },
        { name = "nuke", rval = nil, args = { "tripoint" }, comment = "Nuke the area at p - global overmap terrain coordinates!", location = { "./src/game.h", 412 } },
        { name = "num_zombies", rval = "int", args = { }, comment = "Returns the number of creatures through the creature_tracker size() function.", location = { "./src/game.h", 303 } },
        { name = "open_gate", rval = nil, args = { "tripoint" }, comment = "@}", location = { "./src/game.h", 637 } },
        { name = "peek", rval = nil, args = { "tripoint" }, location = { "./src/game.h", 436 } },
        { name = "peek", rval = nil, args = { }, location = { "./src/game.h", 435 } },
        { name = "place_player", rval = nil, args = { "tripoint" }, location = { "./src/game.h", 806 } },
        { name = "place_player_overmap", rval = nil, args = { "tripoint" }, location = { "./src/game.h", 807 } },
        { name = "plfire", rval = "bool", args = { "item" }, comment = "Handles interactive parts of gun firing (target selection, etc.).          * This version stores targeting parameters for weapon, used for calls to the nullary form.          * @param weapon Reference to a weapon we want to start aiming.          * @param bp_cost The amount by which the player's power reserve is decreased after firing.          * @return Whether an attack was actually performed.", location = { "./src/game.h", 359 } },
        { name = "plfire", rval = "bool", args = { "item", "int" }, comment = "Handles interactive parts of gun firing (target selection, etc.).          * This version stores targeting parameters for weapon, used for calls to the nullary form.          * @param weapon Reference to a weapon we want to start aiming.          * @param bp_cost The amount by which the player's power reserve is decreased after firing.          * @return Whether an attack was actually performed.", location = { "./src/game.h", 359 } },
        { name = "plfire", rval = "bool", args = { }, comment = "Handles interactive parts of gun firing (target selection, etc.).          * @return Whether an attack was actually performed.", location = { "./src/game.h", 351 } },
        { name = "plswim", rval = nil, args = { "tripoint" }, comment = "Handles swimming by the player. Called by plmove().", location = { "./src/game.h", 403 } },
        { name = "process_artifact", rval = nil, args = { "item", "player" }, location = { "./src/game.h", 432 } },
        { name = "reenter_fullscreen", rval = nil, args = { }, location = { "./src/game.h", 485 } },
        { name = "refresh_all", rval = nil, args = { }, location = { "./src/game.h", 425 } },
        { name = "reload_npcs", rval = nil, args = { }, comment = "Unloads, then loads the NPCs", location = { "./src/game.h", 392 } },
        { name = "remoteveh", rval = "vehicle&", args = { }, comment = "Returns the current remotely controlled vehicle.", location = { "./src/game.h", 380 } },
        { name = "remove_zombie", rval = nil, args = { "int" }, location = { "./src/game.h", 308 } },
        { name = "reset_light_level", rval = nil, args = { }, location = { "./src/game.h", 419 } },
        { name = "reset_zoom", rval = nil, args = { }, location = { "./src/game.h", 488 } },
        { name = "resonance_cascade", rval = nil, args = { "tripoint" }, comment = "Triggers a resonance cascade at p.", location = { "./src/game.h", 284 } },
        { name = "revive_corpse", rval = "bool", args = { "tripoint", "item" }, comment = "Revives a corpse at given location. The monster type and some of its properties are          * deducted from the corpse. If reviving succeeds, the location is guaranteed to have a          * new monster there (see @ref mon_at).          * @param location The place where to put the revived monster.          * @param corpse The corpse item, it must be a valid corpse (see @ref item::is_corpse).          * @return Whether the corpse has actually been redivided. Reviving may fail for many          * reasons, including no space to put the monster, corpse being to much damaged etc.          * If the monster was revived, the caller should remove the corpse item.          * If reviving failed, the item is unchanged, as is the environment (no new monsters).", location = { "./src/game.h", 337 } },
        { name = "save", rval = "bool", args = { }, comment = "Returns false if saving failed.", location = { "./src/game.h", 195 } },
        { name = "scrambler_blast", rval = nil, args = { "tripoint" }, comment = "Triggers a scrambler blast at p.", location = { "./src/game.h", 286 } },
        { name = "set_critter_died", rval = nil, args = { }, comment = "If invoked, dead will be cleaned this turn.", location = { "./src/game.h", 817 } },
        { name = "set_driving_view_offset", rval = nil, args = { "point" }, location = { "./src/game.h", 547 } },
        { name = "set_npcs_dirty", rval = nil, args = { }, comment = "If invoked, NPCs will be reloaded before next turn.", location = { "./src/game.h", 815 } },
        { name = "set_safe_mode", rval = nil, args = { "safe_mode_type" }, location = { "./src/game.h", 674 } },
        { name = "setremoteveh", rval = nil, args = { "vehicle" }, comment = "Sets the current remotely controlled vehicle.", location = { "./src/game.h", 382 } },
        { name = "setup", rval = nil, args = { }, location = { "./src/game.h", 177 } },
        { name = "shockwave", rval = nil, args = { "tripoint", "int", "int", "int", "int", "bool" }, location = { "./src/game.h", 651 } },
        { name = "spawn_hallucination", rval = "bool", args = { }, comment = "Spawns a hallucination close to the player.", location = { "./src/game.h", 312 } },
        { name = "start_calendar", rval = nil, args = { }, location = { "./src/game.h", 204 } },
        { name = "summon_mon", rval = "bool", args = { "mtype_id", "tripoint" }, comment = "Summons a brand new monster at the current time. Returns the summoned monster.", location = { "./src/game.h", 298 } },
        { name = "swap_critters", rval = "bool", args = { "Creature", "Creature" }, comment = "Swaps positions of two creatures", location = { "./src/game.h", 314 } },
        { name = "teleport", rval = nil, args = { "player" }, comment = "Performs a random short-distance teleport on the given player, granting teleglow if needed.", location = { "./src/game.h", 401 } },
        { name = "teleport", rval = nil, args = { "player", "bool" }, comment = "Performs a random short-distance teleport on the given player, granting teleglow if needed.", location = { "./src/game.h", 401 } },
        { name = "teleport", rval = nil, args = { }, comment = "Performs a random short-distance teleport on the given player, granting teleglow if needed.", location = { "./src/game.h", 401 } },
        { name = "temp_exit_fullscreen", rval = nil, args = { }, location = { "./src/game.h", 484 } },
        { name = "toggle_fullscreen", rval = nil, args = { }, location = { "./src/game.h", 482 } },
        { name = "toggle_pixel_minimap", rval = nil, args = { }, location = { "./src/game.h", 483 } },
        { name = "toggle_sidebar_style", rval = nil, args = { }, location = { "./src/game.h", 481 } },
        { name = "unload", rval = "bool", args = { "item" }, location = { "./src/game.h", 809 } },
        { name = "unload", rval = nil, args = { "int" }, location = { "./src/game.h", 810 } },
        { name = "unload", rval = nil, args = { }, location = { "./src/game.h", 810 } },
        { name = "unload_npcs", rval = nil, args = { }, comment = "Unloads all NPCs", location = { "./src/game.h", 390 } },
        { name = "update_map", rval = nil, args = { "player" }, location = { "./src/game.h", 428 } },
        { name = "update_overmap_seen", rval = nil, args = { }, location = { "./src/game.h", 430 } },
        { name = "update_zombie_pos", rval = "bool", args = { "monster", "tripoint" }, comment = "Redirects to the creature_tracker update_pos() function.", location = { "./src/game.h", 307 } },
        { name = "use_computer", rval = nil, args = { "tripoint" }, comment = "Checks to see if a player can use a computer (not illiterate, etc.) and uses if able.", location = { "./src/game.h", 282 } },
        { name = "vertical_move", rval = nil, args = { "int", "bool" }, comment = "Moves the player vertically. If force == true then they are falling.", location = { "./src/game.h", 274 } },
        { name = "vertical_notes", rval = nil, args = { "int", "int" }, comment = "Add goes up/down auto_notes (if turned on)", location = { "./src/game.h", 280 } },
        { name = "vertical_shift", rval = nil, args = { "int" }, comment = "Actual z-level movement part of vertical_move. Doesn't include stair finding, traps etc.", location = { "./src/game.h", 278 } },
        { name = "write_memorial_file", rval = nil, args = { "std::string" }, location = { "./src/game.h", 202 } },
        { name = "zombie", rval = "monster&", args = { "int" }, comment = "Returns the monster with match index. Redirects to the creature_tracker find() function.", location = { "./src/game.h", 305 } },
        { name = "zones_manager", rval = nil, args = { }, location = { "./src/game.h", 440 } },
        { name = "zoom_in", rval = nil, args = { }, location = { "./src/game.h", 486 } },
        { name = "zoom_out", rval = nil, args = { }, location = { "./src/game.h", 487 } },
    }
}
classes['encumbrance_data'] = {
    by_value = true,
    has_equal = true,
    attributes = {
        armor_encumbrance = { type = "int", writable = true },
        encumbrance = { type = "int", writable = true },
        layer_penalty = { type = "int", writable = true },
    },
}
classes['stats'] = {
    parents = {
        "JsonSerializer",
        "JsonDeserializer",
    },
    attributes = {
        damage_healed = { type = "int", writable = true },
        damage_taken = { type = "int", writable = true },
        headshots = { type = "int", writable = true },
        squares_walked = { type = "int", writable = true },
    },
    functions = {
        { name = "reset", rval = nil, args = { }, location = { "./src/player.h", 105 } },
    }
}
classes['player'] = {
    parents = {
        "Character",
        "JsonSerializer",
        "JsonDeserializer",
    },
    attributes = {
        blocks_left = { type = "int", writable = true },
        cash = { type = "int", writable = true },
        controlling_vehicle = { type = "bool", writable = true },
        dodges_left = { type = "int", writable = true },
        focus_pool = { type = "int", writable = true },
        grab_point = { type = "tripoint", writable = true },
        grab_type = { type = "object_type", writable = true },
        in_vehicle = { type = "bool", writable = true },
        keep_hands_free = { type = "bool", writable = true },
        last_batch = { type = "int", writable = true },
        last_climate_control_ret = { type = "bool", writable = true },
        lastconsumed = { type = "std::string", writable = true },
        lastrecipe = { type = "std::string", writable = true },
        ma_styles = { type = "std::vector<matype_id>", writable = true },
        max_power_level = { type = "int", writable = true },
        memorial_log = { type = "std::vector<std::string>", writable = true },
        move_mode = { type = "std::string", writable = true },
        movecounter = { type = "int", writable = true },
        next_climate_control_check = { type = "int", writable = true },
        oxygen = { type = "int", writable = true },
        power_level = { type = "int", writable = true },
        radiation = { type = "int", writable = true },
        reactor_plut = { type = "int", writable = true },
        recoil = { type = "float", writable = true },
        scent = { type = "int", writable = true },
        slow_rad = { type = "int", writable = true },
        stamina = { type = "int", writable = true },
        start_location = { type = "start_location_id", writable = true },
        stim = { type = "int", writable = true },
        style_selected = { type = "matype_id", writable = true },
        tank_plut = { type = "int", writable = true },
        view_offset = { type = "tripoint", writable = true },
        volume = { type = "int", writable = true },
    },
    functions = {
        { name = "action_taken", rval = nil, args = { }, comment = "Called after every action, invalidates player caches", location = { "./src/player.h", 225 } },
        { name = "activate_bionic", rval = "bool", args = { "int" }, comment = "Handles bionic activation effects of the entered bionic, returns if anything activated", location = { "./src/player.h", 310 } },
        { name = "activate_bionic", rval = "bool", args = { "int", "bool" }, comment = "Handles bionic activation effects of the entered bionic, returns if anything activated", location = { "./src/player.h", 310 } },
        { name = "active_light", rval = "float", args = { }, comment = "Returns player lumination based on the brightest active item they are carrying", location = { "./src/player.h", 326 } },
        { name = "add_addiction", rval = nil, args = { "add_type", "int" }, comment = "Adds an addiction to the player", location = { "./src/player.h", 762 } },
        { name = "add_bionic", rval = nil, args = { "std::string" }, comment = "Adds a bionic to my_bionics[]", location = { "./src/player.h", 299 } },
        { name = "add_known_trap", rval = nil, args = { "tripoint", "trap" }, location = { "./src/player.h", 1465 } },
        { name = "add_martialart", rval = nil, args = { "matype_id" }, comment = "Adds the entered martial art to the player's list", location = { "./src/player.h", 430 } },
        { name = "add_pain_msg", rval = nil, args = { "int", "body_part" }, location = { "./src/player.h", 725 } },
        { name = "addiction_level", rval = "int", args = { "add_type" }, comment = "Returns the intensity of the specified addiction", location = { "./src/player.h", 768 } },
        { name = "adjacent_tile", rval = "tripoint", args = { }, comment = "Returns an unoccupied, safe adjacent point. If none exists, returns player position.", location = { "./src/player.h", 676 } },
        { name = "adjust_for_focus", rval = "int", args = { "int" }, location = { "./src/player.h", 1134 } },
        { name = "amount_worn", rval = "int", args = { "std::string" }, comment = "Returns the amount of item `type' that is currently worn", location = { "./src/player.h", 1211 } },
        { name = "apply_persistent_morale", rval = nil, args = { }, comment = "Ensures persistent morale effects are up-to-date", location = { "./src/player.h", 229 } },
        { name = "apply_wetness_morale", rval = nil, args = { "int" }, comment = "Recalculates morale penalty/bonus from wetness based on mutations, equipment and temperature", location = { "./src/player.h", 786 } },
        { name = "armor_absorb", rval = "bool", args = { "damage_unit", "item" }, comment = "Reduces and mutates du, prints messages about armor taking damage.          * @return true if the armor was completely destroyed (and the item must be deleted).", location = { "./src/player.h", 579 } },
        { name = "attack_speed", rval = "int", args = { "item" }, comment = "Returns cost (in moves) of attacking with given item (no modifiers, like stuck)", location = { "./src/player.h", 613 } },
        { name = "best_shield", rval = "item&", args = { }, comment = "Returns the best item for blocking with", location = { "./src/player.h", 484 } },
        { name = "bionic_armor_bonus", rval = "float", args = { "body_part", "damage_type" }, comment = "Check for passive bionics that provide armor, and returns the armor bonus          * This is called from player::passive_absorb_hit", location = { "./src/player.h", 584 } },
        { name = "blossoms", rval = nil, args = { }, location = { "./src/player.h", 1479 } },
        { name = "bodytemp_color", rval = "int", args = { "int" }, comment = "Define color for displaying the body temperature", location = { "./src/player.h", 237 } },
        { name = "bonus_damage", rval = "float", args = { "bool" }, comment = "Returns the bonus bashing damage the player deals based on their stats", location = { "./src/player.h", 603 } },
        { name = "bonus_item_warmth", rval = "int", args = { "body_part" }, comment = "Returns warmth provided by an armor's bonus, like hoods, pockets, etc.", location = { "./src/player.h", 1096 } },
        { name = "burn_move_stamina", rval = nil, args = { "int" }, location = { "./src/player.h", 1452 } },
        { name = "calc_focus_equilibrium", rval = "int", args = { }, comment = "Uses morale and other factors to return the player's focus gain rate", location = { "./src/player.h", 233 } },
        { name = "can_arm_block", rval = "bool", args = { }, comment = "Returns true if the player has the arm block technique available", location = { "./src/player.h", 478 } },
        { name = "can_consume", rval = "bool", args = { "item" }, comment = "Check player's capability of consumption overall", location = { "./src/player.h", 901 } },
        { name = "can_decomp_learn", rval = "bool", args = { "recipe" }, location = { "./src/player.h", 1236 } },
        { name = "can_disassemble", rval = "bool", args = { "item", "inventory" }, comment = "Check if the player can disassemble an item using the current crafting inventory          * @param obj Object to to check for disassembly          * @param inv current crafting inventory          * @param err Error message in case of e.g. missing tools/charges.", location = { "./src/player.h", 1276 } },
        { name = "can_eat", rval = "edible_rating", args = { "item" }, location = { "./src/player.h", 801 } },
        { name = "can_eat", rval = "edible_rating", args = { "item", "bool" }, location = { "./src/player.h", 801 } },
        { name = "can_eat", rval = "edible_rating", args = { "item", "bool", "bool" }, location = { "./src/player.h", 801 } },
        { name = "can_hear", rval = "bool", args = { "tripoint", "int" }, location = { "./src/player.h", 1442 } },
        { name = "can_interface_armor", rval = "bool", args = { }, comment = "Check whether player has a bionic power armor interface.         * @return true if player has an active bionic capable of powering armor, false otherwise.", location = { "./src/player.h", 1192 } },
        { name = "can_leg_block", rval = "bool", args = { }, comment = "Returns true if the player has the leg block technique available", location = { "./src/player.h", 476 } },
        { name = "can_limb_block", rval = "bool", args = { }, comment = "Returns true if either can_leg_block() or can_arm_block() returns true", location = { "./src/player.h", 480 } },
        { name = "can_make", rval = "bool", args = { "recipe" }, location = { "./src/player.h", 1258 } },
        { name = "can_make", rval = "bool", args = { "recipe", "int" }, location = { "./src/player.h", 1258 } },
        { name = "can_melee", rval = "bool", args = { }, comment = "Returns true if the current martial art works with the player's current weapon", location = { "./src/player.h", 457 } },
        { name = "can_reload", rval = "bool", args = { "item" }, comment = "Whether a tool or gun is potentially reloadable (optionally considering a specific ammo)          * @param it Thing to be reloaded          * @param ammo if set also check item currently compatible with this specific ammo or magazine          * @note items currently loaded with a detachable magazine are considered reloadable          * @note items with integral magazines are reloadable if free capacity permits (+/- ammo matches)", location = { "./src/player.h", 918 } },
        { name = "can_reload", rval = "bool", args = { "item", "std::string" }, comment = "Whether a tool or gun is potentially reloadable (optionally considering a specific ammo)          * @param it Thing to be reloaded          * @param ammo if set also check item currently compatible with this specific ammo or magazine          * @note items currently loaded with a detachable magazine are considered reloadable          * @note items with integral magazines are reloadable if free capacity permits (+/- ammo matches)", location = { "./src/player.h", 918 } },
        { name = "can_sleep", rval = "bool", args = { }, comment = "Checked each turn during 'lying_down', returns true if the player falls asleep", location = { "./src/player.h", 1068 } },
        { name = "can_unwield", rval = "bool", args = { "item" }, comment = "Check player capable of unwielding an item.          * @param it Thing to be unwielded          * @param alert display reason for any failure", location = { "./src/player.h", 899 } },
        { name = "can_unwield", rval = "bool", args = { "item", "bool" }, comment = "Check player capable of unwielding an item.          * @param it Thing to be unwielded          * @param alert display reason for any failure", location = { "./src/player.h", 899 } },
        { name = "can_weapon_block", rval = "bool", args = { }, comment = "Returns true if the player has a weapon with a block technique", location = { "./src/player.h", 486 } },
        { name = "can_wear", rval = "bool", args = { "item" }, comment = "Check player capable of wearing an item.          * @param it Thing to be worn          * @param alert display reason for any failure", location = { "./src/player.h", 886 } },
        { name = "can_wear", rval = "bool", args = { "item", "bool" }, comment = "Check player capable of wearing an item.          * @param it Thing to be worn          * @param alert display reason for any failure", location = { "./src/player.h", 886 } },
        { name = "can_wield", rval = "bool", args = { "item" }, comment = "Check player capable of wielding an item.          * @param it Thing to be wielded          * @param alert display reason for any failure", location = { "./src/player.h", 893 } },
        { name = "can_wield", rval = "bool", args = { "item", "bool" }, comment = "Check player capable of wielding an item.          * @param it Thing to be wielded          * @param alert display reason for any failure", location = { "./src/player.h", 893 } },
        { name = "cancel_activity", rval = nil, args = { }, location = { "./src/player.h", 1143 } },
        { name = "change_side", rval = "bool", args = { "int" }, location = { "./src/player.h", 972 } },
        { name = "change_side", rval = "bool", args = { "int", "bool" }, location = { "./src/player.h", 972 } },
        { name = "change_side", rval = "bool", args = { "item" }, comment = "Swap side on which item is worn; returns false on fail. If interactive is false, don't alert player or drain moves", location = { "./src/player.h", 971 } },
        { name = "change_side", rval = "bool", args = { "item", "bool" }, comment = "Swap side on which item is worn; returns false on fail. If interactive is false, don't alert player or drain moves", location = { "./src/player.h", 971 } },
        { name = "charge_power", rval = nil, args = { "int" }, comment = "Adds the entered amount to the player's bionic power_level", location = { "./src/player.h", 305 } },
        { name = "check_and_recover_morale", rval = nil, args = { }, comment = "Checks permanent morale for consistency and recovers it when an inconsistency is found.", location = { "./src/player.h", 1152 } },
        { name = "check_eligible_containers_for_crafting", rval = "bool", args = { "recipe" }, location = { "./src/player.h", 1256 } },
        { name = "check_eligible_containers_for_crafting", rval = "bool", args = { "recipe", "int" }, location = { "./src/player.h", 1256 } },
        { name = "check_needs_extremes", rval = nil, args = { }, comment = "Kills the player if too hungry, stimmed up etc., forces tired player to sleep and prints warnings.", location = { "./src/player.h", 261 } },
        { name = "clairvoyance", rval = "int", args = { }, comment = "Returns the distance the player can see through walls", location = { "./src/player.h", 353 } },
        { name = "clear_destination", rval = nil, args = { }, location = { "./src/player.h", 1304 } },
        { name = "clear_miss_reasons", rval = nil, args = { }, comment = "Clears the list of reasons for why the player would miss a melee attack.", location = { "./src/player.h", 667 } },
        { name = "climbing_cost", rval = "int", args = { "tripoint", "tripoint" }, comment = "Checks both the neighborhoods of from and to for climbable surfaces,          * returns move cost of climbing from `from` to `to`.          * 0 means climbing is not possible.          * Return value can depend on the orientation of the terrain.", location = { "./src/player.h", 684 } },
        { name = "complete_craft", rval = nil, args = { }, location = { "./src/player.h", 1265 } },
        { name = "complete_disassemble", rval = nil, args = { "int", "tripoint", "bool", "recipe" }, location = { "./src/player.h", 1283 } },
        { name = "complete_disassemble", rval = nil, args = { }, location = { "./src/player.h", 1282 } },
        { name = "consume", rval = "bool", args = { "int" }, comment = "Used for eating object at pos, returns true if object is removed from inventory (last charge was consumed)", location = { "./src/player.h", 791 } },
        { name = "consume_charges", rval = "bool", args = { "item", "int" }, comment = "Consume charges of a tool or comestible item, potentially destroying it in the process          *  @param used item consuming the charges          *  @param qty number of charges to consume which must be non-zero          *  @return true if item was destroyed", location = { "./src/player.h", 1025 } },
        { name = "consume_effects", rval = nil, args = { "item" }, comment = "Handles the effects of consuming an item", location = { "./src/player.h", 853 } },
        { name = "consume_effects", rval = nil, args = { "item", "bool" }, comment = "Handles the effects of consuming an item", location = { "./src/player.h", 853 } },
        { name = "consume_item", rval = "bool", args = { "item" }, comment = "Used for eating a particular item that doesn't need to be in inventory.          *  Returns true if the item is to be removed (doesn't remove).", location = { "./src/player.h", 794 } },
        { name = "consume_items", rval = "std::list<item>", args = { "std::vector<item_comp>" }, location = { "./src/player.h", 1293 } },
        { name = "consume_items", rval = "std::list<item>", args = { "std::vector<item_comp>", "int" }, location = { "./src/player.h", 1293 } },
        { name = "consume_tools", rval = nil, args = { "std::vector<tool_comp>" }, location = { "./src/player.h", 1299 } },
        { name = "consume_tools", rval = nil, args = { "std::vector<tool_comp>", "int" }, location = { "./src/player.h", 1299 } },
        { name = "consume_tools", rval = nil, args = { "std::vector<tool_comp>", "int", "std::string" }, location = { "./src/player.h", 1299 } },
        { name = "cough", rval = nil, args = { "bool" }, location = { "./src/player.h", 723 } },
        { name = "cough", rval = nil, args = { "bool", "int" }, location = { "./src/player.h", 723 } },
        { name = "cough", rval = nil, args = { }, location = { "./src/player.h", 723 } },
        { name = "craft", rval = nil, args = { }, location = { "./src/player.h", 1260 } },
        { name = "crafting_inventory", rval = "inventory", args = { }, location = { "./src/player.h", 1287 } },
        { name = "create", rval = "bool", args = { "character_type" }, location = { "./src/player.h", 159 } },
        { name = "create", rval = "bool", args = { "character_type", "std::string" }, location = { "./src/player.h", 159 } },
        { name = "crit_chance", rval = "float", args = { "float", "float", "item" }, comment = "Returns the chance to crit given a hit roll and target's dodge roll", location = { "./src/player.h", 609 } },
        { name = "crossed_threshold", rval = "bool", args = { }, comment = "Returns true if the player has crossed a mutation threshold          *  Player can only cross one mutation threshold.", location = { "./src/player.h", 279 } },
        { name = "deactivate_bionic", rval = "bool", args = { "int" }, comment = "Handles bionic deactivation effects of the entered bionic, returns if anything deactivated", location = { "./src/player.h", 312 } },
        { name = "deactivate_bionic", rval = "bool", args = { "int", "bool" }, comment = "Handles bionic deactivation effects of the entered bionic, returns if anything deactivated", location = { "./src/player.h", 312 } },
        { name = "disarm", rval = nil, args = { "npc" }, comment = "Try to disarm the NPC. May result in fail attempt, you receiving the wepon and instantly wielding it,          * or the weapon falling down on the floor nearby. NPC is always getting angry with you.          * @param target Target NPC to disarm", location = { "./src/player.h", 1553 } },
        { name = "disassemble", rval = "bool", args = { "int" }, location = { "./src/player.h", 1279 } },
        { name = "disassemble", rval = "bool", args = { "item", "int", "bool" }, location = { "./src/player.h", 1280 } },
        { name = "disassemble", rval = "bool", args = { "item", "int", "bool", "bool" }, location = { "./src/player.h", 1280 } },
        { name = "disassemble", rval = "bool", args = { }, location = { "./src/player.h", 1278 } },
        { name = "disassemble_all", rval = nil, args = { "bool" }, location = { "./src/player.h", 1281 } },
        { name = "disp_info", rval = nil, args = { }, comment = "Handles and displays detailed character info for the '@' screen", location = { "./src/player.h", 210 } },
        { name = "disp_morale", rval = nil, args = { }, comment = "Provides the window and detailed morale data", location = { "./src/player.h", 212 } },
        { name = "do_read", rval = nil, args = { "item" }, comment = "Completes book reading action.", location = { "./src/player.h", 1060 } },
        { name = "drench", rval = nil, args = { "int", "int", "bool" }, comment = "Drenches the player with water, saturation is the percent gotten wet", location = { "./src/player.h", 782 } },
        { name = "drench_mut_calc", rval = nil, args = { }, comment = "Recalculates mutation drench protection for all bodyparts (ignored/good/neutral stats)", location = { "./src/player.h", 784 } },
        { name = "drink_from_hands", rval = "int", args = { "item" }, comment = "used for drinking from hands, returns how many charges were consumed", location = { "./src/player.h", 789 } },
        { name = "drop", rval = nil, args = { "int" }, comment = "Drops an item to the specified location", location = { "./src/player.h", 980 } },
        { name = "drop", rval = nil, args = { "int", "tripoint" }, comment = "Drops an item to the specified location", location = { "./src/player.h", 980 } },
        { name = "dump_memorial", rval = "std::string", args = { }, location = { "./src/player.h", 1417 } },
        { name = "eat", rval = "bool", args = { "item" }, comment = "Used for eating entered comestible, returns true if comestible is successfully eaten", location = { "./src/player.h", 800 } },
        { name = "eat", rval = "bool", args = { "item", "bool" }, comment = "Used for eating entered comestible, returns true if comestible is successfully eaten", location = { "./src/player.h", 800 } },
        { name = "environmental_revert_effect", rval = nil, args = { }, location = { "./src/player.h", 1437 } },
        { name = "exceeds_recipe_requirements", rval = "int", args = { "recipe" }, location = { "./src/player.h", 1234 } },
        { name = "fall_asleep", rval = nil, args = { "int" }, comment = "Adds 'sleep' to the player", location = { "./src/player.h", 1070 } },
        { name = "fine_detail_vision_mod", rval = "float", args = { }, comment = "Returns a value from 1.0 to 5.0 that acts as a multiplier          * for the time taken to perform tasks that require detail vision,          * above 4.0 means these activities cannot be performed.", location = { "./src/player.h", 1078 } },
        { name = "fire_gun", rval = "int", args = { "tripoint" }, comment = "Fires a gun or auxiliary gunmod (ignoring any current mode)          *  @param target where the first shot is aimed at (may vary for later shots)          *  @param shots maximum number of shots to fire (less may be fired in some circumstances)          *  @return number of shots actually fired", location = { "./src/player.h", 560 } },
        { name = "fire_gun", rval = "int", args = { "tripoint", "int" }, comment = "Fires a gun or auxiliary gunmod (ignoring any current mode)          *  @param target where the first shot is aimed at (may vary for later shots)          *  @param shots maximum number of shots to fire (less may be fired in some circumstances)          *  @return number of shots actually fired", location = { "./src/player.h", 560 } },
        { name = "fire_gun", rval = "int", args = { "tripoint", "int", "item" }, comment = "Fires a gun or auxiliary gunmod (ignoring any current mode)          *  @param target where the first shot is aimed at (may vary for later shots)          *  @param shots maximum number of shots to fire (less may be fired in some circumstances)          *  @param gun item to fire (which does not necessary have to be in the players possession)          *  @return number of shots actually fired", location = { "./src/player.h", 568 } },
        { name = "footwear_factor", rval = "float", args = { }, comment = "Returns 1 if the player is wearing something on both feet, .5 if on one, and 0 if on neither", location = { "./src/player.h", 1120 } },
        { name = "fun_to_read", rval = "bool", args = { "item" }, location = { "./src/player.h", 1056 } },
        { name = "getID", rval = "int", args = { }, location = { "./src/player.h", 1430 } },
        { name = "get_active_mission_target", rval = "tripoint", args = { }, comment = "Returns the target of the active mission or @ref overmap::invalid_tripoint if there is          * no active mission.", location = { "./src/player.h", 1492 } },
        { name = "get_all_techniques", rval = "std::vector<matec_id>", args = { }, location = { "./src/player.h", 633 } },
        { name = "get_armor_acid", rval = "int", args = { "body_part" }, comment = "Returns overall acid resistance for the body part", location = { "./src/player.h", 1108 } },
        { name = "get_armor_fire", rval = "int", args = { "body_part" }, comment = "Returns overall fire resistance for the body part", location = { "./src/player.h", 1110 } },
        { name = "get_auto_move_route", rval = "std::vector<tripoint>", args = { }, location = { "./src/player.h", 1306 } },
        { name = "get_book_reader", rval = "player&", args = { "item", "std::vector<std::string>" }, comment = "Helper function for player::read.          *          * @param book Book to read          * @param reasons Starting with g->u, for each player/NPC who cannot read, a message will be pushed back here.          * @returns nullptr, if neither the player nor his followers can read to the player, otherwise the player/NPC          * who can read and can read the fastest", location = { "./src/player.h", 1046 } },
        { name = "get_category_dream", rval = "std::string", args = { "std::string", "int" }, comment = "Returns a dream's description selected randomly from the player's highest mutation category", location = { "./src/player.h", 291 } },
        { name = "get_combat_style", rval = "martialart&", args = { }, location = { "./src/player.h", 1194 } },
        { name = "get_free_bionics_slots", rval = "int", args = { "body_part" }, location = { "./src/player.h", 1413 } },
        { name = "get_highest_category", rval = "std::string", args = { }, comment = "Returns the highest mutation category", location = { "./src/player.h", 289 } },
        { name = "get_hit_weapon", rval = "float", args = { "item" }, comment = "Gets melee accuracy component from weapon+skills", location = { "./src/player.h", 615 } },
        { name = "get_morale_level", rval = "int", args = { }, location = { "./src/player.h", 1145 } },
        { name = "get_overlay_ids", rval = "std::vector<std::string>", args = { }, comment = "Returns a list of the IDs of overlays on this character,          * sorted from 'lowest' to 'highest'.          *          * Only required for rendering.", location = { "./src/player.h", 1476 } },
        { name = "get_painkiller", rval = "int", args = { }, comment = "Returns intensity of painkillers", location = { "./src/player.h", 732 } },
        { name = "get_sick", rval = nil, args = { }, comment = "Handles the chance to be infected by random diseases", location = { "./src/player.h", 755 } },
        { name = "get_stamina_max", rval = "int", args = { }, location = { "./src/player.h", 1451 } },
        { name = "get_total_bionics_slots", rval = "int", args = { "body_part" }, location = { "./src/player.h", 1412 } },
        { name = "get_used_bionics_slots", rval = "int", args = { "body_part" }, location = { "./src/player.h", 1411 } },
        { name = "get_weapon_dispersion", rval = "float", args = { "item", "float" }, comment = "Returns a weapon's modified dispersion value.          * @param obj Weapon to check dispersion on          * @param range Distance to target against which we're calculating the dispersion", location = { "./src/player.h", 511 } },
        { name = "get_wind_resistance", rval = "int", args = { "body_part" }, comment = "Returns wind resistance provided by armor, etc", location = { "./src/player.h", 1126 } },
        { name = "global_omt_location", rval = "tripoint", args = { }, comment = "Returns the location of the player in global overmap terrain coordinates.", location = { "./src/player.h", 1322 } },
        { name = "global_sm_location", rval = "tripoint", args = { }, comment = "Returns the location of the player in global submap coordinates.", location = { "./src/player.h", 1318 } },
        { name = "global_square_location", rval = "tripoint", args = { }, comment = "Global position, expressed in map square coordinate system          * (the most detailed coordinate system), used by the @ref map.", location = { "./src/player.h", 1314 } },
        { name = "gun_current_range", rval = "float", args = { "item" }, comment = "Calculate range at which given chance of hit considering player stats, clothing and recoil          *  @param gun ranged weapon which must have sufficient ammo for at least one shot          *  @param penalty if set (non-negative) use this value instead of @ref recoil_total()          *  @param chance probability of hit, range [0-100) with zero returning absolute maximum range          *  @param accuracy minimum accuracy required", location = { "./src/player.h", 529 } },
        { name = "gun_current_range", rval = "float", args = { "item", "float" }, comment = "Calculate range at which given chance of hit considering player stats, clothing and recoil          *  @param gun ranged weapon which must have sufficient ammo for at least one shot          *  @param penalty if set (non-negative) use this value instead of @ref recoil_total()          *  @param chance probability of hit, range [0-100) with zero returning absolute maximum range          *  @param accuracy minimum accuracy required", location = { "./src/player.h", 529 } },
        { name = "gun_current_range", rval = "float", args = { "item", "float", "int" }, comment = "Calculate range at which given chance of hit considering player stats, clothing and recoil          *  @param gun ranged weapon which must have sufficient ammo for at least one shot          *  @param penalty if set (non-negative) use this value instead of @ref recoil_total()          *  @param chance probability of hit, range [0-100) with zero returning absolute maximum range          *  @param accuracy minimum accuracy required", location = { "./src/player.h", 529 } },
        { name = "gun_current_range", rval = "float", args = { "item", "float", "int", "float" }, comment = "Calculate range at which given chance of hit considering player stats, clothing and recoil          *  @param gun ranged weapon which must have sufficient ammo for at least one shot          *  @param penalty if set (non-negative) use this value instead of @ref recoil_total()          *  @param chance probability of hit, range [0-100) with zero returning absolute maximum range          *  @param accuracy minimum accuracy required", location = { "./src/player.h", 529 } },
        { name = "gun_engagement_moves", rval = "int", args = { "item" }, comment = "How many moves does it take to aim gun to maximum accuracy?", location = { "./src/player.h", 551 } },
        { name = "gun_value", rval = "float", args = { "item" }, location = { "./src/player.h", 618 } },
        { name = "gun_value", rval = "float", args = { "item", "int" }, location = { "./src/player.h", 618 } },
        { name = "gunmod_add", rval = nil, args = { "item", "item" }, comment = "Starts activity to install gunmod having warned user about any risk of failure or irremovable mods s", location = { "./src/player.h", 1031 } },
        { name = "gunmod_remove", rval = "bool", args = { "item", "item" }, comment = "Removes gunmod after first unloading any contained ammo and returns true on success", location = { "./src/player.h", 1028 } },
        { name = "handle_gun_damage", rval = "bool", args = { "item" }, comment = "Returns true if a gun misfires, jams, or has other problems, else returns false", location = { "./src/player.h", 514 } },
        { name = "handle_melee_wear", rval = "bool", args = { "float" }, comment = "Calculates melee weapon wear-and-tear through use, returns true if item is destroyed.", location = { "./src/player.h", 361 } },
        { name = "handle_melee_wear", rval = "bool", args = { "item" }, location = { "./src/player.h", 362 } },
        { name = "handle_melee_wear", rval = "bool", args = { "item", "float" }, location = { "./src/player.h", 362 } },
        { name = "handle_melee_wear", rval = "bool", args = { }, comment = "Calculates melee weapon wear-and-tear through use, returns true if item is destroyed.", location = { "./src/player.h", 361 } },
        { name = "hardcoded_effects", rval = nil, args = { "effect" }, comment = "Handles the still hard-coded effects.", location = { "./src/player.h", 182 } },
        { name = "has_active_optcloak", rval = "bool", args = { }, comment = "Returns true if the player is wearing an active optical cloak", location = { "./src/player.h", 297 } },
        { name = "has_addiction", rval = "bool", args = { "add_type" }, comment = "Returns true if the player has an addiction of the specified type", location = { "./src/player.h", 766 } },
        { name = "has_alarm_clock", rval = "bool", args = { }, comment = "Returns true if the player or their vehicle has an alarm clock", location = { "./src/player.h", 369 } },
        { name = "has_charges", rval = "bool", args = { "std::string", "int" }, location = { "./src/player.h", 1209 } },
        { name = "has_child_flag", rval = "bool", args = { "std::string" }, comment = "Returns true if the player has the entered mutation child flag", location = { "./src/player.h", 339 } },
        { name = "has_conflicting_trait", rval = "bool", args = { "std::string" }, comment = "Returns true if the player has a conflicting trait to the entered trait          *  Uses has_opposite_trait(), has_lower_trait(), and has_higher_trait() to determine conflicts.", location = { "./src/player.h", 269 } },
        { name = "has_destination", rval = "bool", args = { }, location = { "./src/player.h", 1305 } },
        { name = "has_enough_charges", rval = "bool", args = { "item", "bool" }, comment = "Has the item enough charges to invoke its use function?          * Also checks if UPS from this player is used instead of item charges.", location = { "./src/player.h", 1543 } },
        { name = "has_higher_trait", rval = "bool", args = { "std::string" }, comment = "Returns true if the player has a trait which is an upgrade of the entered trait", location = { "./src/player.h", 275 } },
        { name = "has_identified", rval = "bool", args = { "std::string" }, comment = "Note that we've read a book at least once.", location = { "./src/player.h", 1062 } },
        { name = "has_item_with_flag", rval = "bool", args = { "std::string" }, location = { "./src/player.h", 1216 } },
        { name = "has_lower_trait", rval = "bool", args = { "std::string" }, comment = "Returns true if the player has a trait which upgrades into the entered trait", location = { "./src/player.h", 273 } },
        { name = "has_mabuff", rval = "bool", args = { "mabuff_id" }, comment = "Returns true if the player has any martial arts buffs attached", location = { "./src/player.h", 426 } },
        { name = "has_martialart", rval = "bool", args = { "matype_id" }, comment = "Returns true if the player has access to the entered martial art", location = { "./src/player.h", 428 } },
        { name = "has_miss_recovery_tec", rval = "bool", args = { }, comment = "Returns true if the player has technique-based miss recovery", location = { "./src/player.h", 472 } },
        { name = "has_mission_item", rval = "bool", args = { "int" }, location = { "./src/player.h", 1218 } },
        { name = "has_morale_to_craft", rval = "bool", args = { }, location = { "./src/player.h", 1257 } },
        { name = "has_morale_to_read", rval = "bool", args = { }, location = { "./src/player.h", 1150 } },
        { name = "has_opposite_trait", rval = "bool", args = { "std::string" }, comment = "Returns true if the player has a trait which cancels the entered trait", location = { "./src/player.h", 271 } },
        { name = "has_recipe_requirements", rval = "bool", args = { "recipe" }, location = { "./src/player.h", 1235 } },
        { name = "has_technique", rval = "bool", args = { "matec_id" }, comment = "Returns true if the player has a weapon or martial arts skill available with the entered technique", location = { "./src/player.h", 636 } },
        { name = "has_two_arms", rval = "bool", args = { }, comment = "Returns true if the player has two functioning arms", location = { "./src/player.h", 357 } },
        { name = "has_watch", rval = "bool", args = { }, comment = "Returns true if the player or their vehicle has a watch", location = { "./src/player.h", 371 } },
        { name = "heal", rval = nil, args = { "body_part", "int" }, comment = "Heals a body_part for dam", location = { "./src/player.h", 734 } },
        { name = "heal", rval = nil, args = { "hp_part", "int" }, comment = "Heals an hp_part for dam", location = { "./src/player.h", 736 } },
        { name = "healall", rval = nil, args = { "int" }, comment = "Heals all body parts for dam", location = { "./src/player.h", 738 } },
        { name = "hearing_ability", rval = "float", args = { }, location = { "./src/player.h", 1444 } },
        { name = "hitall", rval = "int", args = { "int", "int", "Creature" }, comment = "Harms all body parts for dam, with armor reduction. If vary > 0 damage to parts are random within vary % (1-100)", location = { "./src/player.h", 742 } },
        { name = "hunger_speed_penalty", static = true, rval = "int", args = { "int" }, comment = "Returns the penalty to speed from hunger", location = { "./src/player.h", 1130 } },
        { name = "hurtall", rval = nil, args = { "int", "Creature" }, comment = "Hurts all body parts for dam, no armor reduction", location = { "./src/player.h", 740 } },
        { name = "hurtall", rval = nil, args = { "int", "Creature", "bool" }, comment = "Hurts all body parts for dam, no armor reduction", location = { "./src/player.h", 740 } },
        { name = "immune_to", rval = "bool", args = { "body_part", "damage_unit" }, comment = "Check if a given body part is immune to a given damage type          *          * This function checks whether a given body part cannot be damaged by a given          * damage_unit.  Note that this refers only to reduction of hp on that part. It          * does not account for clothing damage, pain, status effects, etc.          *          * @param bp: Body part to perform the check on          * @param dam: Type of damage to check for          * @returns true if given damage can not reduce hp of given body part", location = { "./src/player.h", 711 } },
        { name = "in_climate_control", rval = "bool", args = { }, comment = "Returns true if the player is in a climate controlled area or armor", location = { "./src/player.h", 294 } },
        { name = "install_bionics", rval = "bool", args = { "itype" }, comment = "Attempts to install bionics, returns false if the player cancels prior to installation", location = { "./src/player.h", 1037 } },
        { name = "install_bionics", rval = "bool", args = { "itype", "int" }, comment = "Attempts to install bionics, returns false if the player cancels prior to installation", location = { "./src/player.h", 1037 } },
        { name = "intimidation", rval = "int", args = { }, comment = "Returns a value used when attempting to intimidate NPC's", location = { "./src/player.h", 698 } },
        { name = "invalidate_crafting_inventory", rval = nil, args = { }, location = { "./src/player.h", 1288 } },
        { name = "invlet_to_position", rval = "int", args = { "int" }, comment = "Return the item position of the item with given invlet, return INT_MIN if          * the player does not have such an item with that invlet. Don't use this on npcs.          * Only use the invlet in the user interface, otherwise always use the item position.", location = { "./src/player.h", 1186 } },
        { name = "invoke_item", rval = "bool", args = { "item" }, comment = "As above two, but with position equal to current position", location = { "./src/player.h", 1016 } },
        { name = "invoke_item", rval = "bool", args = { "item", "std::string" }, location = { "./src/player.h", 1017 } },
        { name = "invoke_item", rval = "bool", args = { "item", "std::string", "tripoint" }, comment = "As above, but with a pre-selected method. Debugmsg if this item doesn't have this method.", location = { "./src/player.h", 1014 } },
        { name = "invoke_item", rval = "bool", args = { "item", "tripoint" }, comment = "Asks how to use the item (if it has more than one use_method) and uses it.          * Returns true if it destroys the item. Consumes charges from the item.          * Multi-use items are ONLY supported when all use_methods are iuse_actor!", location = { "./src/player.h", 1012 } },
        { name = "is_allergic", rval = "bool", args = { "item" }, comment = "This block is to be moved to character.h", location = { "./src/player.h", 796 } },
        { name = "is_armed", rval = "bool", args = { }, comment = "Returns true if the player is wielding something", location = { "./src/player.h", 359 } },
        { name = "is_deaf", rval = "bool", args = { }, location = { "./src/player.h", 1440 } },
        { name = "is_hibernating", rval = "bool", args = { }, comment = "Returns if the player has hibernation mutation and is asleep and well fed", location = { "./src/player.h", 264 } },
        { name = "is_invisible", rval = "bool", args = { }, location = { "./src/player.h", 1439 } },
        { name = "is_quiet", rval = "bool", args = { }, comment = "Returns true if the player has quiet melee attacks", location = { "./src/player.h", 455 } },
        { name = "is_snuggling", rval = "std::string", args = { }, comment = "Checks to see if the player is using floor items to keep warm, and return the name of one such item if so", location = { "./src/player.h", 1074 } },
        { name = "is_throw_immune", rval = "bool", args = { }, comment = "Returns true if the player is immune to throws", location = { "./src/player.h", 451 } },
        { name = "is_wearing_power_armor", rval = "bool", args = { }, comment = "Returns true if the player is wearing power armor", location = { "./src/player.h", 1124 } },
        { name = "is_wearing_shoes", rval = "bool", args = { "std::string" }, comment = "Returns true if the player is wearing something on their feet that is not SKINTIGHT", location = { "./src/player.h", 1118 } },
        { name = "is_wearing_shoes", rval = "bool", args = { }, comment = "Returns true if the player is wearing something on their feet that is not SKINTIGHT", location = { "./src/player.h", 1118 } },
        { name = "item_handling_cost", rval = "int", args = { "item" }, comment = "Calculate (but do not deduct) the number of moves required when handling (eg. storing, drawing etc.) an item          * @param it Item to calculate handling cost for          * @param penalties Whether item volume and temporary effects (eg. GRABBED, DOWNED) should be considered.          * @param base_cost Cost due to storage type.          * @return cost in moves ranging from 0 to MAX_HANDLING_COST", location = { "./src/player.h", 942 } },
        { name = "item_handling_cost", rval = "int", args = { "item", "bool" }, comment = "Calculate (but do not deduct) the number of moves required when handling (eg. storing, drawing etc.) an item          * @param it Item to calculate handling cost for          * @param penalties Whether item volume and temporary effects (eg. GRABBED, DOWNED) should be considered.          * @param base_cost Cost due to storage type.          * @return cost in moves ranging from 0 to MAX_HANDLING_COST", location = { "./src/player.h", 942 } },
        { name = "item_handling_cost", rval = "int", args = { "item", "bool", "int" }, comment = "Calculate (but do not deduct) the number of moves required when handling (eg. storing, drawing etc.) an item          * @param it Item to calculate handling cost for          * @param penalties Whether item volume and temporary effects (eg. GRABBED, DOWNED) should be considered.          * @param base_cost Cost due to storage type.          * @return cost in moves ranging from 0 to MAX_HANDLING_COST", location = { "./src/player.h", 942 } },
        { name = "item_reload_cost", rval = "int", args = { "item", "item", "int" }, comment = "Calculate (but do not deduct) the number of moves required to reload an item with specified quantity of ammo          * @param it Item to calculate reload cost for          * @param ammo either ammo or magazine to use when reloading the item          * @param qty maximum units of ammo to reload. Capped by remaining capacity and ignored if reloading using a magazine.", location = { "./src/player.h", 961 } },
        { name = "item_store_cost", rval = "int", args = { "item", "item" }, comment = "Calculate (but do not deduct) the number of moves required when storing an item in a container          * @param it Item to calculate storage cost for          * @param container Container to store item in          * @param penalties Whether item volume and temporary effects (eg. GRABBED, DOWNED) should be considered.          * @param base_cost Cost due to storage type.          * @return cost in moves ranging from 0 to MAX_HANDLING_COST", location = { "./src/player.h", 952 } },
        { name = "item_store_cost", rval = "int", args = { "item", "item", "bool" }, comment = "Calculate (but do not deduct) the number of moves required when storing an item in a container          * @param it Item to calculate storage cost for          * @param container Container to store item in          * @param penalties Whether item volume and temporary effects (eg. GRABBED, DOWNED) should be considered.          * @param base_cost Cost due to storage type.          * @return cost in moves ranging from 0 to MAX_HANDLING_COST", location = { "./src/player.h", 952 } },
        { name = "item_store_cost", rval = "int", args = { "item", "item", "bool", "int" }, comment = "Calculate (but do not deduct) the number of moves required when storing an item in a container          * @param it Item to calculate storage cost for          * @param container Container to store item in          * @param penalties Whether item volume and temporary effects (eg. GRABBED, DOWNED) should be considered.          * @param base_cost Cost due to storage type.          * @return cost in moves ranging from 0 to MAX_HANDLING_COST", location = { "./src/player.h", 952 } },
        { name = "item_wear_cost", rval = "int", args = { "item" }, comment = "Calculate (but do not deduct) the number of moves required to wear an item", location = { "./src/player.h", 964 } },
        { name = "knows_recipe", rval = "bool", args = { "recipe" }, location = { "./src/player.h", 1232 } },
        { name = "knows_trap", rval = "bool", args = { "tripoint" }, location = { "./src/player.h", 1464 } },
        { name = "leak_level", rval = "int", args = { "std::string" }, location = { "./src/player.h", 1213 } },
        { name = "learn_recipe", rval = nil, args = { "recipe" }, location = { "./src/player.h", 1233 } },
        { name = "lifetime_stats", rval = "stats&", args = { }, location = { "./src/player.h", 1426 } },
        { name = "lighting_craft_speed_multiplier", rval = "float", args = { "recipe" }, location = { "./src/player.h", 1253 } },
        { name = "load_info", rval = nil, args = { "std::string" }, comment = "Deserializes string data when loading files", location = { "./src/player.h", 193 } },
        { name = "load_template", rval = "bool", args = { "std::string" }, location = { "./src/player.h", 161 } },
        { name = "long_craft", rval = nil, args = { }, location = { "./src/player.h", 1262 } },
        { name = "ma_onattack_effects", rval = nil, args = { }, comment = "Fires all attack-triggered martial arts events", location = { "./src/player.h", 417 } },
        { name = "ma_onblock_effects", rval = nil, args = { }, comment = "Fires all block-triggered martial arts events", location = { "./src/player.h", 421 } },
        { name = "ma_ondodge_effects", rval = nil, args = { }, comment = "Fires all dodge-triggered martial arts events", location = { "./src/player.h", 419 } },
        { name = "ma_ongethit_effects", rval = nil, args = { }, comment = "Fires all get hit-triggered martial arts events", location = { "./src/player.h", 423 } },
        { name = "ma_onhit_effects", rval = nil, args = { }, comment = "Fires all hit-triggered martial arts events", location = { "./src/player.h", 415 } },
        { name = "ma_onmove_effects", rval = nil, args = { }, comment = "Fires all move-triggered martial arts events", location = { "./src/player.h", 413 } },
        { name = "ma_static_effects", rval = nil, args = { }, comment = "Fires all non-triggered martial arts events", location = { "./src/player.h", 411 } },
        { name = "mabuff_armor_bonus", rval = "int", args = { "damage_type" }, comment = "Returns the armor bonus against given type from martial arts buffs", location = { "./src/player.h", 441 } },
        { name = "mabuff_attack_cost_mult", rval = "float", args = { }, comment = "Returns the multiplier on move cost of attacks.", location = { "./src/player.h", 449 } },
        { name = "mabuff_attack_cost_penalty", rval = "int", args = { }, comment = "Returns the flat penalty to move cost of attacks. If negative, that's a bonus. Applied after multiplier.", location = { "./src/player.h", 447 } },
        { name = "mabuff_block_bonus", rval = "int", args = { }, comment = "Returns the block bonus from martial arts buffs", location = { "./src/player.h", 437 } },
        { name = "mabuff_damage_bonus", rval = "int", args = { "damage_type" }, comment = "Returns the flat damage bonus to given type from martial arts buffs, applied after the multiplier", location = { "./src/player.h", 445 } },
        { name = "mabuff_damage_mult", rval = "float", args = { "damage_type" }, comment = "Returns the damage multiplier to given type from martial arts buffs", location = { "./src/player.h", 443 } },
        { name = "mabuff_dodge_bonus", rval = "float", args = { }, comment = "Returns the dodge bonus from martial arts buffs", location = { "./src/player.h", 435 } },
        { name = "mabuff_speed_bonus", rval = "int", args = { }, comment = "Returns the speed bonus from martial arts buffs", location = { "./src/player.h", 439 } },
        { name = "mabuff_tohit_bonus", rval = "float", args = { }, comment = "Returns the to hit bonus from martial arts buffs", location = { "./src/player.h", 433 } },
        { name = "make_all_craft", rval = nil, args = { "std::string", "int" }, location = { "./src/player.h", 1264 } },
        { name = "make_craft", rval = nil, args = { "std::string", "int" }, location = { "./src/player.h", 1263 } },
        { name = "make_craft_with_command", rval = nil, args = { "std::string", "int" }, location = { "./src/player.h", 1404 } },
        { name = "make_craft_with_command", rval = nil, args = { "std::string", "int", "bool" }, location = { "./src/player.h", 1404 } },
        { name = "making_would_work", rval = "bool", args = { "std::string", "int" }, location = { "./src/player.h", 1259 } },
        { name = "melee_special_effects", rval = "std::string", args = { "Creature", "damage_instance", "ma_technique" }, comment = "Handles combat effects, returns a string of any valid combat effect messages", location = { "./src/player.h", 647 } },
        { name = "melee_value", rval = "float", args = { "item" }, location = { "./src/player.h", 619 } },
        { name = "mend", rval = nil, args = { "int" }, comment = "Handles the chance for broken limbs to spontaneously heal to 1 HP", location = { "./src/player.h", 777 } },
        { name = "metabolic_rate", rval = "float", args = { }, comment = "Current metabolic rate due to traits, hunger, speed, etc.", location = { "./src/player.h", 851 } },
        { name = "metabolic_rate_base", rval = "float", args = { }, comment = "Stable base metabolic rate due to traits", location = { "./src/player.h", 849 } },
        { name = "mod_painkiller", rval = nil, args = { "int" }, comment = "Modifies intensity of painkillers", location = { "./src/player.h", 728 } },
        { name = "mutate", rval = nil, args = { }, comment = "Picks a random valid mutation and gives it to the player, possibly removing/changing others along the way", location = { "./src/player.h", 331 } },
        { name = "mutate_category", rval = nil, args = { "std::string" }, comment = "Picks a random valid mutation in a category and mutate_towards() it", location = { "./src/player.h", 333 } },
        { name = "mutate_towards", rval = "bool", args = { "std::string" }, comment = "Mutates toward the entered mutation, upgrading or removing conflicts if necessary", location = { "./src/player.h", 335 } },
        { name = "mutation_ok", rval = "bool", args = { "std::string", "bool", "bool" }, comment = "Returns true if the player doesn't have the mutation or a conflicting one and it complies with the force typing", location = { "./src/player.h", 329 } },
        { name = "natural_attack_restricted_on", rval = "bool", args = { "body_part" }, comment = "Returns true if the player is wearing something on the entered body_part, ignoring items with the ALLOWS_NATURAL_ATTACKS flag", location = { "./src/player.h", 1116 } },
        { name = "num_bionics", rval = "int", args = { }, comment = "Returns the size of my_bionics[]", location = { "./src/player.h", 318 } },
        { name = "nutrition_for", rval = "int", args = { "itype" }, comment = "Handles the nutrition value for a comestible", location = { "./src/player.h", 808 } },
        { name = "on_hurt", rval = nil, args = { "Creature" }, comment = "Handles effects that happen when the player is damaged and aware of the fact.", location = { "./src/player.h", 600 } },
        { name = "on_hurt", rval = nil, args = { "Creature", "bool" }, comment = "Handles effects that happen when the player is damaged and aware of the fact.", location = { "./src/player.h", 600 } },
        { name = "overmap_los", rval = "bool", args = { "tripoint", "int" }, comment = "Returns true if overmap tile is within player line-of-sight", location = { "./src/player.h", 349 } },
        { name = "overmap_sight_range", rval = "int", args = { "int" }, comment = "Returns the distance the player can see on the overmap", location = { "./src/player.h", 351 } },
        { name = "passive_absorb_hit", rval = nil, args = { "body_part", "damage_unit" }, comment = "Check for relevant passive, non-clothing that can absorb damage, and reduce by specified          * damage unit.  Only flat bonuses are checked here.  Multiplicative ones are checked in          * @ref player::absorb_hit.  The damage amount will never be reduced to less than 0.          * This is called from @ref player::absorb_hit", location = { "./src/player.h", 591 } },
        { name = "pause", rval = nil, args = { }, location = { "./src/player.h", 405 } },
        { name = "perform_special_attacks", rval = nil, args = { "Creature" }, comment = "Performs special attacks and their effects (poisonous, stinger, etc.)", location = { "./src/player.h", 642 } },
        { name = "pick_style", rval = "bool", args = { }, comment = "Creates the UI and handles player input for picking martial arts styles", location = { "./src/player.h", 910 } },
        { name = "pick_technique", rval = "matec_id", args = { "Creature", "bool", "bool", "bool" }, comment = "Returns a random valid technique", location = { "./src/player.h", 638 } },
        { name = "pick_usb", rval = "item&", args = { }, location = { "./src/player.h", 1197 } },
        { name = "place_corpse", rval = nil, args = { }, location = { "./src/player.h", 1196 } },
        { name = "power_bionics", rval = nil, args = { }, comment = "Generates and handles the UI for player interaction with installed bionics", location = { "./src/player.h", 307 } },
        { name = "power_mutations", rval = nil, args = { }, location = { "./src/player.h", 308 } },
        { name = "practice", rval = nil, args = { "skill_id", "int" }, location = { "./src/player.h", 1135 } },
        { name = "practice", rval = nil, args = { "skill_id", "int", "int" }, location = { "./src/player.h", 1135 } },
        { name = "print_health", rval = nil, args = { }, location = { "./src/player.h", 1535 } },
        { name = "process_active_items", rval = nil, args = { }, location = { "./src/player.h", 1165 } },
        { name = "process_bionic", rval = nil, args = { "int" }, comment = "Handles bionic effects over time of the entered bionic", location = { "./src/player.h", 314 } },
        { name = "purifiable", rval = "bool", args = { "std::string" }, comment = "Returns true if the entered trait may be purified away          *  Defaults to true", location = { "./src/player.h", 283 } },
        { name = "rate_action_change_side", rval = "hint_rating", args = { "item" }, location = { "./src/player.h", 1084 } },
        { name = "rate_action_disassemble", rval = "hint_rating", args = { "item" }, location = { "./src/player.h", 1091 } },
        { name = "rate_action_eat", rval = "hint_rating", args = { "item" }, location = { "./src/player.h", 1085 } },
        { name = "rate_action_mend", rval = "hint_rating", args = { "item" }, location = { "./src/player.h", 1090 } },
        { name = "rate_action_read", rval = "hint_rating", args = { "item" }, location = { "./src/player.h", 1086 } },
        { name = "rate_action_reload", rval = "hint_rating", args = { "item" }, location = { "./src/player.h", 1088 } },
        { name = "rate_action_takeoff", rval = "hint_rating", args = { "item" }, location = { "./src/player.h", 1087 } },
        { name = "rate_action_unload", rval = "hint_rating", args = { "item" }, location = { "./src/player.h", 1089 } },
        { name = "rate_action_use", rval = "hint_rating", args = { "item" }, comment = "Used to determine player feedback on item use for the inventory code.          *  rates usability lower for non-tools (books, etc.)", location = { "./src/player.h", 1082 } },
        { name = "rate_action_wear", rval = "hint_rating", args = { "item" }, location = { "./src/player.h", 1083 } },
        { name = "reach_attack", rval = nil, args = { "tripoint" }, comment = "Handles reach melee attacks", location = { "./src/player.h", 571 } },
        { name = "read", rval = "bool", args = { "int" }, comment = "Handles reading effects and returns true if activity started", location = { "./src/player.h", 1058 } },
        { name = "read", rval = "bool", args = { "int", "bool" }, comment = "Handles reading effects and returns true if activity started", location = { "./src/player.h", 1058 } },
        { name = "read_speed", rval = "int", args = { "bool" }, comment = "Returns the player's reading speed", location = { "./src/player.h", 692 } },
        { name = "read_speed", rval = "int", args = { }, comment = "Returns the player's reading speed", location = { "./src/player.h", 692 } },
        { name = "reassign_item", rval = nil, args = { "item", "int" }, comment = "Reassign letter.", location = { "./src/player.h", 1019 } },
        { name = "recalc_speed_bonus", rval = nil, args = { }, comment = "Calculates the various speed bonuses we will get from mutations, etc.", location = { "./src/player.h", 223 } },
        { name = "recoil_total", rval = "float", args = { }, comment = "Current total maximum recoil penalty from all sources", location = { "./src/player.h", 520 } },
        { name = "recoil_vehicle", rval = "float", args = { }, comment = "Get maximum recoil penalty due to vehicle motion", location = { "./src/player.h", 517 } },
        { name = "recraft", rval = nil, args = { }, location = { "./src/player.h", 1261 } },
        { name = "reduce_charges", rval = "item", args = { "int", "int" }, comment = "Remove charges from a specific item (given by its item position).          * The item must exist and it must be counted by charges.          * @param position Item position of the item.          * @param quantity The number of charges to remove, must not be larger than          * the current charges of the item.          * @return An item that contains the removed charges, it's effectively a          * copy of the item with the proper charges.", location = { "./src/player.h", 1175 } },
        { name = "reduce_charges", rval = "item", args = { "item", "int" }, comment = "Remove charges from a specific item (given by a pointer to it).          * Otherwise identical to @ref reduce_charges(int,long)          * @param it A pointer to the item, it *must* exist.          * @param quantity How many charges to remove", location = { "./src/player.h", 1182 } },
        { name = "regen", rval = nil, args = { "int" }, comment = "Handles passive regeneration of pain and maybe hp.", location = { "./src/player.h", 257 } },
        { name = "rem_addiction", rval = nil, args = { "add_type" }, comment = "Removes an addition from the player", location = { "./src/player.h", 764 } },
        { name = "remove_bionic", rval = nil, args = { "std::string" }, comment = "Removes a bionic from my_bionics[]", location = { "./src/player.h", 301 } },
        { name = "remove_child_flag", rval = nil, args = { "std::string" }, comment = "Removes the mutation's child flag from the player's list", location = { "./src/player.h", 341 } },
        { name = "remove_mutation", rval = nil, args = { "std::string" }, comment = "Removes a mutation, downgrading to the previous level if possible", location = { "./src/player.h", 337 } },
        { name = "remove_random_bionic", rval = "bool", args = { }, comment = "Randomly removes a bionic from my_bionics[]", location = { "./src/player.h", 316 } },
        { name = "roll_all_damage", rval = nil, args = { "bool", "damage_instance" }, comment = "Adds all 3 types of physical damage to instance", location = { "./src/player.h", 624 } },
        { name = "roll_all_damage", rval = nil, args = { "bool", "damage_instance", "bool", "item" }, location = { "./src/player.h", 625 } },
        { name = "roll_bash_damage", rval = nil, args = { "bool", "damage_instance", "bool", "item" }, comment = "Adds player's total bash damage to the damage instance", location = { "./src/player.h", 627 } },
        { name = "roll_cut_damage", rval = nil, args = { "bool", "damage_instance", "bool", "item" }, comment = "Adds player's total cut damage to the damage instance", location = { "./src/player.h", 629 } },
        { name = "roll_stab_damage", rval = nil, args = { "bool", "damage_instance", "bool", "item" }, comment = "Adds player's total stab damage to the damage instance", location = { "./src/player.h", 631 } },
        { name = "rooted", rval = nil, args = { }, location = { "./src/player.h", 856 } },
        { name = "rooted_message", rval = nil, args = { }, comment = "Handles rooting effects", location = { "./src/player.h", 855 } },
        { name = "run_cost", rval = "int", args = { "int" }, comment = "Returns the player's modified base movement cost", location = { "./src/player.h", 239 } },
        { name = "run_cost", rval = "int", args = { "int", "bool" }, comment = "Returns the player's modified base movement cost", location = { "./src/player.h", 239 } },
        { name = "rust_rate", rval = "int", args = { "bool" }, comment = "Returns the player's skill rust rate", location = { "./src/player.h", 694 } },
        { name = "rust_rate", rval = "int", args = { }, comment = "Returns the player's skill rust rate", location = { "./src/player.h", 694 } },
        { name = "save_info", rval = "std::string", args = { }, comment = "Outputs a serialized json string for saving", location = { "./src/player.h", 195 } },
        { name = "scored_crit", rval = "bool", args = { "float" }, comment = "Returns true if the player scores a critical hit", location = { "./src/player.h", 611 } },
        { name = "scored_crit", rval = "bool", args = { }, comment = "Returns true if the player scores a critical hit", location = { "./src/player.h", 611 } },
        { name = "search_surroundings", rval = nil, args = { }, comment = "Search surrounding squares for traps (and maybe other things in the future).", location = { "./src/player.h", 1467 } },
        { name = "sees_with_infrared", rval = "bool", args = { "Creature" }, comment = "Check whether the this player can see the other creature with infrared. This implies          * this player can see infrared and the target is visible with infrared (is warm).          * And of course a line of sight exists.", location = { "./src/player.h", 401 } },
        { name = "setID", rval = nil, args = { "int" }, location = { "./src/player.h", 1432 } },
        { name = "set_cat_level_rec", rval = nil, args = { "std::string" }, comment = "Modifies mutation_category_level[] based on the entered trait", location = { "./src/player.h", 285 } },
        { name = "set_destination", rval = nil, args = { "std::vector<tripoint>" }, location = { "./src/player.h", 1303 } },
        { name = "set_highest_cat_level", rval = nil, args = { }, comment = "Recalculates mutation_category_level[] values for the player", location = { "./src/player.h", 287 } },
        { name = "set_painkiller", rval = nil, args = { "int" }, comment = "Sets intensity of painkillers", location = { "./src/player.h", 730 } },
        { name = "set_underwater", rval = nil, args = { "bool" }, location = { "./src/player.h", 1435 } },
        { name = "setx", rval = nil, args = { "int" }, location = { "./src/player.h", 1337 } },
        { name = "sety", rval = nil, args = { "int" }, location = { "./src/player.h", 1341 } },
        { name = "setz", rval = nil, args = { "int" }, location = { "./src/player.h", 1345 } },
        { name = "shift_destination", rval = nil, args = { "int", "int" }, location = { "./src/player.h", 1308 } },
        { name = "shoe_type_count", rval = "int", args = { "std::string" }, comment = "Returns 1 if the player is wearing an item of that count on one foot, 2 if on both, and zero if on neither", location = { "./src/player.h", 1122 } },
        { name = "shout", rval = nil, args = { "std::string" }, location = { "./src/player.h", 407 } },
        { name = "shout", rval = nil, args = { }, location = { "./src/player.h", 407 } },
        { name = "sight_impaired", rval = "bool", args = { }, comment = "Returns true if the player has some form of impaired sight", location = { "./src/player.h", 355 } },
        { name = "siphon", rval = nil, args = { "vehicle", "std::string" }, comment = "Siphons fuel (if available) from the specified vehicle into container or          * similar via @ref game::handle_liquid. May start a player activity.", location = { "./src/player.h", 773 } },
        { name = "sleep_spot", rval = "int", args = { "tripoint" }, comment = "Rate point's ability to serve as a bed. Takes mutations, fatigue and stimms into account.", location = { "./src/player.h", 1066 } },
        { name = "sort_armor", rval = nil, args = { }, comment = "Draws the UI and handles player input for the armor re-ordering window", location = { "./src/player.h", 1002 } },
        { name = "spores", rval = nil, args = { }, location = { "./src/player.h", 1478 } },
        { name = "steal", rval = nil, args = { "npc" }, comment = "Try to steal an item from the NPC's inventory. May result in fail attempt, when NPC not notices you,          * notices your steal attempt and getting angry with you, and you successfully stealing the item.          * @param target Target NPC to steal from", location = { "./src/player.h", 1560 } },
        { name = "stomach_capacity", rval = "int", args = { }, comment = "Gets player's minimum hunger and thirst", location = { "./src/player.h", 805 } },
        { name = "store", rval = nil, args = { "item", "item" }, comment = "Stores an item inside another consuming moves proportional to weapon skill and volume          * @param container Container in which to store the item          * @param put Item to add to the container          * @param penalties Whether item volume and temporary effects (eg. GRABBED, DOWNED) should be considered.          * @param base_cost Cost due to storage type.", location = { "./src/player.h", 999 } },
        { name = "store", rval = nil, args = { "item", "item", "bool" }, comment = "Stores an item inside another consuming moves proportional to weapon skill and volume          * @param container Container in which to store the item          * @param put Item to add to the container          * @param penalties Whether item volume and temporary effects (eg. GRABBED, DOWNED) should be considered.          * @param base_cost Cost due to storage type.", location = { "./src/player.h", 999 } },
        { name = "store", rval = nil, args = { "item", "item", "bool", "int" }, comment = "Stores an item inside another consuming moves proportional to weapon skill and volume          * @param container Container in which to store the item          * @param put Item to add to the container          * @param penalties Whether item volume and temporary effects (eg. GRABBED, DOWNED) should be considered.          * @param base_cost Cost due to storage type.", location = { "./src/player.h", 999 } },
        { name = "studied_all_recipes", rval = "bool", args = { "itype" }, location = { "./src/player.h", 1238 } },
        { name = "suffer", rval = nil, args = { }, comment = "Handles a large number of timers decrementing and other randomized effects", location = { "./src/player.h", 775 } },
        { name = "swim_speed", rval = "int", args = { }, comment = "Returns the player's speed for swimming across water tiles", location = { "./src/player.h", 241 } },
        { name = "takeoff", rval = "bool", args = { "int" }, location = { "./src/player.h", 978 } },
        { name = "takeoff", rval = "bool", args = { "item" }, comment = "Takes off an item, returning false on fail. The taken off item is processed in the interact", location = { "./src/player.h", 977 } },
        { name = "takeoff", rval = "bool", args = { "item", "std::list<item>" }, comment = "Takes off an item, returning false on fail. The taken off item is processed in the interact", location = { "./src/player.h", 977 } },
        { name = "talk_skill", rval = "int", args = { }, comment = "Returns a value used when attempting to convince NPC's of something", location = { "./src/player.h", 696 } },
        { name = "temp_equalizer", rval = nil, args = { "body_part", "body_part" }, location = { "./src/player.h", 1383 } },
        { name = "thirst_speed_penalty", static = true, rval = "int", args = { "int" }, comment = "Returns the penalty to speed from thirst", location = { "./src/player.h", 1132 } },
        { name = "thrown_current_range", rval = "float", args = { "item" }, comment = "Calculate range at which given chance of hit considering player stats, clothing and recoil          *  @param to_throw item that will be thrown          *  @param chance probability of hit, range [0-100) with zero returning absolute maximum range          *  @param accuracy minimum accuracy required          *  @param target the target creature (can be null) who may try to dodge the thrown item", location = { "./src/player.h", 538 } },
        { name = "thrown_current_range", rval = "float", args = { "item", "int" }, comment = "Calculate range at which given chance of hit considering player stats, clothing and recoil          *  @param to_throw item that will be thrown          *  @param chance probability of hit, range [0-100) with zero returning absolute maximum range          *  @param accuracy minimum accuracy required          *  @param target the target creature (can be null) who may try to dodge the thrown item", location = { "./src/player.h", 538 } },
        { name = "thrown_current_range", rval = "float", args = { "item", "int", "float" }, comment = "Calculate range at which given chance of hit considering player stats, clothing and recoil          *  @param to_throw item that will be thrown          *  @param chance probability of hit, range [0-100) with zero returning absolute maximum range          *  @param accuracy minimum accuracy required          *  @param target the target creature (can be null) who may try to dodge the thrown item", location = { "./src/player.h", 538 } },
        { name = "thrown_current_range", rval = "float", args = { "item", "int", "float", "Creature" }, comment = "Calculate range at which given chance of hit considering player stats, clothing and recoil          *  @param to_throw item that will be thrown          *  @param chance probability of hit, range [0-100) with zero returning absolute maximum range          *  @param accuracy minimum accuracy required          *  @param target the target creature (can be null) who may try to dodge the thrown item", location = { "./src/player.h", 538 } },
        { name = "time_to_craft", rval = "int", args = { "recipe" }, location = { "./src/player.h", 1254 } },
        { name = "time_to_craft", rval = "int", args = { "recipe", "int" }, location = { "./src/player.h", 1254 } },
        { name = "time_to_read", rval = "int", args = { "item", "player" }, comment = "Helper function for get_book_reader          * @warning This function assumes that the everyone is able to read          *          * @param book The book being read          * @param reader the player/NPC who's reading to the caller          * @param learner if not nullptr, assume that the caller and reader read at a pace that isn't too fast for him", location = { "./src/player.h", 1055 } },
        { name = "time_to_read", rval = "int", args = { "item", "player", "player" }, comment = "Helper function for get_book_reader          * @warning This function assumes that the everyone is able to read          *          * @param book The book being read          * @param reader the player/NPC who's reading to the caller          * @param learner if not nullptr, assume that the caller and reader read at a pace that isn't too fast for him", location = { "./src/player.h", 1055 } },
        { name = "toggle_move_mode", rval = nil, args = { }, location = { "./src/player.h", 406 } },
        { name = "try_to_sleep", rval = nil, args = { }, comment = "Handles sleep attempts by the player, adds 'lying_down'", location = { "./src/player.h", 1064 } },
        { name = "unarmed_attack", rval = "bool", args = { }, comment = "True if unarmed or wielding a weapon with the UNARMED_WEAPON flag", location = { "./src/player.h", 364 } },
        { name = "unarmed_value", rval = "float", args = { }, location = { "./src/player.h", 620 } },
        { name = "unimpaired_range", rval = "int", args = { }, comment = "Returns the player maximum vision range factoring in mutations, diseases, and other effects", location = { "./src/player.h", 347 } },
        { name = "uninstall_bionic", rval = "bool", args = { "std::string" }, comment = "Used by the player to perform surgery to remove bionics and possibly retrieve parts", location = { "./src/player.h", 303 } },
        { name = "uninstall_bionic", rval = "bool", args = { "std::string", "int" }, comment = "Used by the player to perform surgery to remove bionics and possibly retrieve parts", location = { "./src/player.h", 303 } },
        { name = "update_body", rval = nil, args = { "int", "int" }, comment = "Updates all 'biology' as if time between `from` and `to` passed.", location = { "./src/player.h", 247 } },
        { name = "update_body", rval = nil, args = { }, comment = "Updates all 'biology' by one turn. Should be called once every turn.", location = { "./src/player.h", 245 } },
        { name = "update_body_wetness", rval = nil, args = { "w_point" }, comment = "Maintains body wetness and handles the rate at which the player dries", location = { "./src/player.h", 243 } },
        { name = "update_bodytemp", rval = nil, args = { }, comment = "Maintains body temperature", location = { "./src/player.h", 235 } },
        { name = "update_mental_focus", rval = nil, args = { }, comment = "Uses calc_focus_equilibrium to update the player's current focus", location = { "./src/player.h", 231 } },
        { name = "update_morale", rval = nil, args = { }, comment = "Ticks down morale counters and removes them", location = { "./src/player.h", 227 } },
        { name = "update_needs", rval = nil, args = { "int" }, comment = "Increases hunger, thirst, fatigue and stimms wearing off. `rate_multiplier` is for retroactive updates.", location = { "./src/player.h", 249 } },
        { name = "update_stamina", rval = nil, args = { "int" }, comment = "Regenerates stamina", location = { "./src/player.h", 259 } },
        { name = "update_vitamins", rval = nil, args = { "vitamin_id" }, comment = "Set vitamin deficiency/excess disease states dependent upon current vitamin levels", location = { "./src/player.h", 252 } },
        { name = "use", rval = nil, args = { "int" }, comment = "Uses a tool", location = { "./src/player.h", 1004 } },
        { name = "use_amount", rval = "std::list<item>", args = { "std::string", "int" }, location = { "./src/player.h", 1204 } },
        { name = "use_charges", rval = "std::list<item>", args = { "std::string", "int" }, location = { "./src/player.h", 1207 } },
        { name = "use_charges_if_avail", rval = "bool", args = { "std::string", "int" }, location = { "./src/player.h", 1205 } },
        { name = "use_wielded", rval = nil, args = { }, comment = "Uses the current wielded weapon", location = { "./src/player.h", 1006 } },
        { name = "visibility", rval = "int", args = { "bool" }, location = { "./src/player.h", 1445 } },
        { name = "visibility", rval = "int", args = { "bool", "int" }, location = { "./src/player.h", 1445 } },
        { name = "visibility", rval = "int", args = { }, location = { "./src/player.h", 1445 } },
        { name = "vitamin_get", rval = "int", args = { "vitamin_id" }, comment = "Check current level of a vitamin          *          * Accesses level of a given vitamin.  If the vitamin_id specified does not          * exist then this function simply returns 0.          *          * @param vit ID of vitamin to check level for.          * @returns current level for specified vitamin", location = { "./src/player.h", 835 } },
        { name = "vitamin_mod", rval = "int", args = { "vitamin_id", "int" }, comment = "Add or subtract vitamins from player storage pools          * @param vit ID of vitamin to modify          * @param qty amount by which to adjust vitamin (negative values are permitted)          * @param capped if true prevent vitamins which can accumulate in excess from doing so          * @return adjusted level for the vitamin or zero if vitamin does not exist", location = { "./src/player.h", 824 } },
        { name = "vitamin_mod", rval = "int", args = { "vitamin_id", "int", "bool" }, comment = "Add or subtract vitamins from player storage pools          * @param vit ID of vitamin to modify          * @param qty amount by which to adjust vitamin (negative values are permitted)          * @param capped if true prevent vitamins which can accumulate in excess from doing so          * @return adjusted level for the vitamin or zero if vitamin does not exist", location = { "./src/player.h", 824 } },
        { name = "vitamin_rate", rval = "int", args = { "vitamin_id" }, comment = "Get vitamin usage rate (minutes per unit) accounting for bionics, mutations and effects", location = { "./src/player.h", 815 } },
        { name = "vitamin_set", rval = "bool", args = { "vitamin_id", "int" }, comment = "Sets level of a vitamin or returns false if id given in vit does not exist          *          * @note status effects are still set for deficiency/excess          *          * @param[in] vit ID of vitamin to adjust quantity for          * @param[in] qty Quantity to set level to          * @returns false if given vitamin_id does not exist, otherwise true", location = { "./src/player.h", 846 } },
        { name = "vomit", rval = nil, args = { }, comment = "Handles player vomiting effects", location = { "./src/player.h", 779 } },
        { name = "vomit_mod", rval = "float", args = { }, comment = "Returns the modifier value used for vomiting effects.", location = { "./src/player.h", 184 } },
        { name = "wake_up", rval = nil, args = { }, comment = "Removes 'sleep' and 'lying_down' from the player", location = { "./src/player.h", 1072 } },
        { name = "warmth", rval = "int", args = { "body_part" }, comment = "Returns warmth provided by armor, etc.", location = { "./src/player.h", 1094 } },
        { name = "weapname", rval = "std::string", args = { }, comment = "Get the formatted name of the currently wielded item (if any)", location = { "./src/player.h", 1155 } },
        { name = "weapon_value", rval = "float", args = { "item" }, comment = "NPC-related item rating functions", location = { "./src/player.h", 617 } },
        { name = "weapon_value", rval = "float", args = { "item", "int" }, comment = "NPC-related item rating functions", location = { "./src/player.h", 617 } },
        { name = "wear", rval = "bool", args = { "int" }, comment = "Wear item; returns false on fail. If interactive is false, don't alert the player or drain moves on completion.", location = { "./src/player.h", 967 } },
        { name = "wear", rval = "bool", args = { "int", "bool" }, comment = "Wear item; returns false on fail. If interactive is false, don't alert the player or drain moves on completion.", location = { "./src/player.h", 967 } },
        { name = "wear_item", rval = "bool", args = { "item" }, comment = "Wear item; returns false on fail. If interactive is false, don't alert the player or drain moves on completion.", location = { "./src/player.h", 969 } },
        { name = "wear_item", rval = "bool", args = { "item", "bool" }, comment = "Wear item; returns false on fail. If interactive is false, don't alert the player or drain moves on completion.", location = { "./src/player.h", 969 } },
        { name = "wearing_something_on", rval = "bool", args = { "body_part" }, comment = "Returns true if the player is wearing something on the entered body_part", location = { "./src/player.h", 1114 } },
        { name = "wield", rval = "bool", args = { "item" }, comment = "Removes currently wielded item (if any) and replaces it with the target item          * @param target replacement item to wield or null item to remove existing weapon without replacing it          * @return whether both removal and replacement were successful (they are performed atomically)", location = { "./src/player.h", 908 } },
        { name = "wield_contents", rval = "bool", args = { "item" }, comment = "Try to wield a contained item consuming moves proportional to weapon skill and volume.          * @param container Containter containing the item to be wielded          * @param pos index of contained item to wield. Set to -1 to show menu if container has more than one item          * @param penalties Whether item volume and temporary effects (eg. GRABBED, DOWNED) should be considered.          * @param base_cost Cost due to storage type.", location = { "./src/player.h", 990 } },
        { name = "wield_contents", rval = "bool", args = { "item", "int" }, comment = "Try to wield a contained item consuming moves proportional to weapon skill and volume.          * @param container Containter containing the item to be wielded          * @param pos index of contained item to wield. Set to -1 to show menu if container has more than one item          * @param penalties Whether item volume and temporary effects (eg. GRABBED, DOWNED) should be considered.          * @param base_cost Cost due to storage type.", location = { "./src/player.h", 990 } },
        { name = "wield_contents", rval = "bool", args = { "item", "int", "bool" }, comment = "Try to wield a contained item consuming moves proportional to weapon skill and volume.          * @param container Containter containing the item to be wielded          * @param pos index of contained item to wield. Set to -1 to show menu if container has more than one item          * @param penalties Whether item volume and temporary effects (eg. GRABBED, DOWNED) should be considered.          * @param base_cost Cost due to storage type.", location = { "./src/player.h", 990 } },
        { name = "wield_contents", rval = "bool", args = { "item", "int", "bool", "int" }, comment = "Try to wield a contained item consuming moves proportional to weapon skill and volume.          * @param container Containter containing the item to be wielded          * @param pos index of contained item to wield. Set to -1 to show menu if container has more than one item          * @param penalties Whether item volume and temporary effects (eg. GRABBED, DOWNED) should be considered.          * @param base_cost Cost due to storage type.", location = { "./src/player.h", 990 } },
    }
}
classes['item'] = {
    parents = {
        "JsonSerializer",
        "JsonDeserializer",
    },
    new = {
        { "item" },
        { "itype" },
        { "itype", "int" },
        { "itype", "int", "int" },
        { "itype", "int", "item::default_charges_tag" },
        { "itype", "int", "item::solitary_tag" },
        { "std::string" },
        { "std::string", "int" },
        { "std::string", "int", "int" },
        { "std::string", "int", "item::default_charges_tag" },
        { "std::string", "int", "item::solitary_tag" },
        { },
    },
    by_value_and_reference = true,
    attributes = {
        INFINITE_CHARGES = { type = "int", static = true },
        active = { type = "bool", writable = true },
        bday = { type = "int", writable = true },
        burnt = { type = "int", writable = true },
        charges = { type = "int", writable = true },
        components = { type = "std::vector<item>", writable = true },
        contents = { type = "std::list<item>", writable = true },
        faults = { type = "std::set<fault_id>", writable = true },
        frequency = { type = "int", writable = true },
        fridge = { type = "int", writable = true },
        invlet = { type = "int", writable = true },
        irridation = { type = "int", writable = true },
        item_counter = { type = "int", writable = true },
        item_tags = { type = "std::set<std::string>", writable = true },
        mission_id = { type = "int", writable = true },
        note = { type = "int", writable = true },
        player_id = { type = "int", writable = true },
        poison = { type = "int", writable = true },
        type = { type = "itype", writable = true },
    },
    functions = {
        { name = "acid_resist", rval = "int", args = { "bool" }, location = { "./src/item.h", 766 } },
        { name = "acid_resist", rval = "int", args = { }, location = { "./src/item.h", 766 } },
        { name = "activate", rval = "item&", args = { }, comment = "Filter converting instance to active state", location = { "./src/item.h", 230 } },
        { name = "add_rain_to_container", rval = nil, args = { "bool" }, location = { "./src/item.h", 602 } },
        { name = "add_rain_to_container", rval = nil, args = { "bool", "int" }, location = { "./src/item.h", 602 } },
        { name = "add_technique", rval = nil, args = { "matec_id" }, comment = "Add the given technique to the item specific @ref techniques. Note that other items of          * the same type are not affected by this.", location = { "./src/item.h", 1344 } },
        { name = "allow_crafting_component", rval = "bool", args = { }, comment = "Can item can be used as crafting component in current state?", location = { "./src/item.h", 526 } },
        { name = "already_used_by_player", rval = "bool", args = { "player" }, comment = "Check whether the item has been marked (by calling mark_as_used_by_player)      * as used by this specific player.", location = { "./src/item.h", 826 } },
        { name = "ammo_capacity", rval = "int", args = { }, comment = "Maximum quantity of ammunition loadable for tool, gun or axuiliary gunmod", location = { "./src/item.h", 1371 } },
        { name = "ammo_consume", rval = "int", args = { "int", "tripoint" }, comment = "Consume ammo (if available) and return the amount of ammo that was consumed          * @param qty maximum amount of ammo that should be consumed          * @param pos current location of item, used for ejecting magazines and similar effects          * @return amount of ammo consumed which will be between 0 and qty", location = { "./src/item.h", 1395 } },
        { name = "ammo_current", rval = "std::string", args = { }, comment = "Specific ammo type, returns 'null' if item is neither ammo nor loaded with any", location = { "./src/item.h", 1400 } },
        { name = "ammo_data", rval = "itype&", args = { }, comment = "Specific ammo data, returns nullptr if item is neither ammo nor loaded with any", location = { "./src/item.h", 1398 } },
        { name = "ammo_default", rval = "std::string", args = { "bool" }, comment = "Get default ammo used by item or 'NULL' if item does not have a default ammo type          *  @param conversion whether to include the effect of any flags or mods which convert the type          *  @return NULL if item does not use a specific ammo type (and is consequently not reloadable)", location = { "./src/item.h", 1409 } },
        { name = "ammo_default", rval = "std::string", args = { }, comment = "Get default ammo used by item or 'NULL' if item does not have a default ammo type          *  @param conversion whether to include the effect of any flags or mods which convert the type          *  @return NULL if item does not use a specific ammo type (and is consequently not reloadable)", location = { "./src/item.h", 1409 } },
        { name = "ammo_effects", rval = "std::set<std::string>", args = { "bool" }, comment = "Get ammo effects for item optionally inclusive of any resulting from the loaded ammo", location = { "./src/item.h", 1412 } },
        { name = "ammo_effects", rval = "std::set<std::string>", args = { }, comment = "Get ammo effects for item optionally inclusive of any resulting from the loaded ammo", location = { "./src/item.h", 1412 } },
        { name = "ammo_remaining", rval = "int", args = { }, comment = "Quantity of ammunition currently loaded in tool, gun or axuiliary gunmod", location = { "./src/item.h", 1369 } },
        { name = "ammo_required", rval = "int", args = { }, comment = "Quantity of ammunition consumed per usage of tool or with each shot of gun", location = { "./src/item.h", 1373 } },
        { name = "ammo_set", rval = "item&", args = { "std::string" }, comment = "Filter setting the ammo for this instance          * Any existing ammo is removed. If necessary a magazine is also added.          * @param ammo specific type of ammo (must be compatible with item ammo type)          * @param qty maximum ammo (capped by item capacity) or negative to fill to capacity          * @return same instance to allow method chaining", location = { "./src/item.h", 239 } },
        { name = "ammo_set", rval = "item&", args = { "std::string", "int" }, comment = "Filter setting the ammo for this instance          * Any existing ammo is removed. If necessary a magazine is also added.          * @param ammo specific type of ammo (must be compatible with item ammo type)          * @param qty maximum ammo (capped by item capacity) or negative to fill to capacity          * @return same instance to allow method chaining", location = { "./src/item.h", 239 } },
        { name = "ammo_sufficient", rval = "bool", args = { "int" }, comment = "Check if sufficient ammo is loaded for given number of uses.          *          * Check if there is enough ammo loaded in a tool for the given number of uses          * or given number of gun shots.  Using this function for this check is preferred          * because we expect to add support for items consuming multiple ammo types in          * the future.  Users of this function will not need to be refactored when this          * happens.          *          * @param[in] qty Number of uses          * @returns true if ammo sufficent for number of uses is loaded, false otherwise", location = { "./src/item.h", 1387 } },
        { name = "ammo_sufficient", rval = "bool", args = { }, comment = "Check if sufficient ammo is loaded for given number of uses.          *          * Check if there is enough ammo loaded in a tool for the given number of uses          * or given number of gun shots.  Using this function for this check is preferred          * because we expect to add support for items consuming multiple ammo types in          * the future.  Users of this function will not need to be refactored when this          * happens.          *          * @param[in] qty Number of uses          * @returns true if ammo sufficent for number of uses is loaded, false otherwise", location = { "./src/item.h", 1387 } },
        { name = "ammo_unset", rval = "item&", args = { }, comment = "Filter removing all ammo from this instance          * If the item is neither a tool, gun nor magazine is a no-op          * For items reloading using magazines any empty magazine remains present.", location = { "./src/item.h", 246 } },
        { name = "amount_of", rval = "int", args = { "std::string" }, comment = "Count items matching id including both this instance and any contained items          * @param what ID of items to count          * @param pseudo whether pseudo-items (from map/vehicle tiles, bionics etc) are considered          * @param limit stop searching after this many matches          * @note items must be empty to be considered a match", location = { "./src/visitable.h", 88 } },
        { name = "amount_of", rval = "int", args = { "std::string", "bool" }, comment = "Count items matching id including both this instance and any contained items          * @param what ID of items to count          * @param pseudo whether pseudo-items (from map/vehicle tiles, bionics etc) are considered          * @param limit stop searching after this many matches          * @note items must be empty to be considered a match", location = { "./src/visitable.h", 88 } },
        { name = "amount_of", rval = "int", args = { "std::string", "bool", "int" }, comment = "Count items matching id including both this instance and any contained items          * @param what ID of items to count          * @param pseudo whether pseudo-items (from map/vehicle tiles, bionics etc) are considered          * @param limit stop searching after this many matches          * @note items must be empty to be considered a match", location = { "./src/visitable.h", 88 } },
        { name = "attack_time", rval = "int", args = { }, comment = "Base number of moves (@ref Creature::moves) that a single melee attack with this items      * takes. The actual time depends heavily on the attacker, see melee.cpp.", location = { "./src/item.h", 457 } },
        { name = "base_damage_melee", rval = "damage_instance", args = { }, comment = "All damage types this item deals when used in melee (no skill modifiers etc. applied).", location = { "./src/item.h", 463 } },
        { name = "base_damage_thrown", rval = "damage_instance", args = { }, comment = "All damage types this item deals when thrown (no skill modifiers etc. applied).", location = { "./src/item.h", 465 } },
        { name = "base_volume", rval = "units::volume", args = { }, comment = "Simplified, faster volume check for when processing time is important and exact volume is not.", location = { "./src/item.h", 440 } },
        { name = "bash_resist", rval = "int", args = { "bool" }, location = { "./src/item.h", 763 } },
        { name = "bash_resist", rval = "int", args = { }, location = { "./src/item.h", 763 } },
        { name = "brewing_results", rval = "std::vector<std::string>", args = { }, comment = "The results of fermenting this item.", location = { "./src/item.h", 675 } },
        { name = "brewing_time", rval = "int", args = { }, comment = "Turns for this item to be fully fermented.", location = { "./src/item.h", 673 } },
        { name = "calc_rot", rval = nil, args = { "tripoint" }, comment = "Accumulate rot of the item since last rot calculation.      * This function works for non-rotting stuff, too - it increases the value      * of rot.      * @param p The absolute, global location (in map square coordinates) of the item to      * check for temperature.", location = { "./src/item.h", 624 } },
        { name = "can_contain", rval = "bool", args = { "item" }, location = { "./src/item.h", 935 } },
        { name = "can_contain", rval = "bool", args = { "itype" }, location = { "./src/item.h", 936 } },
        { name = "can_holster", rval = "bool", args = { "item" }, comment = "Checks if item is a holster and currently capable of storing obj          *  @param obj object that we want to holster          *  @param ignore only check item is compatible and ignore any existing contents", location = { "./src/item.h", 1010 } },
        { name = "can_holster", rval = "bool", args = { "item", "bool" }, comment = "Checks if item is a holster and currently capable of storing obj          *  @param obj object that we want to holster          *  @param ignore only check item is compatible and ignore any existing contents", location = { "./src/item.h", 1010 } },
        { name = "can_revive", rval = "bool", args = { }, comment = "Whether this is a corpse that can be revived.", location = { "./src/item.h", 300 } },
        { name = "casings_count", rval = "int", args = { }, comment = "How many spent casings are contained within this item?", location = { "./src/item.h", 1415 } },
        { name = "charges_of", rval = "int", args = { "std::string" }, comment = "Count maximum available charges from this instance and any contained items          * @param what ID of item to count charges of          * @param limit stop searching after this many charges have been found", location = { "./src/visitable.h", 79 } },
        { name = "charges_of", rval = "int", args = { "std::string", "int" }, comment = "Count maximum available charges from this instance and any contained items          * @param what ID of item to count charges of          * @param limit stop searching after this many charges have been found", location = { "./src/visitable.h", 79 } },
        { name = "charges_per_volume", rval = "int", args = { "units::volume" }, comment = "Number of charges of this item that fit into the given volume.          * May return 0 if not even one charge fits into the volume. Only depends on the *type*          * of this item not on its current charge count.          *          * For items not counted by charges, this returns this->volume() / vol.", location = { "./src/item.h", 1065 } },
        { name = "chip_resistance", rval = "int", args = { "bool" }, comment = "Returns resistance to being damaged by attack against the item itself.      * Calculated from item's materials.      * @param worst If this is true, the worst resistance is used. Otherwise the best one.", location = { "./src/item.h", 785 } },
        { name = "chip_resistance", rval = "int", args = { }, comment = "Returns resistance to being damaged by attack against the item itself.      * Calculated from item's materials.      * @param worst If this is true, the worst resistance is used. Otherwise the best one.", location = { "./src/item.h", 785 } },
        { name = "clear_vars", rval = nil, args = { }, comment = "Removes all item variables.", location = { "./src/item.h", 1103 } },
        { name = "color", rval = "int", args = { }, comment = "Returns the default color of the item (e.g. @ref itype::color).", location = { "./src/item.h", 311 } },
        { name = "color_in_inventory", rval = "int", args = { }, comment = "Returns the color of the item depending on usefulness for the player character,      * e.g. differently if it its an unread book or a spoiling food item etc.      * This should only be used for displaying data, it should not affect game play.", location = { "./src/item.h", 317 } },
        { name = "components_to_string", rval = "std::string", args = { }, comment = "List of all @ref components in printable form, empty if this item has      * no components", location = { "./src/item.h", 980 } },
        { name = "conductive", rval = "bool", args = { }, comment = "Whether the items is conductive.", location = { "./src/item.h", 746 } },
        { name = "contextualize_skill", rval = "skill_id", args = { "skill_id" }, comment = "Puts the skill in context of the item", location = { "./src/item.h", 1657 } },
        { name = "convert", rval = "item&", args = { "std::string" }, comment = "Filter converting this instance to another type preserving all other aspects          * @param new_type the type id to convert to          * @return same instance to allow method chaining", location = { "./src/item.h", 218 } },
        { name = "count_by_charges", rval = "bool", args = { }, location = { "./src/item.h", 606 } },
        { name = "count_by_charges", static = true, rval = "bool", args = { "std::string" }, comment = "Whether the item is counted by charges, this is a static wrapper          * around @ref count_by_charges, that does not need an items instance.", location = { "./src/item.h", 1632 } },
        { name = "covers", rval = "bool", args = { "body_part" }, comment = "Whether this item (when worn) covers the given body part.", location = { "./src/item.h", 1204 } },
        { name = "craft_has_charges", rval = "bool", args = { }, location = { "./src/item.h", 607 } },
        { name = "cut_resist", rval = "int", args = { "bool" }, location = { "./src/item.h", 764 } },
        { name = "cut_resist", rval = "int", args = { }, location = { "./src/item.h", 764 } },
        { name = "damage", rval = "int", args = { }, comment = "How much damage has the item sustained?", location = { "./src/item.h", 788 } },
        { name = "damage_color", rval = "int", args = { }, comment = "Provide color for UI display dependent upon current item damage level", location = { "./src/item.h", 814 } },
        { name = "damage_melee", rval = "int", args = { "damage_type" }, comment = "Damage of given type caused when this item is used as melee weapon", location = { "./src/item.h", 460 } },
        { name = "damage_resist", rval = "int", args = { "damage_type" }, comment = "Resistance provided by this item against damage type given by an enum.", location = { "./src/item.h", 778 } },
        { name = "damage_resist", rval = "int", args = { "damage_type", "bool" }, comment = "Resistance provided by this item against damage type given by an enum.", location = { "./src/item.h", 778 } },
        { name = "damage_symbol", rval = "std::string", args = { }, comment = "Provide prefix symbol for UI display dependent upon current item damage level", location = { "./src/item.h", 817 } },
        { name = "deactivate", rval = "item&", args = { "Character" }, comment = "Filter converting this instance to the inactive type          * If the item is either inactive or cannot be deactivated is a no-op          * @param ch character currently possessing or acting upon the item (if any)          * @param alert whether to display any messages          * @return same instance to allow method chaining", location = { "./src/item.h", 227 } },
        { name = "deactivate", rval = "item&", args = { "Character", "bool" }, comment = "Filter converting this instance to the inactive type          * If the item is either inactive or cannot be deactivated is a no-op          * @param ch character currently possessing or acting upon the item (if any)          * @param alert whether to display any messages          * @return same instance to allow method chaining", location = { "./src/item.h", 227 } },
        { name = "deactivate", rval = "item&", args = { }, comment = "Filter converting this instance to the inactive type          * If the item is either inactive or cannot be deactivated is a no-op          * @param ch character currently possessing or acting upon the item (if any)          * @param alert whether to display any messages          * @return same instance to allow method chaining", location = { "./src/item.h", 227 } },
        { name = "destroyed_at_zero_charges", rval = "bool", args = { }, location = { "./src/item.h", 889 } },
        { name = "detonate", rval = "bool", args = { "tripoint", "std::vector<item>" }, comment = "Detonates the item and adds remains (if any) to drops.      * Returns true if the item actually detonated,      * potentially destroying other items and invalidating iterators.      * Should NOT be called on an item on the map, but on a local copy.", location = { "./src/item.h", 683 } },
        { name = "display_name", rval = "std::string", args = { "int" }, comment = "Returns the item name and the charges or contained charges (if the item can have      * charges at at all). Calls @ref tname with given quantity and with_prefix being true.", location = { "./src/item.h", 331 } },
        { name = "display_name", rval = "std::string", args = { }, comment = "Returns the item name and the charges or contained charges (if the item can have      * charges at at all). Calls @ref tname with given quantity and with_prefix being true.", location = { "./src/item.h", 331 } },
        { name = "engine_displacement", rval = "int", args = { }, comment = "for combustion engines the displacement (cc)", location = { "./src/item.h", 1586 } },
        { name = "erase_var", rval = nil, args = { "std::string" }, comment = "Erase the value of the given variable.", location = { "./src/item.h", 1101 } },
        { name = "faults_potential", rval = "std::set<fault_id>", args = { }, comment = "What faults can potentially occur with this item?", location = { "./src/item.h", 921 } },
        { name = "fill_with", rval = nil, args = { "item" }, comment = "Fill item with liquid up to its capacity. This works for guns and tools that accept      * liquid ammo.      * @param liquid Liquid to fill the container with.      * @param amount Amount to fill item with, capped by remaining capacity", location = { "./src/item.h", 556 } },
        { name = "fill_with", rval = nil, args = { "item", "int" }, comment = "Fill item with liquid up to its capacity. This works for guns and tools that accept      * liquid ammo.      * @param liquid Liquid to fill the container with.      * @param amount Amount to fill item with, capped by remaining capacity", location = { "./src/item.h", 556 } },
        { name = "find_parent", rval = "item&", args = { "item" }, comment = "Determine the immediate parent container (if any) for an item.          * @param it item to search for which must be contained (at any depth) by this object          * @return parent container or nullptr if the item is not within a container", location = { "./src/visitable.h", 52 } },
        { name = "find_type", static = true, rval = "itype&", args = { "std::string" }, comment = "Returns the item type of the given identifier. Never returns null.", location = { "./src/item.h", 1627 } },
        { name = "fire_resist", rval = "int", args = { "bool" }, location = { "./src/item.h", 767 } },
        { name = "fire_resist", rval = "int", args = { }, location = { "./src/item.h", 767 } },
        { name = "flammable", rval = "bool", args = { "int" }, comment = "Whether the items is flammable. (Make sure to keep this in sync with      * fire code in fields.cpp)      * @param threshold Item is flammable if it provides more fuel than threshold.", location = { "./src/item.h", 752 } },
        { name = "flammable", rval = "bool", args = { }, comment = "Whether the items is flammable. (Make sure to keep this in sync with      * fire code in fields.cpp)      * @param threshold Item is flammable if it provides more fuel than threshold.", location = { "./src/item.h", 752 } },
        { name = "fuel_energy", rval = "float", args = { }, comment = "Returns energy of one charge of this item as fuel for an engine.", location = { "./src/item.h", 927 } },
        { name = "get_base_material", rval = "material_type&", args = { }, comment = "Get the basic (main) material of this item. May return the null-material.", location = { "./src/item.h", 711 } },
        { name = "get_cable_target", rval = "tripoint", args = { }, comment = "Gets the point (vehicle tile) the cable is connected to.      * Returns tripoint_min if not connected to anything.", location = { "./src/item.h", 867 } },
        { name = "get_chapters", rval = "int", args = { }, comment = "How many chapters the book has (if any). Will be 0 if the item is not a book, or if it          * has no chapters at all.          * Each reading will 'consume' a chapter, if the book has no unread chapters, it's less fun.", location = { "./src/item.h", 1311 } },
        { name = "get_contained", rval = "item", args = { }, comment = "Return a contained item (if any and only one).", location = { "./src/item.h", 991 } },
        { name = "get_container_capacity", rval = "units::volume", args = { }, comment = "It returns the total capacity (volume) of the container.", location = { "./src/item.h", 573 } },
        { name = "get_coverage", rval = "int", args = { }, comment = "Returns the relative coverage that this item has when worn.          * Values range from 0 (not covering anything, or no armor at all) to          * 100 (covering the whole body part). Items that cover more are more likely to absorb          * damage from attacks.", location = { "./src/item.h", 1265 } },
        { name = "get_encumber", rval = "int", args = { }, comment = "Returns the encumbrance value that this item has when worn.          * Returns 0 if this is can not be worn at all.", location = { "./src/item.h", 1270 } },
        { name = "get_env_resist", rval = "int", args = { }, comment = "Returns the resistance to environmental effects (@ref islot_armor::env_resist) that this          * item provides when worn. See @ref player::get_env_resist. Higher values are better.          * For non-armor it returns 0.", location = { "./src/item.h", 1282 } },
        { name = "get_free_mod_locations", rval = "int", args = { "std::string" }, comment = "Number of mods that can still be installed into the given mod location,          * for non-guns it always returns 0.", location = { "./src/item.h", 1573 } },
        { name = "get_gun_ups_drain", rval = "int", args = { }, location = { "./src/item.h", 1692 } },
        { name = "get_layer", rval = "int", args = { }, comment = "Returns clothing layer for item which will always be 0 for non-wearable items.", location = { "./src/item.h", 1258 } },
        { name = "get_mtype", rval = "mtype&", args = { }, comment = "@return The monster type associated with this item (@ref corpse). It is usually the          * type that this item is made of (e.g. corpse, meat or blood of the monster).          * May return a null-pointer.", location = { "./src/item.h", 284 } },
        { name = "get_plant_epoch", rval = "int", args = { }, comment = "Time (in turns) it takes to grow from one stage to another. There are 4 plant stages:          * seed, seedling, mature and harvest. Non-seed items return 0.", location = { "./src/item.h", 1185 } },
        { name = "get_plant_name", rval = "std::string", args = { }, comment = "The name of the plant as it appears in the various informational menus. This should be          * translated. Returns an empty string for non-seed items.", location = { "./src/item.h", 1190 } },
        { name = "get_property_long", rval = "int", args = { "std::string" }, location = { "./src/item.h", 1146 } },
        { name = "get_property_long", rval = "int", args = { "std::string", "int" }, location = { "./src/item.h", 1146 } },
        { name = "get_property_string", rval = "std::string", args = { "std::string" }, comment = "Get typed property for item.           * Return same type as the passed default value, or string where no default provided", location = { "./src/item.h", 1145 } },
        { name = "get_property_string", rval = "std::string", args = { "std::string", "std::string" }, comment = "Get typed property for item.           * Return same type as the passed default value, or string where no default provided", location = { "./src/item.h", 1145 } },
        { name = "get_quality", rval = "int", args = { "quality_id" }, location = { "./src/item.h", 605 } },
        { name = "get_random_material", rval = "material_type&", args = { }, comment = "Get a material reference to a random material that this item is made of.      * This might return the null-material, you may check this with @ref material_type::ident.      * Note that this may also return a different material each time it's invoked (if the      * item is made from several materials).", location = { "./src/item.h", 707 } },
        { name = "get_relative_rot", rval = "float", args = { }, comment = "Get @ref rot value relative to shelf life (or 0 if item does not spoil)", location = { "./src/item.h", 630 } },
        { name = "get_remaining_chapters", rval = "int", args = { "player" }, comment = "Get the number of unread chapters. If the item is no book or has no chapters, it returns 0.          * This is a per-character setting, different characters may have different number of          * unread chapters.", location = { "./src/item.h", 1317 } },
        { name = "get_rot", rval = "int", args = { }, location = { "./src/item.h", 664 } },
        { name = "get_side", rval = "side", args = { }, comment = "Returns side item currently worn on. Returns BOTH if item is not sided or no side currently set", location = { "./src/item.h", 1234 } },
        { name = "get_storage", rval = "units::volume", args = { }, comment = "Returns the storage amount (@ref islot_armor::storage) that this item provides when worn.          * For non-armor it returns 0. The storage amount increases the volume capacity of the          * character that wears the item.", location = { "./src/item.h", 1276 } },
        { name = "get_techniques", rval = "std::set<matec_id>", args = { }, comment = "Returns all the martial art techniques that this items supports.", location = { "./src/item.h", 1339 } },
        { name = "get_thickness", rval = "int", args = { }, comment = "Returns the @ref islot_armor::thickness value, or 0 for non-armor. Thickness is are          * relative value that affects the items resistance against bash / cutting damage.", location = { "./src/item.h", 1254 } },
        { name = "get_usable_item", rval = "item&", args = { "std::string" }, comment = "Checks this item and its contents (recursively) for types that have          * use_function with type use_name. Returns the first item that does have          * such type or nullptr if none found.", location = { "./src/item.h", 1600 } },
        { name = "get_var", rval = "float", args = { "std::string", "float" }, location = { "./src/item.h", 1093 } },
        { name = "get_var", rval = "std::string", args = { "std::string" }, comment = "Get the variable, if it does not exists, returns an empty string.", location = { "./src/item.h", 1097 } },
        { name = "get_var", rval = "std::string", args = { "std::string", "std::string" }, location = { "./src/item.h", 1095 } },
        { name = "get_warmth", rval = "int", args = { }, comment = "Returns the warmth value that this item has when worn. See player class for temperature          * related code, or @ref player::warmth. Returned values should be positive. A value          * of 0 indicates no warmth from this item at all (this is also the default for non-armor).", location = { "./src/item.h", 1249 } },
        { name = "getlight_emit", rval = "int", args = { }, comment = "How much light (see lightmap.cpp) the item emits (it's assumed to be circular).", location = { "./src/item.h", 1166 } },
        { name = "goes_bad", rval = "bool", args = { }, comment = "whether an item is perishable (can rot)", location = { "./src/item.h", 627 } },
        { name = "gun_current_mode", rval = "item::gun_mode", args = { }, comment = "Get the current mode for this gun (or an invalid mode if item is not a gun)", location = { "./src/item.h", 1498 } },
        { name = "gun_cycle_mode", rval = nil, args = { }, comment = "Switch to the next available firing mode", location = { "./src/item.h", 1508 } },
        { name = "gun_damage", rval = "int", args = { "bool" }, comment = "Summed ranged damage of a gun, including values from mods. Returns 0 on non-gun items.", location = { "./src/item.h", 1552 } },
        { name = "gun_damage", rval = "int", args = { }, comment = "Summed ranged damage of a gun, including values from mods. Returns 0 on non-gun items.", location = { "./src/item.h", 1552 } },
        { name = "gun_dispersion", rval = "int", args = { "bool" }, comment = "Summed dispersion of a gun, including values from mods. Returns 0 on non-gun items.", location = { "./src/item.h", 1560 } },
        { name = "gun_dispersion", rval = "int", args = { }, comment = "Summed dispersion of a gun, including values from mods. Returns 0 on non-gun items.", location = { "./src/item.h", 1560 } },
        { name = "gun_get_mode", rval = "item::gun_mode", args = { "std::string" }, comment = "Check if gun supports a specific mode returning an invalid/empty mode if not", location = { "./src/item.h", 1495 } },
        { name = "gun_get_mode_id", rval = "std::string", args = { }, comment = "Get id of mode a gun is currently set to, eg. DEFAULT, AUTO, BURST", location = { "./src/item.h", 1502 } },
        { name = "gun_noise", rval = "item::sound_data", args = { "bool" }, comment = "Returns the sound of the gun being fired.          * @param burst Whether the gun was fired in burst mode (the sound string is usually different).", location = { "./src/item.h", 1523 } },
        { name = "gun_noise", rval = "item::sound_data", args = { }, comment = "Returns the sound of the gun being fired.          * @param burst Whether the gun was fired in burst mode (the sound string is usually different).", location = { "./src/item.h", 1523 } },
        { name = "gun_pierce", rval = "int", args = { "bool" }, comment = "Summed ranged armor-piercing of a gun, including values from mods. Returns 0 on non-gun items.", location = { "./src/item.h", 1556 } },
        { name = "gun_pierce", rval = "int", args = { }, comment = "Summed ranged armor-piercing of a gun, including values from mods. Returns 0 on non-gun items.", location = { "./src/item.h", 1556 } },
        { name = "gun_range", rval = "int", args = { "bool" }, comment = "Summed range value of a gun, including values from mods. Returns 0 on non-gun items.", location = { "./src/item.h", 1539 } },
        { name = "gun_range", rval = "int", args = { "player" }, comment = "The weapons range in map squares. If the item has an active gunmod, it returns the range          * of that gunmod, the guns range is returned only when the item has no active gunmod.          * This function applies to guns and auxiliary gunmods. For other items, 0 is returned.          * It includes the range given by the ammo.          * @param u The player that uses the weapon, their strength might affect this.          * It's optional and can be null.", location = { "./src/item.h", 1535 } },
        { name = "gun_range", rval = "int", args = { }, comment = "Summed range value of a gun, including values from mods. Returns 0 on non-gun items.", location = { "./src/item.h", 1539 } },
        { name = "gun_recoil", rval = "int", args = { "player" }, comment = "Get effective recoil considering handling, loaded ammo and effects of attached gunmods          *  @param p player stats such as STR can alter effective recoil          *  @param bipod whether any bipods should be considered          *  @return effective recoil (per shot) or zero if gun uses ammo and none is loaded", location = { "./src/item.h", 1547 } },
        { name = "gun_recoil", rval = "int", args = { "player", "bool" }, comment = "Get effective recoil considering handling, loaded ammo and effects of attached gunmods          *  @param p player stats such as STR can alter effective recoil          *  @param bipod whether any bipods should be considered          *  @return effective recoil (per shot) or zero if gun uses ammo and none is loaded", location = { "./src/item.h", 1547 } },
        { name = "gun_set_mode", rval = "bool", args = { "std::string" }, comment = "Try to set the mode for a gun, returning false if no such mode is possible", location = { "./src/item.h", 1505 } },
        { name = "gun_skill", rval = "skill_id", args = { }, comment = "The skill used to operate the gun. Can be 'null' if this is not a gun.", location = { "./src/item.h", 1564 } },
        { name = "gun_type", rval = "std::string", args = { }, comment = "Get the type of a ranged weapon (eg. 'rifle', 'crossbow'), or empty string if non-gun", location = { "./src/item.h", 1567 } },
        { name = "gunmod_compatible", rval = "bool", args = { "item" }, location = { "./src/item.h", 1458 } },
        { name = "gunmod_find", rval = "item&", args = { "std::string" }, comment = "Get first attached gunmod matching type or nullptr if no such mod or item is not a gun", location = { "./src/item.h", 1451 } },
        { name = "has_amount", rval = "bool", args = { "std::string", "int" }, comment = "Check instance provides at least qty of an item (@see amount_of)", location = { "./src/visitable.h", 92 } },
        { name = "has_amount", rval = "bool", args = { "std::string", "int", "bool" }, comment = "Check instance provides at least qty of an item (@see amount_of)", location = { "./src/visitable.h", 92 } },
        { name = "has_any_flag", rval = "bool", args = { "std::vector<std::string>" }, location = { "./src/item.h", 1119 } },
        { name = "has_effect_when_carried", rval = "bool", args = { "art_effect_passive" }, comment = "Does the item provide the artifact effect when it is carried?", location = { "./src/item.h", 969 } },
        { name = "has_effect_when_wielded", rval = "bool", args = { "art_effect_passive" }, comment = "Does the item provide the artifact effect when it is wielded?", location = { "./src/item.h", 961 } },
        { name = "has_effect_when_worn", rval = "bool", args = { "art_effect_passive" }, comment = "Does the item provide the artifact effect when it is worn?", location = { "./src/item.h", 965 } },
        { name = "has_flag", rval = "bool", args = { "std::string" }, location = { "./src/item.h", 1118 } },
        { name = "has_infinite_charges", rval = "bool", args = { }, location = { "./src/item.h", 1654 } },
        { name = "has_item", rval = "bool", args = { "item" }, comment = "Returns true if this visitable instance contains the item", location = { "./src/visitable.h", 63 } },
        { name = "has_label", rval = "bool", args = { }, comment = "Returns true if item has 'item_label' itemvar", location = { "./src/item.h", 1648 } },
        { name = "has_property", rval = "bool", args = { "std::string" }, location = { "./src/item.h", 1140 } },
        { name = "has_quality", rval = "bool", args = { "quality_id" }, comment = "Returns true if instance has amount (or more) items of at least quality level", location = { "./src/visitable.h", 69 } },
        { name = "has_quality", rval = "bool", args = { "quality_id", "int" }, comment = "Returns true if instance has amount (or more) items of at least quality level", location = { "./src/visitable.h", 69 } },
        { name = "has_quality", rval = "bool", args = { "quality_id", "int", "int" }, comment = "Returns true if instance has amount (or more) items of at least quality level", location = { "./src/visitable.h", 69 } },
        { name = "has_rotten_away", rval = "bool", args = { }, comment = "at twice regular shelf life perishable items rot away completely", location = { "./src/item.h", 656 } },
        { name = "has_technique", rval = "bool", args = { "matec_id" }, comment = "Whether the item supports a specific martial art technique (either through its type, or          * through its individual @ref techniques).", location = { "./src/item.h", 1335 } },
        { name = "has_var", rval = "bool", args = { "std::string" }, comment = "Whether the variable is defined at all.", location = { "./src/item.h", 1099 } },
        { name = "in_container", rval = "item", args = { "std::string" }, location = { "./src/item.h", 594 } },
        { name = "in_its_container", rval = "item", args = { }, comment = "Returns this item into its default container. If it does not have a default container,      * returns this. It's intended to be used like \\code newitem = newitem.in_its_container();\\endcode", location = { "./src/item.h", 593 } },
        { name = "inc_damage", rval = "bool", args = { "damage_type" }, comment = "Increment item damage constrained @ref max_damage      * @param dt type of damage which may be passed to @ref on_damage callback      * @return whether item should be destroyed", location = { "./src/item.h", 809 } },
        { name = "inc_damage", rval = "bool", args = { }, comment = "Increment item damage constrained @ref max_damage      * @param dt type of damage which may be passed to @ref on_damage callback      * @return whether item should be destroyed", location = { "./src/item.h", 809 } },
        { name = "info", rval = "std::string", args = { "bool" }, comment = "Return all the information about the item and its type.      *      * This includes the different      * properties of the @ref itype (if they are visible to the player). The returned string      * is already translated and can be *very* long.      * @param showtext If true, shows the item description, otherwise only the properties item type.      * the vector can be used to compare them to properties of another item.", location = { "./src/item.h", 341 } },
        { name = "info", rval = "std::string", args = { }, comment = "Return all the information about the item and its type.      *      * This includes the different      * properties of the @ref itype (if they are visible to the player). The returned string      * is already translated and can be *very* long.      * @param showtext If true, shows the item description, otherwise only the properties item type.      * the vector can be used to compare them to properties of another item.", location = { "./src/item.h", 341 } },
        { name = "is_ammo", rval = "bool", args = { }, location = { "./src/item.h", 901 } },
        { name = "is_ammo_belt", rval = "bool", args = { }, location = { "./src/item.h", 899 } },
        { name = "is_ammo_container", rval = "bool", args = { }, location = { "./src/item.h", 895 } },
        { name = "is_armor", rval = "bool", args = { }, location = { "./src/item.h", 902 } },
        { name = "is_artifact", rval = "bool", args = { }, location = { "./src/item.h", 908 } },
        { name = "is_bandolier", rval = "bool", args = { }, location = { "./src/item.h", 900 } },
        { name = "is_bionic", rval = "bool", args = { }, location = { "./src/item.h", 897 } },
        { name = "is_book", rval = "bool", args = { }, location = { "./src/item.h", 903 } },
        { name = "is_brewable", rval = "bool", args = { }, location = { "./src/item.h", 912 } },
        { name = "is_bucket", rval = "bool", args = { }, location = { "./src/item.h", 909 } },
        { name = "is_bucket_nonempty", rval = "bool", args = { }, location = { "./src/item.h", 910 } },
        { name = "is_comestible", rval = "bool", args = { }, location = { "./src/item.h", 892 } },
        { name = "is_container", rval = "bool", args = { }, comment = "Whether this is container. Note that container does not necessarily means it's      * suitable for liquids.", location = { "./src/item.h", 538 } },
        { name = "is_container_empty", rval = "bool", args = { }, comment = "Whether this item has no contents at all.", location = { "./src/item.h", 542 } },
        { name = "is_container_full", rval = "bool", args = { "bool" }, comment = "Whether this item has no more free capacity for its current content.      * @param allow_bucket Allow filling non-sealable containers", location = { "./src/item.h", 549 } },
        { name = "is_container_full", rval = "bool", args = { }, comment = "Whether this item has no more free capacity for its current content.      * @param allow_bucket Allow filling non-sealable containers", location = { "./src/item.h", 549 } },
        { name = "is_corpse", rval = "bool", args = { }, comment = "Whether this is a corpse item. Corpses always have valid monster type (@ref corpse)          * associated (@ref get_mtype return a non-null pointer) and have been created          * with @ref make_corpse.", location = { "./src/item.h", 296 } },
        { name = "is_dangerous", rval = "bool", args = { }, location = { "./src/item.h", 948 } },
        { name = "is_emissive", rval = "bool", args = { }, comment = "Whether the item emits any light at all.", location = { "./src/item.h", 1170 } },
        { name = "is_engine", rval = "bool", args = { }, location = { "./src/item.h", 913 } },
        { name = "is_faulty", rval = "bool", args = { }, location = { "./src/item.h", 918 } },
        { name = "is_filthy", rval = "bool", args = { }, comment = "Marks the item as filthy, so characters with squeamish trait can't wear it.", location = { "./src/item.h", 834 } },
        { name = "is_firearm", rval = "bool", args = { }, comment = "Does it require gunsmithing tools to repair.", location = { "./src/item.h", 1577 } },
        { name = "is_food", rval = "bool", args = { }, location = { "./src/item.h", 893 } },
        { name = "is_food_container", rval = "bool", args = { }, location = { "./src/item.h", 894 } },
        { name = "is_fresh", rval = "bool", args = { }, comment = "an item is fresh if it is capable of rotting but still has a long shelf life remaining", location = { "./src/item.h", 647 } },
        { name = "is_fuel", rval = "bool", args = { }, location = { "./src/item.h", 915 } },
        { name = "is_funnel_container", rval = "bool", args = { "units::volume" }, comment = "Funnel related functions. See weather.cpp for their usage.", location = { "./src/item.h", 601 } },
        { name = "is_going_bad", rval = "bool", args = { }, comment = "an item is about to become rotten when shelf life has nearly elapsed", location = { "./src/item.h", 650 } },
        { name = "is_gun", rval = "bool", args = { }, comment = "Can this item be used to perform a ranged attack?          *  @see item::is_melee()          *  @note an item can be both a gun and melee weapon concurrently", location = { "./src/item.h", 1366 } },
        { name = "is_gunmod", rval = "bool", args = { }, location = { "./src/item.h", 1359 } },
        { name = "is_magazine", rval = "bool", args = { }, location = { "./src/item.h", 898 } },
        { name = "is_medication", rval = "bool", args = { }, location = { "./src/item.h", 896 } },
        { name = "is_melee", rval = "bool", args = { "damage_type" }, comment = "Is this item an effective melee weapon for the given damage type?", location = { "./src/item.h", 473 } },
        { name = "is_melee", rval = "bool", args = { }, comment = "Is this item an effective melee weapon for any damage type?      *  @see item::is_gun()      *  @note an item can be both a gun and melee weapon concurrently", location = { "./src/item.h", 480 } },
        { name = "is_non_resealable_container", rval = "bool", args = { }, comment = "Whether removing this item's contents will permanently alter it.", location = { "./src/item.h", 544 } },
        { name = "is_null", rval = "bool", args = { }, location = { "./src/item.h", 891 } },
        { name = "is_power_armor", rval = "bool", args = { }, comment = "Whether this is a power armor item. Not necessarily the main armor, it could be a helmet          * or similar.", location = { "./src/item.h", 1287 } },
        { name = "is_reloadable", rval = "bool", args = { }, comment = "Is it ever possible to reload this item?          * Only the base item is considered with any mods ignored          * @see player::can_reload()", location = { "./src/item.h", 944 } },
        { name = "is_reloadable_with", rval = "bool", args = { "std::string" }, comment = "Returns true if this item can be reloaded with specified ammo type.", location = { "./src/item.h", 946 } },
        { name = "is_salvageable", rval = "bool", args = { }, location = { "./src/item.h", 904 } },
        { name = "is_seed", rval = "bool", args = { }, comment = "Whether this is actually a seed, the seed functions won't be of much use for non-seeds.", location = { "./src/item.h", 1180 } },
        { name = "is_sided", rval = "bool", args = { }, comment = "Returns true if item is armor and can be worn on different sides of the body", location = { "./src/item.h", 1230 } },
        { name = "is_silent", rval = "bool", args = { }, comment = "Whether this is a (nearly) silent gun (a tiny bit of sound is allowed). Non-guns are always silent.", location = { "./src/item.h", 1525 } },
        { name = "is_soft", rval = "bool", args = { }, comment = "Is this item flexible enough to be worn on body parts like antlers?", location = { "./src/item.h", 956 } },
        { name = "is_tainted", rval = "bool", args = { }, comment = "Is item derived from a zombie?", location = { "./src/item.h", 951 } },
        { name = "is_tool", rval = "bool", args = { }, location = { "./src/item.h", 906 } },
        { name = "is_tool_reversible", rval = "bool", args = { }, location = { "./src/item.h", 907 } },
        { name = "is_toolmod", rval = "bool", args = { }, location = { "./src/item.h", 916 } },
        { name = "is_two_handed", rval = "bool", args = { "player" }, comment = "Whether the character needs both hands to wield this item.", location = { "./src/item.h", 470 } },
        { name = "is_watertight_container", rval = "bool", args = { }, comment = "Whether this is a container which can be used to store liquids.", location = { "./src/item.h", 540 } },
        { name = "is_wheel", rval = "bool", args = { }, location = { "./src/item.h", 914 } },
        { name = "is_worn_only_with", rval = "bool", args = { "item" }, comment = "Returns true whether this item can be worn only when @param it is worn.", location = { "./src/item.h", 1296 } },
        { name = "label", rval = "std::string", args = { "int" }, comment = "Returns label from 'item_label' itemvar and quantity", location = { "./src/item.h", 1652 } },
        { name = "label", rval = "std::string", args = { }, comment = "Returns label from 'item_label' itemvar and quantity", location = { "./src/item.h", 1652 } },
        { name = "lift_strength", rval = "int", args = { }, comment = "Required strength to be able to successfully lift the item unaided by equipment", location = { "./src/item.h", 443 } },
        { name = "load_info", rval = nil, args = { "std::string" }, location = { "./src/item.h", 414 } },
        { name = "made_of", rval = "bool", args = { "material_id" }, comment = "Check we are made of this material (e.g. matches at least one      * in our set.)", location = { "./src/item.h", 738 } },
        { name = "made_of", rval = "bool", args = { "phase_id" }, comment = "Are we solid, liquid, gas, plasma?", location = { "./src/item.h", 742 } },
        { name = "made_of", rval = "std::vector<material_id>", args = { }, comment = "The ids of all the materials this is made of.      * This may return an empty vector.      * The returned vector does not contain the null id.", location = { "./src/item.h", 717 } },
        { name = "made_of_any", rval = "bool", args = { "std::set<material_id>" }, comment = "Check we are made of at least one of a set (e.g. true if at least      * one item of the passed in set matches any material).      * @param mat_idents Set of material ids.", location = { "./src/item.h", 727 } },
        { name = "magazine_compatible", rval = "std::set<std::string>", args = { "bool" }, comment = "Get compatible magazines (if any) for this item          *  @param conversion whether to include the effect of any flags or mods which convert item's ammo type          *  @return magazine compatibility which is always empty if item has integral magazine          *  @see item::magazine_integral", location = { "./src/item.h", 1433 } },
        { name = "magazine_compatible", rval = "std::set<std::string>", args = { }, comment = "Get compatible magazines (if any) for this item          *  @param conversion whether to include the effect of any flags or mods which convert item's ammo type          *  @return magazine compatibility which is always empty if item has integral magazine          *  @see item::magazine_integral", location = { "./src/item.h", 1433 } },
        { name = "magazine_convert", rval = "std::vector<item>", args = { }, comment = "Normalizes an item to use the new magazine system. Indempotent if item already converted.          *  @return items that were created as a result of the conversion (excess ammo or magazines)", location = { "./src/item.h", 1444 } },
        { name = "magazine_current", rval = "item&", args = { }, comment = "Currently loaded magazine (if any)          *  @return current magazine or nullptr if either no magazine loaded or item has integral magazine          *  @see item::magazine_integral", location = { "./src/item.h", 1439 } },
        { name = "magazine_default", rval = "std::string", args = { "bool" }, comment = "Get the default magazine type (if any) for the current effective ammo type          *  @param conversion whether to include the effect of any flags or mods which convert item's ammo type          *  @return magazine type or 'null' if item has integral magazine or no magazines for current ammo type", location = { "./src/item.h", 1426 } },
        { name = "magazine_default", rval = "std::string", args = { }, comment = "Get the default magazine type (if any) for the current effective ammo type          *  @param conversion whether to include the effect of any flags or mods which convert item's ammo type          *  @return magazine type or 'null' if item has integral magazine or no magazines for current ammo type", location = { "./src/item.h", 1426 } },
        { name = "magazine_integral", rval = "bool", args = { }, comment = "Does item have an integral magazine (as opposed to allowing detachable magazines)", location = { "./src/item.h", 1421 } },
        { name = "make_corpse", static = true, rval = "item", args = { "mtype_id" }, location = { "./src/item.h", 277 } },
        { name = "make_corpse", static = true, rval = "item", args = { "mtype_id", "int" }, location = { "./src/item.h", 277 } },
        { name = "make_corpse", static = true, rval = "item", args = { "mtype_id", "int", "std::string" }, location = { "./src/item.h", 277 } },
        { name = "make_corpse", static = true, rval = "item", args = { }, location = { "./src/item.h", 277 } },
        { name = "mark_as_used_by_player", rval = nil, args = { "player" }, comment = "Marks the item as being used by this specific player, it remains unmarked      * for other players. The player is identified by its id.", location = { "./src/item.h", 831 } },
        { name = "mark_chapter_as_read", rval = nil, args = { "player" }, comment = "Mark one chapter of the book as read by the given player. May do nothing if the book has          * no unread chapters. This is a per-character setting, see @ref get_remaining_chapters.", location = { "./src/item.h", 1322 } },
        { name = "max_damage", rval = "int", args = { }, comment = "Maximum amount of damage to an item (state before destroyed)", location = { "./src/item.h", 794 } },
        { name = "max_quality", rval = "int", args = { "quality_id" }, comment = "Return maximum tool quality level provided by instance or INT_MIN if not found", location = { "./src/visitable.h", 72 } },
        { name = "melee_skill", rval = "skill_id", args = { }, comment = "The most relevant skill used with this melee weapon. Can be 'null' if this is not a weapon.      * Note this function returns null if the item is a gun for which you can use gun_skill() instead.", location = { "./src/item.h", 486 } },
        { name = "merge_charges", rval = "bool", args = { "item" }, comment = "Merge charges of the other item into this item.          * @return true if the items have been merged, otherwise false.          * Merging is only done for items counted by charges (@ref count_by_charges) and          * items that stack together (@ref stacks_with).", location = { "./src/item.h", 431 } },
        { name = "min_damage", rval = "int", args = { }, comment = "Minimum amount of damage to an item (state of maximum repair)", location = { "./src/item.h", 791 } },
        { name = "mitigate_damage", rval = nil, args = { "damage_unit" }, comment = "Assuming that specified du hit the armor, reduce du based on the item's resistance to the      * damage type. This will never reduce du.amount below 0.", location = { "./src/item.h", 774 } },
        { name = "mod_charges", rval = nil, args = { "int" }, comment = "Modify the charges of this item, only use for items counted by charges!      * The item must have enough charges for this (>= quantity) and be counted      * by charges.      * @param mod How many charges should be removed.", location = { "./src/item.h", 615 } },
        { name = "mod_damage", rval = "bool", args = { "float" }, comment = "Apply damage to item constrained by @ref min_damage and @ref max_damage      * @param qty maximum amount by which to adjust damage (negative permissible)      * @param dt type of damage which may be passed to @ref on_damage callback      * @return whether item should be destroyed", location = { "./src/item.h", 802 } },
        { name = "mod_damage", rval = "bool", args = { "float", "damage_type" }, comment = "Apply damage to item constrained by @ref min_damage and @ref max_damage      * @param qty maximum amount by which to adjust damage (negative permissible)      * @param dt type of damage which may be passed to @ref on_damage callback      * @return whether item should be destroyed", location = { "./src/item.h", 802 } },
        { name = "needs_processing", rval = "bool", args = { }, comment = "Whether the item should be processed (by calling @ref process).", location = { "./src/item.h", 876 } },
        { name = "nname", static = true, rval = "std::string", args = { "std::string" }, comment = "Returns the translated item name for the item with given id.          * The name is in the proper plural form as specified by the          * quantity parameter. This is roughly equivalent to creating an item instance and calling          * @ref tname, however this function does not include strings like '(fresh)'.", location = { "./src/item.h", 1623 } },
        { name = "nname", static = true, rval = "std::string", args = { "std::string", "int" }, comment = "Returns the translated item name for the item with given id.          * The name is in the proper plural form as specified by the          * quantity parameter. This is roughly equivalent to creating an item instance and calling          * @ref tname, however this function does not include strings like '(fresh)'.", location = { "./src/item.h", 1623 } },
        { name = "on_contents_changed", rval = nil, args = { }, comment = "Callback when contents of the item are affected in any way other than just processing.", location = { "./src/item.h", 1038 } },
        { name = "on_damage", rval = nil, args = { "float", "damage_type" }, comment = "Callback immediately **before** an item is damaged           * @param qty maximum damage that will be applied (constrained by @ref max_damage)           * @param dt type of damage (or DT_NULL)", location = { "./src/item.h", 1045 } },
        { name = "on_drop", rval = "bool", args = { "tripoint" }, comment = "Invokes item type's @ref itype::drop_action.      * This function can change the item.      * @param pos Where is the item being placed. Note: the item isn't there yet.      * @return true if the item was destroyed during placement.", location = { "./src/item.h", 513 } },
        { name = "on_pickup", rval = nil, args = { "Character" }, comment = "Callback when a player starts carrying the item. The item is already in the inventory          * and is called from there. This is not called when the item is added to the inventory          * from worn vector or weapon slot. The item is considered already carried.", location = { "./src/item.h", 1034 } },
        { name = "on_takeoff", rval = nil, args = { "Character" }, comment = "Callback when a character takes off an item. The item is still in the worn items          * vector but will be removed immediately after the function returns", location = { "./src/item.h", 1021 } },
        { name = "on_wear", rval = nil, args = { "Character" }, comment = "Callback when a character starts wearing the item. The item is already in the worn          * items vector and is called from there.", location = { "./src/item.h", 1016 } },
        { name = "on_wield", rval = nil, args = { "player" }, comment = "Callback when a player starts wielding the item. The item is already in the weapon          * slot and is called from there.          * @param p player that has started wielding item          * @param mv number of moves *already* spent wielding the weapon", location = { "./src/item.h", 1028 } },
        { name = "on_wield", rval = nil, args = { "player", "int" }, comment = "Callback when a player starts wielding the item. The item is already in the weapon          * slot and is called from there.          * @param p player that has started wielding item          * @param mv number of moves *already* spent wielding the weapon", location = { "./src/item.h", 1028 } },
        { name = "only_made_of", rval = "bool", args = { "std::set<material_id>" }, comment = "Check we are made of only the materials (e.g. false if we have      * one material not in the set or no materials at all).      * @param mat_idents Set of material ids.", location = { "./src/item.h", 733 } },
        { name = "price", rval = "int", args = { "bool" }, comment = "Returns the monetary value of an item.          * If `practical` is false, returns pre-cataclysm market value,          * otherwise returns approximate post-cataclysm value.", location = { "./src/item.h", 421 } },
        { name = "process", rval = "bool", args = { "player", "tripoint", "bool" }, comment = "This is called once each turn. It's usually only useful for active items,      * but can be called for inactive items without problems.      * It is recursive, and calls process on any contained items.      * @param carrier The player / npc that carries the item. This can be null when      * the item is not carried by anyone (laying on ground)!      * @param pos The location of the item on the map, same system as      * @ref player::pos used. If the item is carried, it should be the      * location of the carrier.      * @param activate Whether the item should be activated (true), or      * processed as an active item.      * @return true if the item has been destroyed by the processing. The caller      * should than delete the item wherever it was stored.      * Returns false if the item is not destroyed.", location = { "./src/item.h", 850 } },
        { name = "process_artifact", rval = nil, args = { "player", "tripoint" }, comment = "Process and apply artifact effects. This should be called exactly once each turn, it may      * modify character stats (like speed, strength, ...), so call it after those have been reset.      * @param carrier The character carrying the artifact, can be null.      * @param pos The location of the artifact (should be the player location if carried).", location = { "./src/item.h", 887 } },
        { name = "processing_speed", rval = "int", args = { }, comment = "The rate at which an item should be processed, in number of turns between updates.", location = { "./src/item.h", 880 } },
        { name = "put_in", rval = nil, args = { "item" }, comment = "Puts the given item into this one, no checks are performed.", location = { "./src/item.h", 577 } },
        { name = "reach_range", rval = "int", args = { "player" }, comment = "Max range weapon usable for melee attack accounting for player/NPC abilities", location = { "./src/item.h", 490 } },
        { name = "ready_to_revive", rval = "bool", args = { "tripoint" }, comment = "Whether this corpse should revive now. Note that this function includes some randomness,          * the return value can differ on successive calls.          * @param pos The location of the item (see REVIVE_SPECIAL flag).", location = { "./src/item.h", 306 } },
        { name = "remove_item", rval = "item", args = { "item" }, comment = "Removes and returns the item which must be contained by this instance", location = { "./src/visitable.h", 111 } },
        { name = "repaired_with", rval = "std::set<std::string>", args = { }, comment = "If possible to repair this item what tools could potentially be used for this purpose?", location = { "./src/item.h", 820 } },
        { name = "reset_cable", rval = nil, args = { "player" }, comment = "Helper to bring a cable back to its initial state.", location = { "./src/item.h", 871 } },
        { name = "rotten", rval = "bool", args = { }, comment = "returns true if item is now rotten after all shelf life has elapsed", location = { "./src/item.h", 653 } },
        { name = "set_countdown", rval = nil, args = { "int" }, comment = "Sets time until activation for an item that will self-activate in the future.", location = { "./src/item.h", 495 } },
        { name = "set_damage", rval = "item&", args = { "float" }, comment = "Filter setting damage constrained by @ref min_damage and @ref max_damage          * @note this method does not invoke the @ref on_damage callback          * @return same instance to allow method chaining", location = { "./src/item.h", 253 } },
        { name = "set_flag", rval = "item&", args = { "std::string" }, comment = "Idempotent filter setting an item specific flag.", location = { "./src/item.h", 1122 } },
        { name = "set_mtype", rval = nil, args = { "mtype" }, comment = "Sets the monster type associated with this item (@ref corpse). You must not pass a          * null pointer.          * TODO: change this to take a reference instead.", location = { "./src/item.h", 290 } },
        { name = "set_relative_rot", rval = nil, args = { "float" }, comment = "Set current item @ref rot relative to shelf life (no-op if item does not spoil)", location = { "./src/item.h", 633 } },
        { name = "set_side", rval = "bool", args = { "side" }, comment = "Change the side on which the item is worn. Returns false if the item is not sided", location = { "./src/item.h", 1238 } },
        { name = "set_snippet", rval = nil, args = { "std::string" }, comment = "Set the snippet text (description) of this specific item, using the snippet library.      * @see snippet_library.", location = { "./src/item.h", 975 } },
        { name = "set_var", rval = nil, args = { "std::string", "float" }, location = { "./src/item.h", 1092 } },
        { name = "set_var", rval = nil, args = { "std::string", "int" }, location = { "./src/item.h", 1090 } },
        { name = "set_var", rval = nil, args = { "std::string", "int" }, location = { "./src/item.h", 1091 } },
        { name = "set_var", rval = nil, args = { "std::string", "std::string" }, location = { "./src/item.h", 1094 } },
        { name = "sight_dispersion", rval = "int", args = { }, comment = "Get lowest dispersion of either integral or any attached sights", location = { "./src/item.h", 1511 } },
        { name = "spill_contents", rval = "bool", args = { "Character" }, comment = "Unloads the item's contents.          * @param c Character who receives the contents.          *          If c is the player, liquids will be handled, otherwise they will be spilled.          * @return If the item is now empty.", location = { "./src/item.h", 998 } },
        { name = "spill_contents", rval = "bool", args = { "tripoint" }, comment = "Unloads the item's contents.          * @param pos Position to dump the contents on.          * @return If the item is now empty.", location = { "./src/item.h", 1004 } },
        { name = "split", rval = "item", args = { "int" }, comment = "Splits a count-by-charges item always leaving source item with minimum of 1 charge          * @param qty number of required charges to split from source          * @return new instance containing exactly qty charges or null item if splitting failed", location = { "./src/item.h", 260 } },
        { name = "spoilage_sort_order", rval = "int", args = { }, comment = "Get time left to rot, ignoring fridge.      * Returns time to rot if item is able to, max int - N otherwise,      * where N is      * 3 for food,      * 2 for medication,      * 1 for other comestibles,      * 0 otherwise.", location = { "./src/item.h", 644 } },
        { name = "stab_resist", rval = "int", args = { "bool" }, location = { "./src/item.h", 765 } },
        { name = "stab_resist", rval = "int", args = { }, location = { "./src/item.h", 765 } },
        { name = "stacks_with", rval = "bool", args = { "item" }, location = { "./src/item.h", 424 } },
        { name = "swap_side", rval = "bool", args = { }, comment = "Swap the side on which the item is worn. Returns false if the item is not sided", location = { "./src/item.h", 1243 } },
        { name = "symbol", rval = "std::string", args = { }, location = { "./src/item.h", 415 } },
        { name = "tname", rval = "std::string", args = { "int" }, comment = "Return the (translated) item name.      * @param quantity used for translation to the proper plural form of the name, e.g.      * returns 'rock' for quantity 1 and 'rocks' for quantity > 0.      * @param with_prefix determines whether to include more item properties, such as      * the extent of damage and burning (was created to sort by name without prefix      * in additional inventory)", location = { "./src/item.h", 326 } },
        { name = "tname", rval = "std::string", args = { "int", "bool" }, comment = "Return the (translated) item name.      * @param quantity used for translation to the proper plural form of the name, e.g.      * returns 'rock' for quantity 1 and 'rocks' for quantity > 0.      * @param with_prefix determines whether to include more item properties, such as      * the extent of damage and burning (was created to sort by name without prefix      * in additional inventory)", location = { "./src/item.h", 326 } },
        { name = "tname", rval = "std::string", args = { }, comment = "Return the (translated) item name.      * @param quantity used for translation to the proper plural form of the name, e.g.      * returns 'rock' for quantity 1 and 'rocks' for quantity > 0.      * @param with_prefix determines whether to include more item properties, such as      * the extent of damage and burning (was created to sort by name without prefix      * in additional inventory)", location = { "./src/item.h", 326 } },
        { name = "typeId", rval = "std::string", args = { }, comment = "return the unique identifier of the items underlying type", location = { "./src/item.h", 983 } },
        { name = "type_is_defined", static = true, rval = "bool", args = { "std::string" }, comment = "Check whether the type id refers to a known type.          * This should be used either before instantiating an item when it's possible          * that the item type is unknown and the caller can do something about it (e.g. the          * uninstall-bionics function checks this to see if there is a CBM item type and has          * logic to handle the case when that item type does not exist).          * Or one can use this to check that type ids from json refer to valid items types (e.g.          * the items that make up the vehicle parts must be defined somewhere, or the result of          * crafting recipes must be valid type ids).", location = { "./src/item.h", 1643 } },
        { name = "type_name", rval = "std::string", args = { "int" }, comment = "Name of the item type (not the item), with proper plural.          * This is only special when the item itself has a special name ('name' entry in          * @ref item_tags) or is a named corpse.          * It's effectively the same as calling @ref nname with the item type id. Use this when          * the actual item is not meant, for example 'The shovel' instead of 'Your shovel'.          * Or 'The jacket is too small', when it applies to all jackets, not just the one the          * character tried to wear).", location = { "./src/item.h", 1056 } },
        { name = "type_name", rval = "std::string", args = { }, comment = "Name of the item type (not the item), with proper plural.          * This is only special when the item itself has a special name ('name' entry in          * @ref item_tags) or is a named corpse.          * It's effectively the same as calling @ref nname with the item type id. Use this when          * the actual item is not meant, for example 'The shovel' instead of 'Your shovel'.          * Or 'The jacket is too small', when it applies to all jackets, not just the one the          * character tried to wear).", location = { "./src/item.h", 1056 } },
        { name = "units_remaining", rval = "int", args = { "Character" }, comment = "How many units (ammo or charges) are remaining?          * @param ch character responsible for invoking the item          * @param limit stop searching after this many units found          * @note also checks availability of UPS charges if applicable", location = { "./src/item.h", 1608 } },
        { name = "units_remaining", rval = "int", args = { "Character", "int" }, comment = "How many units (ammo or charges) are remaining?          * @param ch character responsible for invoking the item          * @param limit stop searching after this many units found          * @note also checks availability of UPS charges if applicable", location = { "./src/item.h", 1608 } },
        { name = "units_sufficient", rval = "bool", args = { "Character" }, comment = "Check if item has sufficient units (ammo or charges) remaining          * @param ch Character to check (used if ammo is UPS charges)          * @param qty units required, if unspecified use item default", location = { "./src/item.h", 1615 } },
        { name = "units_sufficient", rval = "bool", args = { "Character", "int" }, comment = "Check if item has sufficient units (ammo or charges) remaining          * @param ch Character to check (used if ammo is UPS charges)          * @param qty units required, if unspecified use item default", location = { "./src/item.h", 1615 } },
        { name = "unset_flag", rval = "item&", args = { "std::string" }, comment = "Idempotent filter removing an item specific flag", location = { "./src/item.h", 1125 } },
        { name = "unset_flags", rval = nil, args = { }, comment = "Removes all item specific flags.", location = { "./src/item.h", 1128 } },
        { name = "volume", rval = "units::volume", args = { "bool" }, location = { "./src/item.h", 437 } },
        { name = "volume", rval = "units::volume", args = { }, location = { "./src/item.h", 437 } },
        { name = "weight", rval = "int", args = { "bool" }, location = { "./src/item.h", 433 } },
        { name = "weight", rval = "int", args = { }, location = { "./src/item.h", 433 } },
        { name = "wheel_area", rval = "int", args = { }, comment = "Returns the total area of this wheel or 0 if it isn't one.", location = { "./src/item.h", 924 } },
        { name = "will_explode_in_fire", rval = "bool", args = { }, location = { "./src/item.h", 685 } },
    }
}
classes['point'] = {
    parents = {
        "JsonSerializer",
        "JsonDeserializer",
    },
    new = {
        { "int", "int" },
        { "point" },
        { },
    },
    by_value = true,
    attributes = {
        x = { type = "int", writable = true },
        y = { type = "int", writable = true },
    },
}
classes['tripoint'] = {
    parents = {
        "JsonSerializer",
        "JsonDeserializer",
    },
    new = {
        { "int", "int", "int" },
        { "point", "int" },
        { "tripoint" },
        { },
    },
    by_value = true,
    attributes = {
        x = { type = "int", writable = true },
        y = { type = "int", writable = true },
        z = { type = "int", writable = true },
    },
}
classes['uimenu'] = {
    new = {
        { "std::string" },
        { },
    },
    by_value_and_reference = true,
    attributes = {
        border = { type = "bool", writable = true },
        border_color = { type = "int", writable = true },
        centered_scroll = { type = "bool", writable = true },
        desc_enabled = { type = "bool", writable = true },
        desc_lines = { type = "int", writable = true },
        disabled_color = { type = "int", writable = true },
        filter = { type = "std::string", writable = true },
        filtering = { type = "bool", writable = true },
        filtering_nocase = { type = "bool", writable = true },
        fselected = { type = "int", writable = true },
        hilight_color = { type = "int", writable = true },
        hilight_disabled = { type = "bool", writable = true },
        hilight_full = { type = "bool", writable = true },
        hotkey_color = { type = "int", writable = true },
        keypress = { type = "int", writable = true },
        max_desc_len = { type = "int", writable = true },
        max_entry_len = { type = "int", writable = true },
        pad_left = { type = "int", writable = true },
        pad_right = { type = "int", writable = true },
        ret = { type = "int", writable = true },
        return_invalid = { type = "bool", writable = true },
        scrollbar_auto = { type = "bool", writable = true },
        scrollbar_nopage_color = { type = "int", writable = true },
        scrollbar_page_color = { type = "int", writable = true },
        scrollbar_side = { type = "int", writable = true },
        selected = { type = "int", writable = true },
        shift_retval = { type = "int", writable = true },
        text = { type = "std::string", writable = true },
        text_color = { type = "int", writable = true },
        textalign = { type = "int", writable = true },
        textformatted = { type = "std::vector<std::string>", writable = true },
        textwidth = { type = "int", writable = true },
        title = { type = "std::string", writable = true },
        title_color = { type = "int", writable = true },
        vmax = { type = "int", writable = true },
        vshift = { type = "int", writable = true },
        w_height = { type = "int", writable = true },
        w_width = { type = "int", writable = true },
        w_x = { type = "int", writable = true },
        w_y = { type = "int", writable = true },
    },
    functions = {
        { name = "addentry", rval = nil, args = { "int", "bool", "int", "std::string" }, location = { "./src/ui.h", 216 } },
        { name = "addentry", rval = nil, args = { "std::string" }, location = { "./src/ui.h", 214 } },
        { name = "addentry_desc", rval = nil, args = { "int", "bool", "int", "std::string", "std::string" }, location = { "./src/ui.h", 219 } },
        { name = "addentry_desc", rval = nil, args = { "std::string", "std::string" }, location = { "./src/ui.h", 218 } },
        { name = "apply_scrollbar", rval = nil, args = { }, location = { "./src/ui.h", 210 } },
        { name = "filterlist", rval = nil, args = { }, location = { "./src/ui.h", 209 } },
        { name = "init", rval = nil, args = { }, location = { "./src/ui.h", 202 } },
        { name = "inputfilter", rval = "std::string", args = { }, location = { "./src/ui.h", 211 } },
        { name = "query", rval = nil, args = { "bool" }, location = { "./src/ui.h", 208 } },
        { name = "query", rval = nil, args = { }, location = { "./src/ui.h", 208 } },
        { name = "redraw", rval = nil, args = { "bool" }, location = { "./src/ui.h", 213 } },
        { name = "redraw", rval = nil, args = { }, location = { "./src/ui.h", 213 } },
        { name = "refresh", rval = nil, args = { "bool" }, location = { "./src/ui.h", 84 } },
        { name = "refresh", rval = nil, args = { }, location = { "./src/ui.h", 84 } },
        { name = "reset", rval = nil, args = { }, location = { "./src/ui.h", 223 } },
        { name = "scroll_amount_from_action", rval = "int", args = { "std::string" }, location = { "./src/ui.h", 207 } },
        { name = "scroll_amount_from_key", rval = "int", args = { "int" }, location = { "./src/ui.h", 206 } },
        { name = "scrollby", rval = "bool", args = { "int" }, location = { "./src/ui.h", 205 } },
        { name = "settext", rval = nil, args = { "std::string" }, location = { "./src/ui.h", 220 } },
        { name = "setup", rval = nil, args = { }, location = { "./src/ui.h", 203 } },
        { name = "show", rval = nil, args = { }, location = { "./src/ui.h", 204 } },
    }
}
classes['field_entry'] = {
    functions = {
        { name = "decays_on_actualize", rval = "bool", args = { }, location = { "./src/field.h", 190 } },
        { name = "getFieldAge", rval = "int", args = { }, location = { "./src/field.h", 154 } },
        { name = "getFieldDensity", rval = "int", args = { }, location = { "./src/field.h", 151 } },
        { name = "getFieldType", rval = "field_id", args = { }, location = { "./src/field.h", 148 } },
        { name = "isAlive", rval = "bool", args = { }, location = { "./src/field.h", 186 } },
        { name = "is_dangerous", rval = "bool", args = { }, location = { "./src/field.h", 173 } },
        { name = "mod_age", rval = "int", args = { "int" }, comment = "Adds a number to current age.", location = { "./src/field.h", 168 } },
        { name = "move_cost", rval = "int", args = { }, location = { "./src/field.h", 145 } },
        { name = "name", rval = "std::string", args = { }, location = { "./src/field.h", 180 } },
        { name = "setFieldAge", rval = "int", args = { "int" }, location = { "./src/field.h", 165 } },
        { name = "setFieldDensity", rval = "int", args = { "int" }, location = { "./src/field.h", 162 } },
        { name = "setFieldType", rval = "field_id", args = { "field_id" }, location = { "./src/field.h", 159 } },
    }
}
classes['field'] = {
    functions = {
        { name = "addField", rval = "bool", args = { "field_id" }, comment = "Inserts the given field_id into the field list for a given tile if it does not already exist.      * If you wish to modify an already existing field use findField and modify the result.      * Density defaults to 1, and age to 0 (permanent) if not specified.      * The density is added to an existing field entry, but the age is only used for newly added entries.      * @return false if the field_id already exists, true otherwise.", location = { "./src/field.h", 238 } },
        { name = "addField", rval = "bool", args = { "field_id", "int" }, comment = "Inserts the given field_id into the field list for a given tile if it does not already exist.      * If you wish to modify an already existing field use findField and modify the result.      * Density defaults to 1, and age to 0 (permanent) if not specified.      * The density is added to an existing field entry, but the age is only used for newly added entries.      * @return false if the field_id already exists, true otherwise.", location = { "./src/field.h", 238 } },
        { name = "addField", rval = "bool", args = { "field_id", "int", "int" }, comment = "Inserts the given field_id into the field list for a given tile if it does not already exist.      * If you wish to modify an already existing field use findField and modify the result.      * Density defaults to 1, and age to 0 (permanent) if not specified.      * The density is added to an existing field entry, but the age is only used for newly added entries.      * @return false if the field_id already exists, true otherwise.", location = { "./src/field.h", 238 } },
        { name = "fieldCount", rval = "int", args = { }, location = { "./src/field.h", 254 } },
        { name = "fieldSymbol", rval = "field_id", args = { }, comment = "Returns the id of the field that should be drawn.", location = { "./src/field.h", 259 } },
        { name = "findField", rval = "field_entry&", args = { "field_id" }, comment = "Returns a field entry corresponding to the field_id parameter passed in.      * If no fields are found then nullptr is returned.", location = { "./src/field.h", 219 } },
        { name = "findFieldc", rval = "field_entry&", args = { "field_id" }, comment = "Returns a field entry corresponding to the field_id parameter passed in.      * If no fields are found then nullptr is returned.", location = { "./src/field.h", 224 } },
        { name = "move_cost", rval = "int", args = { }, comment = "Returns the total move cost from all fields.", location = { "./src/field.h", 272 } },
        { name = "removeField", rval = "bool", args = { "field_id" }, comment = "Removes the field entry with a type equal to the field_id parameter.      * Make sure to decrement the field counter in the submap if (and only if) the      * function returns true.      * @return True if the field was removed, false if it did not exist in the first place.", location = { "./src/field.h", 246 } },
    }
}
classes['map'] = {
    functions = {
        { name = "accessible_furniture", rval = "bool", args = { "tripoint", "tripoint", "int" }, comment = "Like @ref accessible_items but checks for accessible furniture.      * It ignores the furniture flags of the target square (ignores if target is SEALED).", location = { "./src/map.h", 439 } },
        { name = "accessible_items", rval = "bool", args = { "tripoint", "tripoint", "int" }, comment = "Check whether items in the target square are accessible from the source square      * `f` and `t`.      *      * Checks two things:      * 1. The `sees()` algorithm between `f` and `t` OR origin and target match.      * 2. That the target location isn't sealed.", location = { "./src/map.h", 434 } },
        { name = "add_camp", rval = nil, args = { "tripoint", "std::string" }, location = { "./src/map.h", 1064 } },
        { name = "add_corpse", rval = nil, args = { "tripoint" }, location = { "./src/map.h", 723 } },
        { name = "add_field", rval = "bool", args = { "tripoint", "field_id", "int" }, comment = "Add field entry at point, or set density if present          * @return false if the field could not be created (out of bounds), otherwise true.", location = { "./src/map.h", 1024 } },
        { name = "add_field", rval = "bool", args = { "tripoint", "field_id", "int", "int" }, comment = "Add field entry at point, or set density if present          * @return false if the field could not be created (out of bounds), otherwise true.", location = { "./src/map.h", 1024 } },
        { name = "add_item", rval = "item&", args = { "tripoint", "item" }, comment = "Place an item on the map, despite the parameter name, this is not necessaraly a new item.      * WARNING: does -not- check volume or stack charges. player functions (drop etc) should use      * map::add_item_or_charges      *      * @returns The item that got added, or nulitem.", location = { "./src/map.h", 860 } },
        { name = "add_item", rval = nil, args = { "int", "int", "item" }, location = { "./src/map.h", 814 } },
        { name = "add_item_at", rval = "item&", args = { "tripoint", "std::list<item>::iterator", "item" }, comment = "Helper for map::add_item", location = { "./src/map.h", 852 } },
        { name = "add_item_or_charges", rval = "item&", args = { "int", "int", "item" }, location = { "./src/map.h", 812 } },
        { name = "add_item_or_charges", rval = "item&", args = { "int", "int", "item", "bool" }, location = { "./src/map.h", 812 } },
        { name = "add_item_or_charges", rval = "item&", args = { "tripoint", "item" }, comment = "Adds an item to map tile or stacks charges      *  @param pos Where to add item      *  @param obj Item to add      *  @param overflow if destination is full attempt to drop on adjacent tiles      *  @return reference to dropped (and possibly stacked) item or null item on failure      *  @warning function is relatively expensive and meant for user initiated actions, not mapgen", location = { "./src/map.h", 849 } },
        { name = "add_item_or_charges", rval = "item&", args = { "tripoint", "item", "bool" }, comment = "Adds an item to map tile or stacks charges      *  @param pos Where to add item      *  @param obj Item to add      *  @param overflow if destination is full attempt to drop on adjacent tiles      *  @return reference to dropped (and possibly stacked) item or null item on failure      *  @warning function is relatively expensive and meant for user initiated actions, not mapgen", location = { "./src/map.h", 849 } },
        { name = "add_spawn", rval = nil, args = { "mtype_id", "int", "int", "int" }, location = { "./src/map.h", 1121 } },
        { name = "add_spawn", rval = nil, args = { "mtype_id", "int", "int", "int", "bool" }, location = { "./src/map.h", 1121 } },
        { name = "add_spawn", rval = nil, args = { "mtype_id", "int", "int", "int", "bool", "int" }, location = { "./src/map.h", 1121 } },
        { name = "add_spawn", rval = nil, args = { "mtype_id", "int", "int", "int", "bool", "int", "int" }, location = { "./src/map.h", 1121 } },
        { name = "add_spawn", rval = nil, args = { "mtype_id", "int", "int", "int", "bool", "int", "int", "std::string" }, location = { "./src/map.h", 1121 } },
        { name = "add_splash", rval = nil, args = { "field_id", "tripoint", "int", "int" }, location = { "./src/map.h", 1033 } },
        { name = "add_splatter", rval = nil, args = { "field_id", "tripoint" }, location = { "./src/map.h", 1031 } },
        { name = "add_splatter", rval = nil, args = { "field_id", "tripoint", "int" }, location = { "./src/map.h", 1031 } },
        { name = "add_splatter_trail", rval = nil, args = { "field_id", "tripoint", "tripoint" }, location = { "./src/map.h", 1032 } },
        { name = "add_trap", rval = nil, args = { "tripoint", "trap_id" }, location = { "./src/map.h", 940 } },
        { name = "add_vehicle_to_cache", rval = nil, args = { "vehicle" }, location = { "./src/map.h", 463 } },
        { name = "adjust_field_age", rval = "int", args = { "tripoint", "field_id", "int" }, comment = "Increment/decrement age of field entry at point.          * @return resulting age or -1 if not present (does *not* create a new field).", location = { "./src/map.h", 987 } },
        { name = "adjust_field_strength", rval = "int", args = { "tripoint", "field_id", "int" }, comment = "Increment/decrement density of field entry at point, creating if not present,          * removing if density becomes 0.          * @return resulting density, or 0 for not present (either removed or not created at all).", location = { "./src/map.h", 993 } },
        { name = "adjust_radiation", rval = nil, args = { "int", "int", "int" }, location = { "./src/map.h", 790 } },
        { name = "adjust_radiation", rval = nil, args = { "tripoint", "int" }, comment = "Increment the radiation in the given tile by the given delta     *  (decrement it if delta is negative)", location = { "./src/map.h", 788 } },
        { name = "allow_camp", rval = "bool", args = { "tripoint" }, location = { "./src/map.h", 1062 } },
        { name = "allow_camp", rval = "bool", args = { "tripoint", "int" }, location = { "./src/map.h", 1062 } },
        { name = "ambient_light_at", rval = "float", args = { "tripoint" }, location = { "./src/map.h", 1144 } },
        { name = "bash_rating", rval = "int", args = { "int", "int", "int" }, location = { "./src/map.h", 657 } },
        { name = "bash_rating", rval = "int", args = { "int", "tripoint" }, comment = "Returns a success rating from -1 to 10 for a given tile based on a set strength, used for AI movement planning     *  Values roughly correspond to 10% increment chances of success on a given bash, rounded down. -1 means the square is not bashable", location = { "./src/map.h", 673 } },
        { name = "bash_rating", rval = "int", args = { "int", "tripoint", "bool" }, comment = "Returns a success rating from -1 to 10 for a given tile based on a set strength, used for AI movement planning     *  Values roughly correspond to 10% increment chances of success on a given bash, rounded down. -1 means the square is not bashable", location = { "./src/map.h", 673 } },
        { name = "bash_resistance", rval = "int", args = { "int", "int" }, location = { "./src/map.h", 656 } },
        { name = "bash_resistance", rval = "int", args = { "tripoint" }, comment = "Returns min_str of the furniture or terrain at p", location = { "./src/map.h", 670 } },
        { name = "bash_resistance", rval = "int", args = { "tripoint", "bool" }, comment = "Returns min_str of the furniture or terrain at p", location = { "./src/map.h", 670 } },
        { name = "bash_strength", rval = "int", args = { "int", "int" }, location = { "./src/map.h", 655 } },
        { name = "bash_strength", rval = "int", args = { "tripoint" }, comment = "Returns max_str of the furniture or terrain at p", location = { "./src/map.h", 668 } },
        { name = "bash_strength", rval = "int", args = { "tripoint", "bool" }, comment = "Returns max_str of the furniture or terrain at p", location = { "./src/map.h", 668 } },
        { name = "board_vehicle", rval = nil, args = { "tripoint", "player" }, location = { "./src/map.h", 505 } },
        { name = "build_floor_cache", rval = nil, args = { "int" }, location = { "./src/map.h", 1302 } },
        { name = "build_floor_caches", rval = nil, args = { }, location = { "./src/map.h", 1304 } },
        { name = "build_map_cache", rval = nil, args = { "int" }, location = { "./src/map.h", 1132 } },
        { name = "build_map_cache", rval = nil, args = { "int", "bool" }, location = { "./src/map.h", 1132 } },
        { name = "build_outside_cache", rval = nil, args = { "int" }, location = { "./src/map.h", 1301 } },
        { name = "can_move_furniture", rval = "bool", args = { "tripoint" }, location = { "./src/map.h", 566 } },
        { name = "can_move_furniture", rval = "bool", args = { "tripoint", "player" }, location = { "./src/map.h", 566 } },
        { name = "can_put_items", rval = "bool", args = { "tripoint" }, location = { "./src/map.h", 639 } },
        { name = "can_put_items_ter_furn", rval = "bool", args = { "int", "int" }, location = { "./src/map.h", 627 } },
        { name = "can_put_items_ter_furn", rval = "bool", args = { "tripoint" }, location = { "./src/map.h", 640 } },
        { name = "clear_path", rval = "bool", args = { "tripoint", "tripoint", "int", "int", "int" }, comment = "Check whether there's a direct line of sight between `F` and      * `T` with the additional movecost restraints.      *      * Checks two things:      * 1. The `sees()` algorithm between `F` and `T`      * 2. That moving over the line of sight would have a move_cost between      *    `cost_min` and `cost_max`.", location = { "./src/map.h", 416 } },
        { name = "clear_spawns", rval = nil, args = { }, location = { "./src/map.h", 318 } },
        { name = "clear_traps", rval = nil, args = { }, location = { "./src/map.h", 319 } },
        { name = "clear_vehicle_cache", rval = nil, args = { "int" }, location = { "./src/map.h", 466 } },
        { name = "clear_vehicle_list", rval = nil, args = { "int" }, location = { "./src/map.h", 467 } },
        { name = "climb_difficulty", rval = "int", args = { "tripoint" }, comment = "Checks 3x3 block centered on p for terrain to climb.      * @return Difficulty of climbing check from point p.", location = { "./src/map.h", 1077 } },
        { name = "clip_to_bounds", rval = nil, args = { "tripoint" }, comment = "Clips the coords of p to fit the map bounds", location = { "./src/map.h", 1198 } },
        { name = "close_door", rval = "bool", args = { "tripoint", "bool", "bool" }, location = { "./src/map.h", 729 } },
        { name = "collapse_at", rval = nil, args = { "tripoint", "bool" }, comment = "Causes a collapse at p, such as from destroying a wall", location = { "./src/map.h", 741 } },
        { name = "collapse_check", rval = "int", args = { "tripoint" }, comment = "Checks if a square should collapse, returns the X for the one_in(X) collapse chance", location = { "./src/map.h", 739 } },
        { name = "combined_movecost", rval = "int", args = { "tripoint", "tripoint" }, comment = "Cost to move out of one tile and into the next.     *     * @return The cost in turns to move out of tripoint `from` and into `to`", location = { "./src/map.h", 369 } },
        { name = "combined_movecost", rval = "int", args = { "tripoint", "tripoint", "vehicle" }, comment = "Cost to move out of one tile and into the next.     *     * @return The cost in turns to move out of tripoint `from` and into `to`", location = { "./src/map.h", 369 } },
        { name = "combined_movecost", rval = "int", args = { "tripoint", "tripoint", "vehicle", "int" }, comment = "Cost to move out of one tile and into the next.     *     * @return The cost in turns to move out of tripoint `from` and into `to`", location = { "./src/map.h", 369 } },
        { name = "combined_movecost", rval = "int", args = { "tripoint", "tripoint", "vehicle", "int", "bool" }, comment = "Cost to move out of one tile and into the next.     *     * @return The cost in turns to move out of tripoint `from` and into `to`", location = { "./src/map.h", 369 } },
        { name = "coord_to_angle", rval = "int", args = { "int", "int", "int", "int" }, location = { "./src/map.h", 460 } },
        { name = "could_see_items", rval = "bool", args = { "tripoint", "Creature" }, comment = "Check if the creature could see items at p if there were      * any items. This is similar to @ref sees_some_items, but it      * does not check that there are actually any items.", location = { "./src/map.h", 607 } },
        { name = "create_anomaly", rval = nil, args = { "int", "int", "artifact_natural_property" }, location = { "./src/map.h", 821 } },
        { name = "create_anomaly", rval = nil, args = { "tripoint", "artifact_natural_property" }, location = { "./src/map.h", 924 } },
        { name = "creature_in_field", rval = nil, args = { "Creature" }, comment = "Apply field effects to the creature when it's on a square with fields.", location = { "./src/map.h", 951 } },
        { name = "creature_on_trap", rval = nil, args = { "Creature" }, comment = "Apply trap effects to the creature, similar to @ref creature_in_field.          * If there is no trap at the creatures location, nothing is done.          * If the creature can avoid the trap, nothing is done as well.          * Otherwise the trap is triggered.          * @param critter Creature that just got trapped          * @param may_avoid If true, the creature tries to avoid the trap          * (@ref Creature::avoid_trap). If false, the trap is always triggered.", location = { "./src/map.h", 961 } },
        { name = "creature_on_trap", rval = nil, args = { "Creature", "bool" }, comment = "Apply trap effects to the creature, similar to @ref creature_in_field.          * If there is no trap at the creatures location, nothing is done.          * If the creature can avoid the trap, nothing is done as well.          * Otherwise the trap is triggered.          * @param critter Creature that just got trapped          * @param may_avoid If true, the creature tries to avoid the trap          * (@ref Creature::avoid_trap). If false, the trap is always triggered.", location = { "./src/map.h", 961 } },
        { name = "crush", rval = nil, args = { "tripoint" }, location = { "./src/map.h", 736 } },
        { name = "debug", rval = nil, args = { }, location = { "./src/map.h", 196 } },
        { name = "decay_fields_and_scent", rval = nil, args = { "int" }, comment = "Moved here from weather.cpp for speed. Decays fire, washable fields and scent.     * Washable fields are decayed only by 1/3 of the amount fire is.", location = { "./src/map.h", 772 } },
        { name = "delete_graffiti", rval = nil, args = { "tripoint" }, location = { "./src/map.h", 1070 } },
        { name = "delete_signage", rval = nil, args = { "tripoint" }, location = { "./src/map.h", 777 } },
        { name = "destroy", rval = nil, args = { "tripoint" }, comment = "Keeps bashing a square until it can't be bashed anymore", location = { "./src/map.h", 733 } },
        { name = "destroy", rval = nil, args = { "tripoint", "bool" }, comment = "Keeps bashing a square until it can't be bashed anymore", location = { "./src/map.h", 733 } },
        { name = "destroy_furn", rval = nil, args = { "tripoint" }, comment = "Keeps bashing a square until there is no more furniture", location = { "./src/map.h", 735 } },
        { name = "destroy_furn", rval = nil, args = { "tripoint", "bool" }, comment = "Keeps bashing a square until there is no more furniture", location = { "./src/map.h", 735 } },
        { name = "destroy_vehicle", rval = nil, args = { "vehicle" }, location = { "./src/map.h", 472 } },
        { name = "disarm_trap", rval = nil, args = { "tripoint" }, location = { "./src/map.h", 941 } },
        { name = "disp_name", rval = "std::string", args = { "tripoint" }, location = { "./src/map.h", 553 } },
        { name = "displace_vehicle", rval = "vehicle&", args = { "tripoint", "tripoint" }, location = { "./src/map.h", 509 } },
        { name = "displace_water", rval = "bool", args = { "tripoint" }, location = { "./src/map.h", 511 } },
        { name = "draw_circle_furn", rval = nil, args = { "furn_id", "int", "int", "int" }, location = { "./src/map.h", 721 } },
        { name = "draw_circle_ter", rval = nil, args = { "ter_id", "float", "float", "float" }, location = { "./src/map.h", 719 } },
        { name = "draw_circle_ter", rval = nil, args = { "ter_id", "int", "int", "int" }, location = { "./src/map.h", 720 } },
        { name = "draw_fill_background", rval = nil, args = { "ter_id" }, location = { "./src/map.h", 709 } },
        { name = "draw_line_furn", rval = nil, args = { "furn_id", "int", "int", "int", "int" }, location = { "./src/map.h", 708 } },
        { name = "draw_line_ter", rval = nil, args = { "ter_id", "int", "int", "int", "int" }, location = { "./src/map.h", 707 } },
        { name = "draw_rough_circle_furn", rval = nil, args = { "furn_id", "int", "int", "int" }, location = { "./src/map.h", 718 } },
        { name = "draw_rough_circle_ter", rval = nil, args = { "ter_id", "int", "int", "int" }, location = { "./src/map.h", 717 } },
        { name = "draw_square_furn", rval = nil, args = { "furn_id", "int", "int", "int", "int" }, location = { "./src/map.h", 714 } },
        { name = "draw_square_ter", rval = nil, args = { "ter_id", "int", "int", "int", "int" }, location = { "./src/map.h", 713 } },
        { name = "drop_everything", rval = nil, args = { "tripoint" }, location = { "./src/map.h", 1099 } },
        { name = "drop_fields", rval = nil, args = { "tripoint" }, location = { "./src/map.h", 1103 } },
        { name = "drop_furniture", rval = nil, args = { "tripoint" }, location = { "./src/map.h", 1100 } },
        { name = "drop_items", rval = nil, args = { "tripoint" }, location = { "./src/map.h", 1101 } },
        { name = "drop_vehicle", rval = nil, args = { "tripoint" }, location = { "./src/map.h", 1102 } },
        { name = "examine", rval = nil, args = { "Character", "tripoint" }, comment = "Calls the examine function of furniture or terrain at given tile, for given character.      * Will only examine terrain if furniture had @ref iexamine::none as the examine function.", location = { "./src/map.h", 617 } },
        { name = "features", rval = "std::string", args = { "int", "int" }, location = { "./src/map.h", 625 } },
        { name = "features", rval = "std::string", args = { "tripoint" }, location = { "./src/map.h", 637 } },
        { name = "field_at", rval = "field&", args = { "tripoint" }, comment = "Gets fields that are here. Both for querying and edition.", location = { "./src/map.h", 972 } },
        { name = "find_clear_path", rval = "std::vector<tripoint>", args = { "tripoint", "tripoint" }, comment = "Iteratively tries bresenham lines with different biases      * until it finds a clear line or decides there isn't one.      * returns the line found, which may be the staright line, but blocked.", location = { "./src/map.h", 424 } },
        { name = "flammable_items_at", rval = "bool", args = { "tripoint" }, comment = "Checks if there are any flammable items on the tile.      * @param p tile to check      * @param threshold Fuel threshold (lower means worse fuels are accepted).", location = { "./src/map.h", 703 } },
        { name = "flammable_items_at", rval = "bool", args = { "tripoint", "int" }, comment = "Checks if there are any flammable items on the tile.      * @param p tile to check      * @param threshold Fuel threshold (lower means worse fuels are accepted).", location = { "./src/map.h", 703 } },
        { name = "free_volume", rval = "units::volume", args = { "tripoint" }, location = { "./src/map.h", 838 } },
        { name = "furn", rval = "furn_id", args = { "int", "int" }, location = { "./src/map.h", 544 } },
        { name = "furn", rval = "furn_id", args = { "tripoint" }, location = { "./src/map.h", 561 } },
        { name = "furn_set", rval = nil, args = { "int", "int", "furn_id" }, location = { "./src/map.h", 546 } },
        { name = "furn_set", rval = nil, args = { "tripoint", "furn_id" }, location = { "./src/map.h", 563 } },
        { name = "furnname", rval = "std::string", args = { "int", "int" }, location = { "./src/map.h", 548 } },
        { name = "furnname", rval = "std::string", args = { "tripoint" }, location = { "./src/map.h", 565 } },
        { name = "generate", rval = nil, args = { "int", "int", "int", "int" }, location = { "./src/map.h", 1112 } },
        { name = "get_abs_sub", rval = "tripoint", args = { }, comment = "return @ref abs_sub", location = { "./src/map.h", 1168 } },
        { name = "get_dir_circle", rval = "std::vector<tripoint>", args = { "tripoint", "tripoint" }, comment = "Calculate next search points surrounding the current position.   * Points closer to the target come first.   * This method leads to straighter lines and prevents weird looking movements away from the target.", location = { "./src/map.h", 446 } },
        { name = "get_field", rval = "field_entry&", args = { "tripoint", "field_id" }, comment = "Get field of specific type at point.          * @return NULL if there is no such field entry at that place.", location = { "./src/map.h", 1019 } },
        { name = "get_field_age", rval = "int", args = { "tripoint", "field_id" }, comment = "Get the age of a field entry (@ref field_entry::age), if there is no          * field of that type, returns -1.", location = { "./src/map.h", 977 } },
        { name = "get_field_strength", rval = "int", args = { "tripoint", "field_id" }, comment = "Get the density of a field entry (@ref field_entry::density),          * if there is no field of that type, returns 0.", location = { "./src/map.h", 982 } },
        { name = "get_harvest_names", rval = "std::set<std::string>", args = { "tripoint" }, comment = "Returns names of the items that would be dropped.", location = { "./src/map.h", 582 } },
        { name = "get_radiation", rval = "int", args = { "tripoint" }, location = { "./src/map.h", 780 } },
        { name = "get_signage", rval = "std::string", args = { "tripoint" }, location = { "./src/map.h", 775 } },
        { name = "get_ter_transforms_into", rval = "ter_id", args = { "tripoint" }, location = { "./src/map.h", 583 } },
        { name = "getabs", rval = "point", args = { "int", "int" }, comment = "Translates local (to this map) coordinates of a square to      * global absolute coordinates. (x,y) is in the system that      * is used by the ter/furn/i_at functions.      * Output is in the same scale, but in global system.", location = { "./src/map.h", 1175 } },
        { name = "getabs", rval = "point", args = { "point" }, location = { "./src/map.h", 1176 } },
        { name = "getabs", rval = "tripoint", args = { "tripoint" }, comment = "Translates tripoint in local coords (near player) to global,      * just as the 2D variant of the function.      * z-coord remains unchanged (it is always global).", location = { "./src/map.h", 1182 } },
        { name = "getlocal", rval = "point", args = { "int", "int" }, comment = "Inverse of @ref getabs", location = { "./src/map.h", 1186 } },
        { name = "getlocal", rval = "point", args = { "point" }, location = { "./src/map.h", 1187 } },
        { name = "getlocal", rval = "tripoint", args = { "tripoint" }, location = { "./src/map.h", 1188 } },
        { name = "getmapsize", rval = "int", args = { }, location = { "./src/map.h", 1202 } },
        { name = "graffiti_at", rval = "std::string", args = { "tripoint" }, location = { "./src/map.h", 1068 } },
        { name = "has_adjacent_furniture", rval = "bool", args = { "tripoint" }, location = { "./src/map.h", 762 } },
        { name = "has_flag", rval = "bool", args = { "std::string", "int", "int" }, location = { "./src/map.h", 626 } },
        { name = "has_flag", rval = "bool", args = { "std::string", "tripoint" }, location = { "./src/map.h", 638 } },
        { name = "has_flag", rval = "bool", args = { "ter_bitflags", "int", "int" }, location = { "./src/map.h", 632 } },
        { name = "has_flag", rval = "bool", args = { "ter_bitflags", "tripoint" }, location = { "./src/map.h", 645 } },
        { name = "has_flag_furn", rval = "bool", args = { "std::string", "int", "int" }, location = { "./src/map.h", 629 } },
        { name = "has_flag_furn", rval = "bool", args = { "std::string", "tripoint" }, location = { "./src/map.h", 642 } },
        { name = "has_flag_furn", rval = "bool", args = { "ter_bitflags", "int", "int" }, location = { "./src/map.h", 634 } },
        { name = "has_flag_furn", rval = "bool", args = { "ter_bitflags", "tripoint" }, location = { "./src/map.h", 647 } },
        { name = "has_flag_ter", rval = "bool", args = { "std::string", "int", "int" }, location = { "./src/map.h", 628 } },
        { name = "has_flag_ter", rval = "bool", args = { "std::string", "tripoint" }, location = { "./src/map.h", 641 } },
        { name = "has_flag_ter", rval = "bool", args = { "ter_bitflags", "int", "int" }, location = { "./src/map.h", 633 } },
        { name = "has_flag_ter", rval = "bool", args = { "ter_bitflags", "tripoint" }, location = { "./src/map.h", 646 } },
        { name = "has_flag_ter_or_furn", rval = "bool", args = { "std::string", "int", "int" }, location = { "./src/map.h", 630 } },
        { name = "has_flag_ter_or_furn", rval = "bool", args = { "std::string", "tripoint" }, location = { "./src/map.h", 643 } },
        { name = "has_flag_ter_or_furn", rval = "bool", args = { "ter_bitflags", "int", "int" }, location = { "./src/map.h", 635 } },
        { name = "has_flag_ter_or_furn", rval = "bool", args = { "ter_bitflags", "tripoint" }, location = { "./src/map.h", 648 } },
        { name = "has_floor", rval = "bool", args = { "tripoint" }, location = { "./src/map.h", 1089 } },
        { name = "has_floor_or_support", rval = "bool", args = { "tripoint" }, location = { "./src/map.h", 1092 } },
        { name = "has_furn", rval = "bool", args = { "int", "int" }, location = { "./src/map.h", 542 } },
        { name = "has_furn", rval = "bool", args = { "tripoint" }, location = { "./src/map.h", 559 } },
        { name = "has_graffiti_at", rval = "bool", args = { "tripoint" }, location = { "./src/map.h", 1067 } },
        { name = "has_items", rval = "bool", args = { "tripoint" }, comment = "Checks for existence of items. Faster than i_at(p).empty", location = { "./src/map.h", 611 } },
        { name = "has_nearby_fire", rval = "bool", args = { "tripoint" }, location = { "./src/map.h", 592 } },
        { name = "has_nearby_fire", rval = "bool", args = { "tripoint", "int" }, location = { "./src/map.h", 592 } },
        { name = "has_zlevels", rval = "bool", args = { }, location = { "./src/map.h", 1203 } },
        { name = "hit_with_acid", rval = "bool", args = { "tripoint" }, location = { "./src/map.h", 759 } },
        { name = "hit_with_fire", rval = "bool", args = { "tripoint" }, location = { "./src/map.h", 760 } },
        { name = "i_at", rval = "map_stack", args = { "int", "int" }, location = { "./src/map.h", 803 } },
        { name = "i_at", rval = "map_stack", args = { "tripoint" }, location = { "./src/map.h", 824 } },
        { name = "i_clear", rval = nil, args = { "int", "int" }, location = { "./src/map.h", 804 } },
        { name = "i_clear", rval = nil, args = { "tripoint" }, location = { "./src/map.h", 826 } },
        { name = "i_rem", rval = "int", args = { "int", "int", "int" }, location = { "./src/map.h", 806 } },
        { name = "i_rem", rval = "int", args = { "tripoint", "int" }, location = { "./src/map.h", 830 } },
        { name = "i_rem", rval = "std::list<item>::iterator", args = { "point", "std::list<item>::iterator" }, location = { "./src/map.h", 805 } },
        { name = "i_rem", rval = "std::list<item>::iterator", args = { "tripoint", "std::list<item>::iterator" }, location = { "./src/map.h", 829 } },
        { name = "i_rem", rval = nil, args = { "int", "int", "item" }, location = { "./src/map.h", 807 } },
        { name = "i_rem", rval = nil, args = { "tripoint", "item" }, location = { "./src/map.h", 831 } },
        { name = "impassable", rval = "bool", args = { "int", "int" }, location = { "./src/map.h", 333 } },
        { name = "impassable", rval = "bool", args = { "tripoint" }, location = { "./src/map.h", 354 } },
        { name = "impassable_ter_furn", rval = "bool", args = { "tripoint" }, location = { "./src/map.h", 361 } },
        { name = "inbounds", rval = "bool", args = { "int", "int" }, location = { "./src/map.h", 1189 } },
        { name = "inbounds", rval = "bool", args = { "int", "int", "int" }, location = { "./src/map.h", 1190 } },
        { name = "inbounds", rval = "bool", args = { "tripoint" }, location = { "./src/map.h", 1191 } },
        { name = "inbounds_z", rval = "bool", args = { "int" }, location = { "./src/map.h", 1193 } },
        { name = "is_bashable", rval = "bool", args = { "int", "int" }, location = { "./src/map.h", 651 } },
        { name = "is_bashable", rval = "bool", args = { "tripoint" }, comment = "Returns true if there is a bashable vehicle part or the furn/terrain is bashable at p", location = { "./src/map.h", 660 } },
        { name = "is_bashable", rval = "bool", args = { "tripoint", "bool" }, comment = "Returns true if there is a bashable vehicle part or the furn/terrain is bashable at p", location = { "./src/map.h", 660 } },
        { name = "is_bashable_furn", rval = "bool", args = { "int", "int" }, location = { "./src/map.h", 653 } },
        { name = "is_bashable_furn", rval = "bool", args = { "tripoint" }, comment = "Returns true if the furniture at p is bashable", location = { "./src/map.h", 664 } },
        { name = "is_bashable_ter", rval = "bool", args = { "int", "int" }, location = { "./src/map.h", 652 } },
        { name = "is_bashable_ter", rval = "bool", args = { "tripoint" }, comment = "Returns true if the terrain at p is bashable", location = { "./src/map.h", 662 } },
        { name = "is_bashable_ter", rval = "bool", args = { "tripoint", "bool" }, comment = "Returns true if the terrain at p is bashable", location = { "./src/map.h", 662 } },
        { name = "is_bashable_ter_furn", rval = "bool", args = { "int", "int" }, location = { "./src/map.h", 654 } },
        { name = "is_bashable_ter_furn", rval = "bool", args = { "tripoint" }, comment = "Returns true if the furniture or terrain at p is bashable", location = { "./src/map.h", 666 } },
        { name = "is_bashable_ter_furn", rval = "bool", args = { "tripoint", "bool" }, comment = "Returns true if the furniture or terrain at p is bashable", location = { "./src/map.h", 666 } },
        { name = "is_divable", rval = "bool", args = { "int", "int" }, location = { "./src/map.h", 682 } },
        { name = "is_divable", rval = "bool", args = { "tripoint" }, location = { "./src/map.h", 684 } },
        { name = "is_harvestable", rval = "bool", args = { "tripoint" }, comment = "Returns true if point at pos is harvestable right now, with no extra tools.", location = { "./src/map.h", 622 } },
        { name = "is_last_ter_wall", rval = "bool", args = { "bool", "int", "int", "int", "int", "direction" }, comment = "Check if the last terrain is wall in direction NORTH, SOUTH, WEST or EAST   *  @param no_furn if true, the function will stop and return false   *  if it encounters a furniture   *  @param x starting x coordinate of check   *  @param y starting y coordinate of check   *  @param xmax ending x coordinate of check   *  @param ymax ending y coordinate of check   *  @param dir Direction of check   *  @return true if from x to xmax or y to ymax depending on direction   *  all terrain is floor and the last terrain is a wall", location = { "./src/map.h", 696 } },
        { name = "is_outside", rval = "bool", args = { "int", "int" }, location = { "./src/map.h", 683 } },
        { name = "is_outside", rval = "bool", args = { "tripoint" }, location = { "./src/map.h", 685 } },
        { name = "item_from", rval = "item&", args = { "tripoint", "int" }, comment = "Fetch an item from this map location, with sanity checks to ensure it still exists.", location = { "./src/map.h", 929 } },
        { name = "item_from", rval = "item&", args = { "vehicle", "int", "int" }, comment = "Fetch an item from this vehicle, with sanity checks to ensure it still exists.", location = { "./src/map.h", 934 } },
        { name = "light_at", rval = "lit_level", args = { "tripoint" }, location = { "./src/map.h", 1143 } },
        { name = "light_transparency", rval = "float", args = { "tripoint" }, location = { "./src/map.h", 1142 } },
        { name = "load", rval = nil, args = { "int", "int", "int", "bool" }, comment = "Load submaps into @ref grid. This might create new submaps if      * the @ref mapbuffer can not deliver the requested submap (as it does      * not exist on disc).      * This must be called before the map can be used at all!      * @param wx global coordinates of the submap at grid[0]. This      * is in submap coordinates.      * @param wy see wx      * @param wz see wx, this is the z-level      * @param update_vehicles If true, add vehicles to the vehicle cache.", location = { "./src/map.h", 302 } },
        { name = "make_rubble", rval = nil, args = { "tripoint" }, location = { "./src/map.h", 679 } },
        { name = "make_rubble", rval = nil, args = { "tripoint", "furn_id", "bool" }, location = { "./src/map.h", 680 } },
        { name = "make_rubble", rval = nil, args = { "tripoint", "furn_id", "bool", "ter_id" }, comment = "Generates rubble at the given location, if overwrite is true it just writes on top of what currently exists      *  floor_type is only used if there is a non-bashable wall at the location or with overwrite = true", location = { "./src/map.h", 677 } },
        { name = "make_rubble", rval = nil, args = { "tripoint", "furn_id", "bool", "ter_id", "bool" }, comment = "Generates rubble at the given location, if overwrite is true it just writes on top of what currently exists      *  floor_type is only used if there is a non-bashable wall at the location or with overwrite = true", location = { "./src/map.h", 677 } },
        { name = "max_volume", rval = "units::volume", args = { "tripoint" }, location = { "./src/map.h", 837 } },
        { name = "mop_spills", rval = "bool", args = { "tripoint" }, comment = "Remove moppable fields/items at this location      *  @param p the location      *  @return true if anything moppable was there, false otherwise.", location = { "./src/map.h", 767 } },
        { name = "move_cost", rval = "int", args = { "int", "int" }, location = { "./src/map.h", 332 } },
        { name = "move_cost", rval = "int", args = { "int", "int", "vehicle" }, location = { "./src/map.h", 332 } },
        { name = "move_cost", rval = "int", args = { "tripoint" }, comment = "Calculate the cost to move past the tile at p.     *     * The move cost is determined by various obstacles, such     * as terrain, vehicles and furniture.     *     * @note Movement costs for players and zombies both use this function.     *     * @return The return value is interpreted as follows:     * Move Cost | Meaning     * --------- | -------     * 0         | Impassable. Use `passable`/`impassable` to check for this.     * n > 0     | x*n turns to move past this", location = { "./src/map.h", 353 } },
        { name = "move_cost", rval = "int", args = { "tripoint", "vehicle" }, comment = "Calculate the cost to move past the tile at p.     *     * The move cost is determined by various obstacles, such     * as terrain, vehicles and furniture.     *     * @note Movement costs for players and zombies both use this function.     *     * @return The return value is interpreted as follows:     * Move Cost | Meaning     * --------- | -------     * 0         | Impassable. Use `passable`/`impassable` to check for this.     * n > 0     | x*n turns to move past this", location = { "./src/map.h", 353 } },
        { name = "move_cost_ter_furn", rval = "int", args = { "int", "int" }, location = { "./src/map.h", 335 } },
        { name = "move_cost_ter_furn", rval = "int", args = { "tripoint" }, comment = "Similar behavior to `move_cost()`, but ignores vehicles.", location = { "./src/map.h", 360 } },
        { name = "name", rval = "std::string", args = { "int", "int" }, location = { "./src/map.h", 541 } },
        { name = "name", rval = "std::string", args = { "tripoint" }, location = { "./src/map.h", 552 } },
        { name = "need_draw_lower_floor", rval = "bool", args = { "tripoint" }, location = { "./src/map.h", 1520 } },
        { name = "obstacle_name", rval = "std::string", args = { "tripoint" }, comment = "Returns the name of the obstacle at p that might be blocking movement/projectiles/etc.     * Note that this only accounts for vehicles, terrain, and furniture.", location = { "./src/map.h", 558 } },
        { name = "on_vehicle_moved", rval = nil, args = { "int" }, comment = "Callback invoked when a vehicle has moved.", location = { "./src/map.h", 233 } },
        { name = "open_door", rval = "bool", args = { "tripoint", "bool" }, location = { "./src/map.h", 730 } },
        { name = "open_door", rval = "bool", args = { "tripoint", "bool", "bool" }, location = { "./src/map.h", 730 } },
        { name = "passable", rval = "bool", args = { "int", "int" }, location = { "./src/map.h", 334 } },
        { name = "passable", rval = "bool", args = { "tripoint" }, location = { "./src/map.h", 355 } },
        { name = "passable_ter_furn", rval = "bool", args = { "tripoint" }, location = { "./src/map.h", 362 } },
        { name = "pl_line_of_sight", rval = "bool", args = { "tripoint", "int" }, comment = "Uses the map cache to tell if the player could see the given square.          * pl_sees implies pl_line_of_sight          * Used for infrared.", location = { "./src/map.h", 1164 } },
        { name = "pl_sees", rval = "bool", args = { "tripoint", "int" }, comment = "Whether the player character (g->u) can see the given square (local map coordinates).          * This only checks the transparency of the path to the target, the light level is not          * checked.          * @param t Target point to look at          * @param max_range All squares that are further away than this are invisible.          * Ignored if smaller than 0.", location = { "./src/map.h", 1158 } },
        { name = "place_gas_pump", rval = nil, args = { "int", "int", "int" }, location = { "./src/map.h", 1115 } },
        { name = "place_gas_pump", rval = nil, args = { "int", "int", "int", "std::string" }, location = { "./src/map.h", 1116 } },
        { name = "place_npc", rval = "int", args = { "int", "int", "std::string" }, location = { "./src/map.h", 1119 } },
        { name = "place_spawns", rval = nil, args = { "mongroup_id", "int", "int", "int", "int", "int", "float" }, location = { "./src/map.h", 1113 } },
        { name = "place_toilet", rval = nil, args = { "int", "int" }, location = { "./src/map.h", 1117 } },
        { name = "place_toilet", rval = nil, args = { "int", "int", "int" }, location = { "./src/map.h", 1117 } },
        { name = "place_vending", rval = nil, args = { "int", "int", "std::string" }, location = { "./src/map.h", 1118 } },
        { name = "process_active_items", rval = nil, args = { }, location = { "./src/map.h", 799 } },
        { name = "process_falling", rval = nil, args = { }, comment = "Invoked @ref drop_everything on cached dirty tiles.", location = { "./src/map.h", 1109 } },
        { name = "process_fields", rval = "bool", args = { }, location = { "./src/map.h", 945 } },
        { name = "propagate_field", rval = nil, args = { "tripoint", "field_id", "int" }, location = { "./src/map.h", 1035 } },
        { name = "propagate_field", rval = nil, args = { "tripoint", "field_id", "int", "int" }, location = { "./src/map.h", 1035 } },
        { name = "put_items_from_loc", rval = nil, args = { "std::string", "tripoint" }, comment = "Place items from an item group at p. Places as much items as the item group says.     * (Most item groups are distributions and will only create one item.)     * @param loc Current location of items     * @param p Destination of items     * @param turn The birthday that the created items shall have.     * @return Vector of pointers to placed items (can be empty, but no nulls).", location = { "./src/map.h", 920 } },
        { name = "put_items_from_loc", rval = nil, args = { "std::string", "tripoint", "int" }, comment = "Place items from an item group at p. Places as much items as the item group says.     * (Most item groups are distributions and will only create one item.)     * @param loc Current location of items     * @param p Destination of items     * @param turn The birthday that the created items shall have.     * @return Vector of pointers to placed items (can be empty, but no nulls).", location = { "./src/map.h", 920 } },
        { name = "random_outdoor_tile", rval = "point", args = { }, location = { "./src/map.h", 704 } },
        { name = "random_perimeter", rval = "tripoint", args = { "tripoint", "int" }, comment = "Get random tile on circumference of a circle", location = { "./src/map.h", 1307 } },
        { name = "ranged_target_size", rval = "float", args = { "tripoint" }, comment = "Size of map objects at `p` for purposes of ranged combat.      * Size is in percentage of tile: if 1.0, all attacks going through tile      * should hit map objects on it, if 0.0 there is nothing to be hit (air/water).", location = { "./src/map.h", 386 } },
        { name = "remove_field", rval = nil, args = { "tripoint", "field_id" }, comment = "Remove field entry at xy, ignored if the field entry is not present.", location = { "./src/map.h", 1028 } },
        { name = "remove_trap", rval = nil, args = { "tripoint" }, location = { "./src/map.h", 942 } },
        { name = "reset_vehicle_cache", rval = nil, args = { "int" }, location = { "./src/map.h", 465 } },
        { name = "rotate", rval = nil, args = { "int" }, location = { "./src/map.h", 1206 } },
        { name = "save", rval = nil, args = { }, comment = "Add currently loaded submaps (in @ref grid) to the @ref mapbuffer.      * They will than be stored by that class and can be loaded from that class.      * This can be called several times, the mapbuffer takes care of adding      * the same submap several times. It should only be called after the map has      * been loaded.      * Submaps that have been loaded from the mapbuffer (and not generated) are      * already stored in the mapbuffer.      * TODO: determine if this is really needed? Submaps are already in the mapbuffer      * if they have been loaded from disc and the are added by map::generate, too.      * So when do they not appear in the mapbuffer?", location = { "./src/map.h", 290 } },
        { name = "sees", rval = "bool", args = { "tripoint", "tripoint", "int" }, comment = "Returns whether `F` sees `T` with a view range of `range`.", location = { "./src/map.h", 393 } },
        { name = "sees_some_items", rval = "bool", args = { "tripoint", "Creature" }, comment = "Check if creature can see some items at p. Includes:      * - check for items at this location (has_items(p))      * - check for SEALED flag (sealed furniture/terrain makes      * items not visible under any circumstances).      * - check for CONTAINER flag (makes items only visible when      * the creature is at p or at an adjacent square).", location = { "./src/map.h", 601 } },
        { name = "set", rval = nil, args = { "int", "int", "ter_id", "furn_id" }, location = { "./src/map.h", 539 } },
        { name = "set", rval = nil, args = { "tripoint", "ter_id", "furn_id" }, location = { "./src/map.h", 550 } },
        { name = "set_field_age", rval = "int", args = { "tripoint", "field_id", "int" }, comment = "Set age of field entry at point.          * @param p Location of field          * @param t ID of field          * @param age New age of specified field          * @param isoffset If true, the given age value is added to the existing value,          * if false, the existing age is ignored and overridden.          * @return resulting age or -1 if not present (does *not* create a new field).", location = { "./src/map.h", 1003 } },
        { name = "set_field_age", rval = "int", args = { "tripoint", "field_id", "int", "bool" }, comment = "Set age of field entry at point.          * @param p Location of field          * @param t ID of field          * @param age New age of specified field          * @param isoffset If true, the given age value is added to the existing value,          * if false, the existing age is ignored and overridden.          * @return resulting age or -1 if not present (does *not* create a new field).", location = { "./src/map.h", 1003 } },
        { name = "set_field_strength", rval = "int", args = { "tripoint", "field_id", "int" }, comment = "Set density of field entry at point, creating if not present,          * removing if density becomes 0.          * @param p Location of field          * @param t ID of field          * @param str New strength of field          * @param isoffset If true, the given str value is added to the existing value,          * if false, the existing density is ignored and overridden.          * @return resulting density, or 0 for not present (either removed or not created at all).", location = { "./src/map.h", 1014 } },
        { name = "set_field_strength", rval = "int", args = { "tripoint", "field_id", "int", "bool" }, comment = "Set density of field entry at point, creating if not present,          * removing if density becomes 0.          * @param p Location of field          * @param t ID of field          * @param str New strength of field          * @param isoffset If true, the given str value is added to the existing value,          * if false, the existing density is ignored and overridden.          * @return resulting density, or 0 for not present (either removed or not created at all).", location = { "./src/map.h", 1014 } },
        { name = "set_floor_cache_dirty", rval = nil, args = { "int" }, location = { "./src/map.h", 220 } },
        { name = "set_graffiti", rval = nil, args = { "tripoint", "std::string" }, location = { "./src/map.h", 1069 } },
        { name = "set_outside_cache_dirty", rval = nil, args = { "int" }, location = { "./src/map.h", 214 } },
        { name = "set_pathfinding_cache_dirty", rval = nil, args = { "int" }, location = { "./src/map.h", 226 } },
        { name = "set_radiation", rval = nil, args = { "int", "int", "int" }, location = { "./src/map.h", 783 } },
        { name = "set_radiation", rval = nil, args = { "tripoint", "int" }, location = { "./src/map.h", 781 } },
        { name = "set_signage", rval = nil, args = { "tripoint", "std::string" }, location = { "./src/map.h", 776 } },
        { name = "set_temperature", rval = nil, args = { "int", "int", "int" }, location = { "./src/map.h", 796 } },
        { name = "set_temperature", rval = nil, args = { "tripoint", "int" }, location = { "./src/map.h", 794 } },
        { name = "set_transparency_cache_dirty", rval = nil, args = { "int" }, location = { "./src/map.h", 208 } },
        { name = "shake_vehicle", rval = "int", args = { "vehicle", "int", "int" }, location = { "./src/map.h", 532 } },
        { name = "shift", rval = nil, args = { "int", "int" }, comment = "Shift the map along the vector (sx,sy).      * This is like loading the map with coordinates derived from the current      * position of the map (@ref abs_sub) plus the shift vector.      * Note: the map must have been loaded before this can be called.", location = { "./src/map.h", 309 } },
        { name = "smash_items", rval = nil, args = { "tripoint", "int" }, comment = "Tries to smash the items at the given tripoint. Used by the explosion code", location = { "./src/map.h", 743 } },
        { name = "spawn_an_item", rval = "item&", args = { "tripoint", "item", "int", "int" }, location = { "./src/map.h", 861 } },
        { name = "spawn_an_item", rval = nil, args = { "int", "int", "item", "int", "int" }, location = { "./src/map.h", 815 } },
        { name = "spawn_artifact", rval = nil, args = { "tripoint" }, location = { "./src/map.h", 832 } },
        { name = "spawn_item", rval = nil, args = { "int", "int", "std::string" }, location = { "./src/map.h", 808 } },
        { name = "spawn_item", rval = nil, args = { "int", "int", "std::string", "int" }, location = { "./src/map.h", 808 } },
        { name = "spawn_item", rval = nil, args = { "int", "int", "std::string", "int", "int" }, location = { "./src/map.h", 808 } },
        { name = "spawn_item", rval = nil, args = { "int", "int", "std::string", "int", "int", "int" }, location = { "./src/map.h", 808 } },
        { name = "spawn_item", rval = nil, args = { "int", "int", "std::string", "int", "int", "int", "int" }, location = { "./src/map.h", 808 } },
        { name = "spawn_item", rval = nil, args = { "tripoint", "std::string" }, location = { "./src/map.h", 834 } },
        { name = "spawn_item", rval = nil, args = { "tripoint", "std::string", "int" }, location = { "./src/map.h", 834 } },
        { name = "spawn_item", rval = nil, args = { "tripoint", "std::string", "int", "int" }, location = { "./src/map.h", 834 } },
        { name = "spawn_item", rval = nil, args = { "tripoint", "std::string", "int", "int", "int" }, location = { "./src/map.h", 834 } },
        { name = "spawn_item", rval = nil, args = { "tripoint", "std::string", "int", "int", "int", "int" }, location = { "./src/map.h", 834 } },
        { name = "spawn_items", rval = nil, args = { "int", "int", "std::vector<item>" }, location = { "./src/map.h", 820 } },
        { name = "spawn_monsters", rval = nil, args = { "bool" }, comment = "Spawn monsters from submap spawn points and from the overmap.      * @param ignore_sight If true, monsters may spawn in the view of the player      * character (useful when the whole map has been loaded instead, e.g.      * when starting a new game, or after teleportation or after moving vertically).      * If false, monsters are not spawned in view of of player character.", location = { "./src/map.h", 1218 } },
        { name = "spawn_natural_artifact", rval = nil, args = { "tripoint", "artifact_natural_property" }, location = { "./src/map.h", 833 } },
        { name = "stored_volume", rval = "units::volume", args = { "tripoint" }, location = { "./src/map.h", 839 } },
        { name = "supports_above", rval = "bool", args = { "tripoint" }, comment = "Does this tile support vehicles and furniture above it", location = { "./src/map.h", 1091 } },
        { name = "ter", rval = "ter_id", args = { "int", "int" }, location = { "./src/map.h", 568 } },
        { name = "ter", rval = "ter_id", args = { "tripoint" }, location = { "./src/map.h", 574 } },
        { name = "ter_set", rval = nil, args = { "int", "int", "ter_id" }, location = { "./src/map.h", 570 } },
        { name = "ter_set", rval = nil, args = { "tripoint", "ter_id" }, location = { "./src/map.h", 585 } },
        { name = "tername", rval = "std::string", args = { "int", "int" }, location = { "./src/map.h", 572 } },
        { name = "tername", rval = "std::string", args = { "tripoint" }, location = { "./src/map.h", 587 } },
        { name = "tr_at", rval = "trap&", args = { "tripoint" }, location = { "./src/map.h", 939 } },
        { name = "trans", rval = "bool", args = { "tripoint" }, comment = "Returns whether the tile at `p` is transparent(you can look past it).", location = { "./src/map.h", 1148 } },
        { name = "translate", rval = nil, args = { "ter_id", "ter_id" }, location = { "./src/map.h", 727 } },
        { name = "translate_radius", rval = nil, args = { "ter_id", "ter_id", "float", "tripoint" }, location = { "./src/map.h", 728 } },
        { name = "trap_locations", rval = "std::vector<tripoint>", args = { "trap_id" }, location = { "./src/map.h", 943 } },
        { name = "trap_set", rval = nil, args = { "tripoint", "trap_id" }, location = { "./src/map.h", 937 } },
        { name = "trigger_rc_items", rval = nil, args = { "std::string" }, location = { "./src/map.h", 800 } },
        { name = "unboard_vehicle", rval = nil, args = { "tripoint" }, location = { "./src/map.h", 506 } },
        { name = "update_pathfinding_cache", rval = nil, args = { "int" }, location = { "./src/map.h", 1510 } },
        { name = "update_vehicle_cache", rval = nil, args = { "vehicle", "int" }, location = { "./src/map.h", 464 } },
        { name = "update_visibility_cache", rval = nil, args = { "int" }, location = { "./src/map.h", 1512 } },
        { name = "valid_move", rval = "bool", args = { "tripoint", "tripoint" }, comment = "Returns true if a creature could walk from `from` to `to` in one step.      * That is, if the tiles are adjacent and either on the same z-level or connected      * by stairs or (in case of flying monsters) open air with no floors.", location = { "./src/map.h", 378 } },
        { name = "valid_move", rval = "bool", args = { "tripoint", "tripoint", "bool" }, comment = "Returns true if a creature could walk from `from` to `to` in one step.      * That is, if the tiles are adjacent and either on the same z-level or connected      * by stairs or (in case of flying monsters) open air with no floors.", location = { "./src/map.h", 378 } },
        { name = "valid_move", rval = "bool", args = { "tripoint", "tripoint", "bool", "bool" }, comment = "Returns true if a creature could walk from `from` to `to` in one step.      * That is, if the tiles are adjacent and either on the same z-level or connected      * by stairs or (in case of flying monsters) open air with no floors.", location = { "./src/map.h", 378 } },
        { name = "veh_at", rval = "vehicle&", args = { "tripoint" }, comment = "Same as `veh_at(const int, const int, int)`, but doesn't return part number.", location = { "./src/map.h", 496 } },
        { name = "veh_part_coordinates", rval = "point", args = { "tripoint" }, comment = "Vehicle-relative coordinates from reality bubble coordinates, if a vehicle     * actually exists here.     * Returns 0,0 if no vehicle exists there (use veh_at to check if it exists first)", location = { "./src/map.h", 503 } },
        { name = "vehact", rval = "bool", args = { "vehicle" }, location = { "./src/map.h", 478 } },
        { name = "vehicle_buoyancy", rval = "float", args = { "vehicle" }, location = { "./src/map.h", 520 } },
        { name = "vehicle_falling", rval = "bool", args = { "vehicle" }, location = { "./src/map.h", 523 } },
        { name = "vehicle_wheel_traction", rval = "float", args = { "vehicle" }, location = { "./src/map.h", 515 } },
        { name = "vehmove", rval = nil, args = { }, location = { "./src/map.h", 474 } },
        { name = "vehproceed", rval = "bool", args = { }, location = { "./src/map.h", 476 } },
        { name = "vertical_shift", rval = nil, args = { "int" }, comment = "Moves the map vertically to (not by!) newz.      * Does not actually shift anything, only forces cache updates.      * In the future, it will either actually shift the map or it will get removed      *  after 3D migration is complete.", location = { "./src/map.h", 316 } },
        { name = "water_from", rval = "item", args = { "tripoint" }, location = { "./src/map.h", 825 } },
    }
}
classes['ter_t'] = {
    string_id = "ter_str_id",
    int_id = "ter_id",
    attributes = {
        close = { type = "ter_str_id", writable = true },
        connect_group = { type = "int", writable = true },
        description = { type = "std::string", writable = true },
        id = { type = "ter_str_id" },
        max_volume = { type = "units::volume", writable = true },
        movecost = { type = "int", writable = true },
        name = { type = "std::string", writable = true },
        open = { type = "ter_str_id", writable = true },
        roof = { type = "ter_str_id", writable = true },
        transforms_into = { type = "ter_str_id", writable = true },
        transparent = { type = "bool", writable = true },
        trap = { type = "trap_id", writable = true },
        trap_id_str = { type = "std::string", writable = true },
    },
    functions = {
        { name = "check", rval = nil, args = { }, location = { "./src/mapdata.h", 272 } },
        { name = "color", rval = "int", args = { }, location = { "./src/mapdata.h", 260 } },
        { name = "connects_to", rval = "bool", args = { "int" }, location = { "./src/mapdata.h", 255 } },
        { name = "count", static = true, rval = "int", args = { }, location = { "./src/mapdata.h", 297 } },
        { name = "extended_description", rval = "std::string", args = { }, location = { "./src/mapdata.h", 269 } },
        { name = "get_harvest_names", rval = "std::set<std::string>", args = { }, comment = "Returns a set of names of the items that would be dropped.      * Used for NPC whitelist checking.", location = { "./src/mapdata.h", 267 } },
        { name = "has_flag", rval = "bool", args = { "std::string" }, location = { "./src/mapdata.h", 239 } },
        { name = "has_flag", rval = "bool", args = { "ter_bitflags" }, location = { "./src/mapdata.h", 243 } },
        { name = "set_connects", rval = nil, args = { "std::string" }, location = { "./src/mapdata.h", 251 } },
        { name = "set_flag", rval = nil, args = { "std::string" }, location = { "./src/mapdata.h", 247 } },
        { name = "symbol", rval = "int", args = { }, location = { "./src/mapdata.h", 259 } },
    }
}
classes['furn_t'] = {
    string_id = "furn_str_id",
    int_id = "furn_id",
    attributes = {
        close = { type = "furn_str_id", writable = true },
        connect_group = { type = "int", writable = true },
        crafting_pseudo_item = { type = "std::string", writable = true },
        description = { type = "std::string", writable = true },
        id = { type = "furn_str_id" },
        max_volume = { type = "units::volume", writable = true },
        move_str_req = { type = "int", writable = true },
        movecost = { type = "int", writable = true },
        name = { type = "std::string", writable = true },
        open = { type = "furn_str_id", writable = true },
        transparent = { type = "bool", writable = true },
    },
    functions = {
        { name = "check", rval = nil, args = { }, location = { "./src/mapdata.h", 272 } },
        { name = "color", rval = "int", args = { }, location = { "./src/mapdata.h", 260 } },
        { name = "connects_to", rval = "bool", args = { "int" }, location = { "./src/mapdata.h", 255 } },
        { name = "count", static = true, rval = "int", args = { }, location = { "./src/mapdata.h", 330 } },
        { name = "crafting_ammo_item_type", rval = "itype&", args = { }, location = { "./src/mapdata.h", 324 } },
        { name = "crafting_pseudo_item_type", rval = "itype&", args = { }, location = { "./src/mapdata.h", 322 } },
        { name = "extended_description", rval = "std::string", args = { }, location = { "./src/mapdata.h", 269 } },
        { name = "get_harvest_names", rval = "std::set<std::string>", args = { }, comment = "Returns a set of names of the items that would be dropped.      * Used for NPC whitelist checking.", location = { "./src/mapdata.h", 267 } },
        { name = "has_flag", rval = "bool", args = { "std::string" }, location = { "./src/mapdata.h", 239 } },
        { name = "has_flag", rval = "bool", args = { "ter_bitflags" }, location = { "./src/mapdata.h", 243 } },
        { name = "set_connects", rval = nil, args = { "std::string" }, location = { "./src/mapdata.h", 251 } },
        { name = "set_flag", rval = nil, args = { "std::string" }, location = { "./src/mapdata.h", 247 } },
        { name = "symbol", rval = "int", args = { }, location = { "./src/mapdata.h", 259 } },
    }
}
classes['Creature'] = {
    attributes = {
        moves = { type = "int", writable = true },
        size_map = { type = "std::map<std::string, m_size>", static = true },
        underwater = { type = "bool", writable = true },
    },
    functions = {
        { name = "absorb_hit", rval = nil, args = { "body_part", "damage_instance" }, location = { "./src/creature.h", 234 } },
        { name = "add_effect", rval = nil, args = { "efftype_id", "int" }, comment = "Adds or modifies an effect. If intensity is given it will set the effect intensity             to the given value, or as close as max_intensity values permit.", location = { "./src/creature.h", 344 } },
        { name = "add_effect", rval = nil, args = { "efftype_id", "int", "body_part" }, comment = "Adds or modifies an effect. If intensity is given it will set the effect intensity             to the given value, or as close as max_intensity values permit.", location = { "./src/creature.h", 344 } },
        { name = "add_effect", rval = nil, args = { "efftype_id", "int", "body_part", "bool" }, comment = "Adds or modifies an effect. If intensity is given it will set the effect intensity             to the given value, or as close as max_intensity values permit.", location = { "./src/creature.h", 344 } },
        { name = "add_effect", rval = nil, args = { "efftype_id", "int", "body_part", "bool", "int" }, comment = "Adds or modifies an effect. If intensity is given it will set the effect intensity             to the given value, or as close as max_intensity values permit.", location = { "./src/creature.h", 344 } },
        { name = "add_effect", rval = nil, args = { "efftype_id", "int", "body_part", "bool", "int", "bool" }, comment = "Adds or modifies an effect. If intensity is given it will set the effect intensity             to the given value, or as close as max_intensity values permit.", location = { "./src/creature.h", 344 } },
        { name = "add_env_effect", rval = "bool", args = { "efftype_id", "body_part", "int", "int" }, comment = "Gives chance to save via environmental resist, returns false if resistance was successful.", location = { "./src/creature.h", 347 } },
        { name = "add_env_effect", rval = "bool", args = { "efftype_id", "body_part", "int", "int", "body_part" }, comment = "Gives chance to save via environmental resist, returns false if resistance was successful.", location = { "./src/creature.h", 347 } },
        { name = "add_env_effect", rval = "bool", args = { "efftype_id", "body_part", "int", "int", "body_part", "bool" }, comment = "Gives chance to save via environmental resist, returns false if resistance was successful.", location = { "./src/creature.h", 347 } },
        { name = "add_env_effect", rval = "bool", args = { "efftype_id", "body_part", "int", "int", "body_part", "bool", "int" }, comment = "Gives chance to save via environmental resist, returns false if resistance was successful.", location = { "./src/creature.h", 347 } },
        { name = "add_env_effect", rval = "bool", args = { "efftype_id", "body_part", "int", "int", "body_part", "bool", "int", "bool" }, comment = "Gives chance to save via environmental resist, returns false if resistance was successful.", location = { "./src/creature.h", 347 } },
        { name = "apply_damage", rval = nil, args = { "Creature", "body_part", "int" }, location = { "./src/creature.h", 272 } },
        { name = "avoid_trap", rval = "bool", args = { "tripoint", "trap" }, comment = "Called when a creature triggers a trap, returns true if they don't set it off.          * @param tr is the trap that was triggered.          * @param pos is the location of the trap (not necessarily of the creature) in the main map.", location = { "./src/creature.h", 129 } },
        { name = "basic_symbol_color", rval = "int", args = { }, location = { "./src/creature.h", 541 } },
        { name = "bleed", rval = nil, args = { }, comment = "Adds an appropriate blood splatter.", location = { "./src/creature.h", 91 } },
        { name = "block_hit", rval = "bool", args = { "Creature", "body_part", "damage_instance" }, location = { "./src/creature.h", 229 } },
        { name = "bloodType", rval = "field_id", args = { }, location = { "./src/creature.h", 427 } },
        { name = "check_dead_state", rval = nil, args = { }, comment = "This function checks the creatures @ref is_dead_state and (if true) calls @ref die.          * You can either call this function after hitting this creature, or let the game          * call it during @ref game::cleanup_dead.          * As @ref die has many side effects (messages, on-death-triggers, ...), you should be          * careful when calling this and expect that at least a 'The monster dies!' message might          * have been printed. If you want to print any message relating to the attack (e.g. how          * much damage has been dealt, how the attack was performed, what has been blocked...), do          * it *before* calling this function.", location = { "./src/creature.h", 327 } },
        { name = "clear_effects", rval = nil, args = { }, comment = "Remove all effects.", location = { "./src/creature.h", 354 } },
        { name = "deal_melee_attack", rval = "int", args = { "Creature", "int" }, location = { "./src/creature.h", 241 } },
        { name = "die", rval = nil, args = { "Creature" }, comment = "Empty function. Should always be overwritten by the appropriate player/NPC/monster version.", location = { "./src/creature.h", 93 } },
        { name = "digging", rval = "bool", args = { }, location = { "./src/creature.h", 286 } },
        { name = "disp_name", rval = "std::string", args = { "bool" }, location = { "./src/creature.h", 59 } },
        { name = "disp_name", rval = "std::string", args = { }, location = { "./src/creature.h", 59 } },
        { name = "dodge_roll", rval = "float", args = { }, location = { "./src/creature.h", 97 } },
        { name = "extended_description", rval = "std::string", args = { }, location = { "./src/creature.h", 538 } },
        { name = "fall_damage_mod", rval = "float", args = { }, comment = "Returns multiplier on fall damage at low velocity (knockback/pit/1 z-level, not 5 z-levels)", location = { "./src/creature.h", 313 } },
        { name = "get_all_body_parts", rval = "std::vector<body_part>", args = { "bool" }, comment = "Returns body parts in order in which they should be displayed.          * @param main If true, only displays parts that can have hit points", location = { "./src/creature.h", 444 } },
        { name = "get_all_body_parts", rval = "std::vector<body_part>", args = { }, comment = "Returns body parts in order in which they should be displayed.          * @param main If true, only displays parts that can have hit points", location = { "./src/creature.h", 444 } },
        { name = "get_armor_bash", rval = "int", args = { "body_part" }, location = { "./src/creature.h", 408 } },
        { name = "get_armor_bash_base", rval = "int", args = { "body_part" }, location = { "./src/creature.h", 410 } },
        { name = "get_armor_bash_bonus", rval = "int", args = { }, location = { "./src/creature.h", 412 } },
        { name = "get_armor_cut", rval = "int", args = { "body_part" }, location = { "./src/creature.h", 409 } },
        { name = "get_armor_cut_base", rval = "int", args = { "body_part" }, location = { "./src/creature.h", 411 } },
        { name = "get_armor_cut_bonus", rval = "int", args = { }, location = { "./src/creature.h", 413 } },
        { name = "get_armor_type", rval = "int", args = { "damage_type", "body_part" }, location = { "./src/creature.h", 415 } },
        { name = "get_bash_bonus", rval = "int", args = { }, location = { "./src/creature.h", 449 } },
        { name = "get_bash_mult", rval = "float", args = { }, location = { "./src/creature.h", 457 } },
        { name = "get_block_bonus", rval = "int", args = { }, location = { "./src/creature.h", 448 } },
        { name = "get_cut_bonus", rval = "int", args = { }, location = { "./src/creature.h", 450 } },
        { name = "get_cut_mult", rval = "float", args = { }, location = { "./src/creature.h", 458 } },
        { name = "get_dodge", rval = "float", args = { }, location = { "./src/creature.h", 417 } },
        { name = "get_dodge_base", rval = "float", args = { }, location = { "./src/creature.h", 452 } },
        { name = "get_dodge_bonus", rval = "float", args = { }, location = { "./src/creature.h", 454 } },
        { name = "get_effect", rval = "effect&", args = { "efftype_id" }, location = { "./src/creature.h", 360 } },
        { name = "get_effect", rval = "effect&", args = { "efftype_id", "body_part" }, location = { "./src/creature.h", 360 } },
        { name = "get_effect_dur", rval = "int", args = { "efftype_id" }, comment = "Returns the duration of the matching effect. Returns 0 if effect doesn't exist.", location = { "./src/creature.h", 362 } },
        { name = "get_effect_dur", rval = "int", args = { "efftype_id", "body_part" }, comment = "Returns the duration of the matching effect. Returns 0 if effect doesn't exist.", location = { "./src/creature.h", 362 } },
        { name = "get_effect_int", rval = "int", args = { "efftype_id" }, comment = "Returns the intensity of the matching effect. Returns 0 if effect doesn't exist.", location = { "./src/creature.h", 364 } },
        { name = "get_effect_int", rval = "int", args = { "efftype_id", "body_part" }, comment = "Returns the intensity of the matching effect. Returns 0 if effect doesn't exist.", location = { "./src/creature.h", 364 } },
        { name = "get_env_resist", rval = "int", args = { "body_part" }, location = { "./src/creature.h", 406 } },
        { name = "get_grab_resist", rval = "int", args = { }, location = { "./src/creature.h", 461 } },
        { name = "get_hit", rval = "float", args = { }, location = { "./src/creature.h", 419 } },
        { name = "get_hit_base", rval = "float", args = { }, location = { "./src/creature.h", 453 } },
        { name = "get_hit_bonus", rval = "float", args = { }, location = { "./src/creature.h", 455 } },
        { name = "get_hp", rval = "int", args = { "hp_part" }, location = { "./src/creature.h", 423 } },
        { name = "get_hp", rval = "int", args = { }, location = { "./src/creature.h", 423 } },
        { name = "get_hp_max", rval = "int", args = { "hp_part" }, location = { "./src/creature.h", 424 } },
        { name = "get_hp_max", rval = "int", args = { }, location = { "./src/creature.h", 424 } },
        { name = "get_killer", rval = "Creature&", args = { }, location = { "./src/creature.h", 395 } },
        { name = "get_melee", rval = "float", args = { }, location = { "./src/creature.h", 418 } },
        { name = "get_melee_quiet", rval = "bool", args = { }, location = { "./src/creature.h", 460 } },
        { name = "get_name", rval = "std::string", args = { }, location = { "./src/creature.h", 58 } },
        { name = "get_num_blocks", rval = "int", args = { }, location = { "./src/creature.h", 401 } },
        { name = "get_num_blocks_bonus", rval = "int", args = { }, location = { "./src/creature.h", 403 } },
        { name = "get_num_dodges", rval = "int", args = { }, location = { "./src/creature.h", 402 } },
        { name = "get_num_dodges_bonus", rval = "int", args = { }, location = { "./src/creature.h", 404 } },
        { name = "get_pain", rval = "int", args = { }, location = { "./src/creature.h", 383 } },
        { name = "get_path_avoid", rval = "std::set<tripoint>", args = { }, comment = "Returns a set of points we do not want to path through.", location = { "./src/creature.h", 506 } },
        { name = "get_perceived_pain", rval = "int", args = { }, location = { "./src/creature.h", 384 } },
        { name = "get_random_body_part", rval = "body_part", args = { "bool" }, location = { "./src/creature.h", 439 } },
        { name = "get_random_body_part", rval = "body_part", args = { }, location = { "./src/creature.h", 439 } },
        { name = "get_size", rval = "m_size", args = { }, location = { "./src/creature.h", 422 } },
        { name = "get_speed", rval = "int", args = { }, location = { "./src/creature.h", 421 } },
        { name = "get_speed_base", rval = "int", args = { }, location = { "./src/creature.h", 446 } },
        { name = "get_speed_bonus", rval = "int", args = { }, location = { "./src/creature.h", 447 } },
        { name = "get_throw_resist", rval = "int", args = { }, location = { "./src/creature.h", 463 } },
        { name = "get_value", rval = "std::string", args = { "std::string" }, location = { "./src/creature.h", 371 } },
        { name = "get_weight", rval = "int", args = { }, location = { "./src/creature.h", 501 } },
        { name = "gibType", rval = "field_id", args = { }, location = { "./src/creature.h", 428 } },
        { name = "has_effect", rval = "bool", args = { "efftype_id" }, comment = "Check if creature has the matching effect. bp = num_bp means to check if the Creature has any effect          *  of the matching type, targeted or untargeted.", location = { "./src/creature.h", 357 } },
        { name = "has_effect", rval = "bool", args = { "efftype_id", "body_part" }, comment = "Check if creature has the matching effect. bp = num_bp means to check if the Creature has any effect          *  of the matching type, targeted or untargeted.", location = { "./src/creature.h", 357 } },
        { name = "has_flag", rval = "bool", args = { "m_flag" }, location = { "./src/creature.h", 430 } },
        { name = "has_grab_break_tec", rval = "bool", args = { }, location = { "./src/creature.h", 462 } },
        { name = "has_trait", rval = "bool", args = { "std::string" }, comment = "Returns true if the player has the entered trait, returns false for non-humans", location = { "./src/creature.h", 377 } },
        { name = "has_weapon", rval = "bool", args = { }, location = { "./src/creature.h", 290 } },
        { name = "hit_roll", rval = "float", args = { }, comment = "Should always be overwritten by the appropriate player/NPC/monster version.", location = { "./src/creature.h", 96 } },
        { name = "hp_percentage", rval = "int", args = { }, location = { "./src/creature.h", 425 } },
        { name = "impact", rval = "int", args = { "int", "tripoint" }, comment = "Deals falling/collision damage with terrain/creature at pos", location = { "./src/creature.h", 315 } },
        { name = "in_sleep_state", rval = "bool", args = { }, location = { "./src/creature.h", 389 } },
        { name = "is_dangerous_field", rval = "bool", args = { "field_entry" }, comment = "Returns true if the given field entry is dangerous to us.", location = { "./src/creature.h", 304 } },
        { name = "is_dangerous_fields", rval = "bool", args = { "field" }, comment = "Returns true if there is a field in the field set that is dangerous to us.", location = { "./src/creature.h", 302 } },
        { name = "is_dead_state", rval = "bool", args = { }, location = { "./src/creature.h", 293 } },
        { name = "is_elec_immune", rval = "bool", args = { }, location = { "./src/creature.h", 296 } },
        { name = "is_fake", rval = "bool", args = { }, comment = "Returns true for non-real Creatures used temporarily; i.e. fake NPC's used for turret fire.", location = { "./src/creature.h", 76 } },
        { name = "is_hallucination", rval = "bool", args = { }, location = { "./src/creature.h", 291 } },
        { name = "is_immune_damage", rval = "bool", args = { "damage_type" }, location = { "./src/creature.h", 298 } },
        { name = "is_immune_effect", rval = "bool", args = { "efftype_id" }, location = { "./src/creature.h", 297 } },
        { name = "is_immune_field", rval = "bool", args = { "field_id" }, comment = "Returns true if we are immune to the field type with the given fid. Does not          *  handle density, so this function should only be called through is_dangerous_field().", location = { "./src/creature.h", 308 } },
        { name = "is_monster", rval = "bool", args = { }, location = { "./src/creature.h", 70 } },
        { name = "is_npc", rval = "bool", args = { }, location = { "./src/creature.h", 66 } },
        { name = "is_on_ground", rval = "bool", args = { }, location = { "./src/creature.h", 287 } },
        { name = "is_player", rval = "bool", args = { }, location = { "./src/creature.h", 62 } },
        { name = "is_symbol_highlighted", rval = "bool", args = { }, location = { "./src/creature.h", 543 } },
        { name = "is_underwater", rval = "bool", args = { }, location = { "./src/creature.h", 288 } },
        { name = "is_warm", rval = "bool", args = { }, location = { "./src/creature.h", 289 } },
        { name = "knock_back_from", rval = nil, args = { "tripoint" }, location = { "./src/creature.h", 237 } },
        { name = "made_of", rval = "bool", args = { "material_id" }, location = { "./src/creature.h", 426 } },
        { name = "melee_attack", rval = nil, args = { "Creature", "bool" }, comment = "Calls the to other melee_attack function with an empty technique id (meaning no specific          * technique should be used).", location = { "./src/creature.h", 189 } },
        { name = "melee_attack", rval = nil, args = { "Creature", "bool", "matec_id" }, comment = "Make a single melee attack with the currently equipped weapon against the targeted          *  creature. Should always be overwritten by the appropriate player/NPC/monster function.", location = { "./src/creature.h", 177 } },
        { name = "melee_attack", rval = nil, args = { "Creature", "bool", "matec_id", "int" }, comment = "Make a single melee attack with the currently equipped weapon against the targeted          *  creature with prerolled hitspread. Should always be overwritten by the appropriate          *  player/NPC/monster function.", location = { "./src/creature.h", 183 } },
        { name = "mod_bash_bonus", rval = nil, args = { "int" }, location = { "./src/creature.h", 484 } },
        { name = "mod_block_bonus", rval = nil, args = { "int" }, location = { "./src/creature.h", 483 } },
        { name = "mod_cut_bonus", rval = nil, args = { "int" }, location = { "./src/creature.h", 485 } },
        { name = "mod_dodge_bonus", rval = nil, args = { "float" }, location = { "./src/creature.h", 490 } },
        { name = "mod_hit_bonus", rval = nil, args = { "float" }, location = { "./src/creature.h", 491 } },
        { name = "mod_moves", rval = nil, args = { "int" }, location = { "./src/creature.h", 386 } },
        { name = "mod_pain", rval = nil, args = { "int" }, location = { "./src/creature.h", 380 } },
        { name = "mod_pain_noresist", rval = nil, args = { "int" }, location = { "./src/creature.h", 381 } },
        { name = "mod_speed_bonus", rval = nil, args = { "int" }, location = { "./src/creature.h", 482 } },
        { name = "mod_stat", rval = nil, args = { "std::string", "float" }, location = { "./src/creature.h", 468 } },
        { name = "move_effects", rval = "bool", args = { "bool" }, comment = "Processes move stopping effects. Returns false if movement is stopped.", location = { "./src/creature.h", 337 } },
        { name = "normalize", rval = nil, args = { }, comment = "Recreates the Creature from scratch.", location = { "./src/creature.h", 81 } },
        { name = "on_dodge", rval = nil, args = { "Creature", "float" }, comment = "This creature just dodged an attack - possibly special/ranged attack - from source.          * Players should train dodge, monsters may use some special defenses.", location = { "./src/creature.h", 278 } },
        { name = "on_hit", rval = nil, args = { "Creature" }, comment = "This creature just got hit by an attack - possibly special/ranged attack - from source.          * Players should train dodge, possibly counter-attack somehow.", location = { "./src/creature.h", 283 } },
        { name = "on_hit", rval = nil, args = { "Creature", "body_part" }, comment = "This creature just got hit by an attack - possibly special/ranged attack - from source.          * Players should train dodge, possibly counter-attack somehow.", location = { "./src/creature.h", 283 } },
        { name = "on_hit", rval = nil, args = { "Creature", "body_part", "float" }, comment = "This creature just got hit by an attack - possibly special/ranged attack - from source.          * Players should train dodge, possibly counter-attack somehow.", location = { "./src/creature.h", 283 } },
        { name = "pos", rval = "tripoint", args = { }, location = { "./src/creature.h", 332 } },
        { name = "posx", rval = "int", args = { }, location = { "./src/creature.h", 329 } },
        { name = "posy", rval = "int", args = { }, location = { "./src/creature.h", 330 } },
        { name = "posz", rval = "int", args = { }, location = { "./src/creature.h", 331 } },
        { name = "power_rating", rval = "float", args = { }, comment = "Returns an approximation of the creature's strength.", location = { "./src/creature.h", 158 } },
        { name = "process_effects", rval = nil, args = { }, comment = "Processes through all the effects on the Creature.", location = { "./src/creature.h", 374 } },
        { name = "process_turn", rval = nil, args = { }, comment = "Processes effects and bonuses and allocates move points based on speed.", location = { "./src/creature.h", 83 } },
        { name = "projectile_attack_chance", rval = "float", args = { "float", "float", "float", "float" }, comment = "Probability that a projectile attack will hit with at least the given accuracy.          *          * @param total_dispersion nominal shot dispersion of gun + shooter          * @param range range of the attack          * @param accuracy the required accuracy, in the range [0..1]          * @param target_size Ease of hitting target. 1.0 means target occupies entire tile and doesn't dodge.          * @return the probability, in the range (0..1]", location = { "./src/creature.h", 225 } },
        { name = "ranged_target_size", rval = "float", args = { }, comment = "Size of the target this creature presents to ranged weapons.          * 0.0 means unhittable, 1.0 means all projectiles going through this creature's tile will hit it.", location = { "./src/creature.h", 214 } },
        { name = "remove_effect", rval = "bool", args = { "efftype_id" }, comment = "Removes a listed effect, adding the removal memorial log if needed. bp = num_bp means to remove          *  all effects of a given type, targeted or untargeted. Returns true if anything was removed.", location = { "./src/creature.h", 352 } },
        { name = "remove_effect", rval = "bool", args = { "efftype_id", "body_part" }, comment = "Removes a listed effect, adding the removal memorial log if needed. bp = num_bp means to remove          *  all effects of a given type, targeted or untargeted. Returns true if anything was removed.", location = { "./src/creature.h", 352 } },
        { name = "remove_value", rval = nil, args = { "std::string" }, location = { "./src/creature.h", 370 } },
        { name = "reset", rval = nil, args = { }, comment = "Handles stat and bonus reset.", location = { "./src/creature.h", 89 } },
        { name = "reset_bonuses", rval = nil, args = { }, comment = "Resets the value of all bonus fields to 0.", location = { "./src/creature.h", 85 } },
        { name = "reset_stats", rval = nil, args = { }, comment = "Resets stats, and applies effects in an idempotent manner", location = { "./src/creature.h", 87 } },
        { name = "sees", rval = "bool", args = { "Creature" }, location = { "./src/creature.h", 144 } },
        { name = "sees", rval = "bool", args = { "int", "int" }, location = { "./src/creature.h", 145 } },
        { name = "sees", rval = "bool", args = { "point" }, location = { "./src/creature.h", 147 } },
        { name = "sees", rval = "bool", args = { "tripoint" }, location = { "./src/creature.h", 146 } },
        { name = "sees", rval = "bool", args = { "tripoint", "bool" }, location = { "./src/creature.h", 146 } },
        { name = "select_body_part", rval = "body_part", args = { "Creature", "int" }, location = { "./src/creature.h", 594 } },
        { name = "set_armor_bash_bonus", rval = nil, args = { "int" }, location = { "./src/creature.h", 473 } },
        { name = "set_armor_cut_bonus", rval = nil, args = { "int" }, location = { "./src/creature.h", 474 } },
        { name = "set_bash_bonus", rval = nil, args = { "int" }, location = { "./src/creature.h", 479 } },
        { name = "set_bash_mult", rval = nil, args = { "float" }, location = { "./src/creature.h", 493 } },
        { name = "set_block_bonus", rval = nil, args = { "int" }, location = { "./src/creature.h", 478 } },
        { name = "set_cut_bonus", rval = nil, args = { "int" }, location = { "./src/creature.h", 480 } },
        { name = "set_cut_mult", rval = nil, args = { "float" }, location = { "./src/creature.h", 494 } },
        { name = "set_dodge_bonus", rval = nil, args = { "float" }, location = { "./src/creature.h", 487 } },
        { name = "set_fake", rval = nil, args = { "bool" }, comment = "Sets a Creature's fake boolean.", location = { "./src/creature.h", 78 } },
        { name = "set_grab_resist", rval = nil, args = { "int" }, location = { "./src/creature.h", 497 } },
        { name = "set_hit_bonus", rval = nil, args = { "float" }, location = { "./src/creature.h", 488 } },
        { name = "set_melee_quiet", rval = nil, args = { "bool" }, location = { "./src/creature.h", 496 } },
        { name = "set_moves", rval = nil, args = { "int" }, location = { "./src/creature.h", 387 } },
        { name = "set_num_blocks_bonus", rval = nil, args = { "int" }, location = { "./src/creature.h", 470 } },
        { name = "set_num_dodges_bonus", rval = nil, args = { "int" }, location = { "./src/creature.h", 471 } },
        { name = "set_pain", rval = nil, args = { "int" }, location = { "./src/creature.h", 382 } },
        { name = "set_speed_base", rval = nil, args = { "int" }, location = { "./src/creature.h", 476 } },
        { name = "set_speed_bonus", rval = nil, args = { "int" }, location = { "./src/creature.h", 477 } },
        { name = "set_throw_resist", rval = nil, args = { "int" }, location = { "./src/creature.h", 498 } },
        { name = "set_value", rval = nil, args = { "std::string", "std::string" }, location = { "./src/creature.h", 369 } },
        { name = "setpos", rval = nil, args = { "tripoint" }, location = { "./src/creature.h", 334 } },
        { name = "sight_range", rval = "int", args = { "int" }, comment = "How far the creature sees under the given light. Places outside this range can          * @param light_level See @ref game::light_level.", location = { "./src/creature.h", 155 } },
        { name = "skin_name", rval = "std::string", args = { }, location = { "./src/creature.h", 60 } },
        { name = "speed_rating", rval = "float", args = { }, comment = "Returns an approximate number of tiles this creature can travel per turn.", location = { "./src/creature.h", 160 } },
        { name = "stability_roll", rval = "float", args = { }, location = { "./src/creature.h", 98 } },
        { name = "symbol", rval = "std::string", args = { }, location = { "./src/creature.h", 542 } },
        { name = "symbol_color", rval = "int", args = { }, location = { "./src/creature.h", 540 } },
        { name = "uncanny_dodge", rval = "bool", args = { }, location = { "./src/creature.h", 434 } },
        { name = "weight_capacity", rval = "int", args = { }, location = { "./src/creature.h", 500 } },
    }
}
classes['monster'] = {
    parents = {
        "Creature",
        "JsonSerializer",
        "JsonDeserializer",
    },
    attributes = {
        anger = { type = "int", writable = true },
        friendly = { type = "int", writable = true },
        hallucination = { type = "bool", writable = true },
        ignoring = { type = "int", writable = true },
        inv = { type = "std::vector<item>", writable = true },
        last_updated = { type = "int", writable = true },
        made_footstep = { type = "bool", writable = true },
        mission_id = { type = "int", writable = true },
        morale = { type = "int", writable = true },
        no_corpse_quiet = { type = "bool", writable = true },
        no_extra_death_drops = { type = "bool", writable = true },
        staircount = { type = "int", writable = true },
        type = { type = "mtype", writable = true },
        unique_name = { type = "std::string", writable = true },
        wander_pos = { type = "tripoint", writable = true },
        wandf = { type = "int", writable = true },
    },
    functions = {
        { name = "add_item", rval = nil, args = { "item" }, location = { "./src/monster.h", 351 } },
        { name = "attack_at", rval = "bool", args = { "tripoint" }, comment = "Attack any enemies at the given location.          *          * Attacks only if there is a creature at the given location towards          * we are hostile.          *          * @return true if something was attacked, false otherwise", location = { "./src/monster.h", 206 } },
        { name = "attack_target", rval = "Creature&", args = { }, location = { "./src/monster.h", 131 } },
        { name = "attitude", rval = "monster_attitude", args = { "Character" }, location = { "./src/monster.h", 239 } },
        { name = "attitude", rval = "monster_attitude", args = { }, location = { "./src/monster.h", 239 } },
        { name = "bash_at", rval = "bool", args = { "tripoint" }, comment = "Try to smash/bash/destroy your way through the terrain at p.          *          * @return true if we destroyed something, false otherwise.", location = { "./src/monster.h", 213 } },
        { name = "bash_estimate", rval = "int", args = { }, location = { "./src/monster.h", 229 } },
        { name = "bash_skill", rval = "int", args = { }, comment = "Returns innate monster bash skill, without calculating additional from helpers", location = { "./src/monster.h", 228 } },
        { name = "calc_climb_cost", rval = "int", args = { "tripoint", "tripoint" }, location = { "./src/monster.h", 177 } },
        { name = "calc_movecost", rval = "int", args = { "tripoint", "tripoint" }, location = { "./src/monster.h", 176 } },
        { name = "can_act", rval = "bool", args = { }, location = { "./src/monster.h", 115 } },
        { name = "can_drown", rval = "bool", args = { }, location = { "./src/monster.h", 112 } },
        { name = "can_hear", rval = "bool", args = { }, location = { "./src/monster.h", 110 } },
        { name = "can_move_to", rval = "bool", args = { "tripoint" }, comment = "Checks whether we can move to/through p. This does not account for bashing.          *          * This is used in pathfinding and ONLY checks the terrain. It ignores players          * and monsters, which might only block this tile temporarily.", location = { "./src/monster.h", 144 } },
        { name = "can_see", rval = "bool", args = { }, location = { "./src/monster.h", 109 } },
        { name = "can_submerge", rval = "bool", args = { }, location = { "./src/monster.h", 111 } },
        { name = "can_upgrade", rval = "bool", args = { }, location = { "./src/monster.h", 72 } },
        { name = "color_with_effects", rval = "int", args = { }, location = { "./src/monster.h", 104 } },
        { name = "die_in_explosion", rval = nil, args = { "Creature" }, location = { "./src/monster.h", 267 } },
        { name = "disable_special", rval = nil, args = { "std::string" }, comment = "Sets the enabled flag for the given special to false", location = { "./src/monster.h", 331 } },
        { name = "drop_items_on_death", rval = nil, args = { }, location = { "./src/monster.h", 340 } },
        { name = "explode", rval = nil, args = { }, location = { "./src/monster.h", 265 } },
        { name = "footsteps", rval = nil, args = { "tripoint" }, location = { "./src/monster.h", 173 } },
        { name = "get_hp", rval = "int", args = { }, location = { "./src/monster.h", 80 } },
        { name = "get_hp_max", rval = "int", args = { }, location = { "./src/monster.h", 84 } },
        { name = "group_bash_skill", rval = "int", args = { "tripoint" }, comment = "Returns ability of monster and any cooperative helpers to          * bash the designated target.", location = { "./src/monster.h", 232 } },
        { name = "hasten_upgrade", rval = nil, args = { }, location = { "./src/monster.h", 73 } },
        { name = "heal", rval = "int", args = { "int" }, comment = "Flat addition to the monsters @ref hp. If `overheal` is true, this is not capped by max hp.          * Returns actually healed hp.", location = { "./src/monster.h", 272 } },
        { name = "heal", rval = "int", args = { "int", "bool" }, comment = "Flat addition to the monsters @ref hp. If `overheal` is true, this is not capped by max hp.          * Returns actually healed hp.", location = { "./src/monster.h", 272 } },
        { name = "hear_sound", rval = nil, args = { "tripoint", "int", "int" }, comment = "Makes monster react to heard sound          *          * @param from Location of the sound source          * @param source_volume Volume at the center of the sound source          * @param distance Distance to sound source (currently just rl_dist)", location = { "./src/monster.h", 360 } },
        { name = "init_from_item", rval = nil, args = { "item" }, comment = "Initialize values like speed / hp from data of an item.          * This applies to robotic monsters that are spawned by invoking an item (e.g. turret),          * and to reviving monsters that spawn from a corpse.", location = { "./src/monster.h", 422 } },
        { name = "is_dead", rval = "bool", args = { }, location = { "./src/monster.h", 386 } },
        { name = "is_fleeing", rval = "bool", args = { "player" }, location = { "./src/monster.h", 238 } },
        { name = "load_info", rval = nil, args = { "std::string" }, location = { "./src/monster.h", 123 } },
        { name = "made_of", rval = "bool", args = { "phase_id" }, location = { "./src/monster.h", 119 } },
        { name = "make_ally", rval = nil, args = { "monster" }, comment = "Makes this monster an ally of the given monster.", location = { "./src/monster.h", 350 } },
        { name = "make_friendly", rval = nil, args = { }, location = { "./src/monster.h", 348 } },
        { name = "make_fungus", rval = "bool", args = { }, comment = "Makes this monster into a fungus version          * Returns false if no such monster exists", location = { "./src/monster.h", 347 } },
        { name = "move", rval = nil, args = { }, location = { "./src/monster.h", 172 } },
        { name = "move_target", rval = "tripoint", args = { }, location = { "./src/monster.h", 130 } },
        { name = "move_to", rval = "bool", args = { "tripoint" }, comment = "Attempt to move to p.          *          * If there's something blocking the movement, such as infinite move          * costs at the target, an existing NPC or monster, this function simply          * aborts and does nothing.          *          * @param p Destination of movement          * @param force If this is set to true, the movement will happen even if          *              there's currently something blocking the destination.          *          * @param stagger_adjustment is a multiplier for move cost to compensate for staggering.          *          * @return true if movement successful, false otherwise", location = { "./src/monster.h", 196 } },
        { name = "move_to", rval = "bool", args = { "tripoint", "bool" }, comment = "Attempt to move to p.          *          * If there's something blocking the movement, such as infinite move          * costs at the target, an existing NPC or monster, this function simply          * aborts and does nothing.          *          * @param p Destination of movement          * @param force If this is set to true, the movement will happen even if          *              there's currently something blocking the destination.          *          * @param stagger_adjustment is a multiplier for move cost to compensate for staggering.          *          * @return true if movement successful, false otherwise", location = { "./src/monster.h", 196 } },
        { name = "move_to", rval = "bool", args = { "tripoint", "bool", "float" }, comment = "Attempt to move to p.          *          * If there's something blocking the movement, such as infinite move          * costs at the target, an existing NPC or monster, this function simply          * aborts and does nothing.          *          * @param p Destination of movement          * @param force If this is set to true, the movement will happen even if          *              there's currently something blocking the destination.          *          * @param stagger_adjustment is a multiplier for move cost to compensate for staggering.          *          * @return true if movement successful, false otherwise", location = { "./src/monster.h", 196 } },
        { name = "name", rval = "std::string", args = { "int" }, location = { "./src/monster.h", 89 } },
        { name = "name", rval = "std::string", args = { }, location = { "./src/monster.h", 89 } },
        { name = "name_with_armor", rval = "std::string", args = { }, location = { "./src/monster.h", 90 } },
        { name = "on_load", rval = nil, args = { }, comment = "Retroactively update monster.", location = { "./src/monster.h", 432 } },
        { name = "on_unload", rval = nil, args = { }, comment = "Do some cleanup and caching as monster is being unloaded from map.", location = { "./src/monster.h", 428 } },
        { name = "poly", rval = nil, args = { "mtype_id" }, location = { "./src/monster.h", 71 } },
        { name = "process_trigger", rval = nil, args = { "monster_trigger", "int" }, location = { "./src/monster.h", 242 } },
        { name = "process_triggers", rval = nil, args = { }, location = { "./src/monster.h", 241 } },
        { name = "push_to", rval = "bool", args = { "tripoint", "int", "int" }, comment = "Try to push away whatever occupies p, then step in.          * May recurse and try to make the creature at p push further.          *          * @param p Location of pushed object          * @param boost A bonus on the roll to represent a horde pushing from behind          * @param depth Number of recursions so far          *          * @return True if we managed to push something and took its place, false otherwise.", location = { "./src/monster.h", 225 } },
        { name = "rate_target", rval = "float", args = { "Creature", "float" }, location = { "./src/monster.h", 168 } },
        { name = "rate_target", rval = "float", args = { "Creature", "float", "bool" }, location = { "./src/monster.h", 168 } },
        { name = "reset_special", rval = nil, args = { "std::string" }, comment = "Resets a given special to its monster type cooldown value", location = { "./src/monster.h", 325 } },
        { name = "reset_special_rng", rval = nil, args = { "std::string" }, comment = "Resets a given special to a value between 0 and its monster type cooldown value.", location = { "./src/monster.h", 327 } },
        { name = "scent_move", rval = "tripoint", args = { }, location = { "./src/monster.h", 175 } },
        { name = "set_dest", rval = nil, args = { "tripoint" }, location = { "./src/monster.h", 150 } },
        { name = "set_hp", rval = nil, args = { "int" }, comment = "Directly set the current @ref hp of the monster (not capped at the maximal hp).          * You might want to use @ref heal / @ref apply_damage or @ref deal_damage instead.", location = { "./src/monster.h", 277 } },
        { name = "set_special", rval = nil, args = { "std::string", "int" }, comment = "Sets a given special to the given value", location = { "./src/monster.h", 329 } },
        { name = "shift", rval = nil, args = { "int", "int" }, location = { "./src/monster.h", 134 } },
        { name = "spawn", rval = nil, args = { "tripoint" }, location = { "./src/monster.h", 75 } },
        { name = "stumble", rval = nil, args = { }, location = { "./src/monster.h", 234 } },
        { name = "to_item", rval = "item", args = { }, comment = "Convert this monster into an item (see @ref mtype::revert_to_itype).          * Only useful for robots and the like, the monster must have at least          * a non-empty item id as revert_to_itype.", location = { "./src/monster.h", 416 } },
        { name = "trigger_sum", rval = "int", args = { "std::set<monster_trigger>" }, location = { "./src/monster.h", 243 } },
        { name = "try_upgrade", rval = nil, args = { "bool" }, location = { "./src/monster.h", 74 } },
        { name = "turns_to_reach", rval = "int", args = { "int", "int" }, location = { "./src/monster.h", 147 } },
        { name = "unset_dest", rval = nil, args = { }, location = { "./src/monster.h", 152 } },
        { name = "wander", rval = "bool", args = { }, location = { "./src/monster.h", 136 } },
        { name = "wander_to", rval = nil, args = { "tripoint", "int" }, comment = "Set p as wander destination.          *          * This will cause the monster to slowly move towards the destination,          * unless there is an overriding smell or plan.          *          * @param p Destination of monster's wonderings          * @param f The priority of the destination, as well as how long we should          *          wander towards there.", location = { "./src/monster.h", 164 } },
        { name = "will_reach", rval = "bool", args = { "int", "int" }, location = { "./src/monster.h", 146 } },
    }
}
classes['martialart'] = {
    string_id = "matype_id",
    attributes = {
        arm_block = { type = "int", writable = true },
        arm_block_with_bio_armor_arms = { type = "bool", writable = true },
        description = { type = "std::string", writable = true },
        id = { type = "matype_id" },
        leg_block = { type = "int", writable = true },
        leg_block_with_bio_armor_legs = { type = "bool", writable = true },
        name = { type = "std::string", writable = true },
        onattack_buffs = { type = "std::vector<mabuff_id>", writable = true },
        onblock_buffs = { type = "std::vector<mabuff_id>", writable = true },
        ondodge_buffs = { type = "std::vector<mabuff_id>", writable = true },
        ongethit_buffs = { type = "std::vector<mabuff_id>", writable = true },
        onhit_buffs = { type = "std::vector<mabuff_id>", writable = true },
        onmove_buffs = { type = "std::vector<mabuff_id>", writable = true },
        static_buffs = { type = "std::vector<mabuff_id>", writable = true },
        strictly_unarmed = { type = "bool", writable = true },
        techniques = { type = "std::set<matec_id>", writable = true },
        weapons = { type = "std::set<std::string>", writable = true },
    },
    functions = {
        { name = "apply_onattack_buffs", rval = nil, args = { "player" }, location = { "./src/martialarts.h", 193 } },
        { name = "apply_onblock_buffs", rval = nil, args = { "player" }, location = { "./src/martialarts.h", 197 } },
        { name = "apply_ondodge_buffs", rval = nil, args = { "player" }, location = { "./src/martialarts.h", 195 } },
        { name = "apply_ongethit_buffs", rval = nil, args = { "player" }, location = { "./src/martialarts.h", 199 } },
        { name = "apply_onhit_buffs", rval = nil, args = { "player" }, location = { "./src/martialarts.h", 191 } },
        { name = "apply_onmove_buffs", rval = nil, args = { "player" }, location = { "./src/martialarts.h", 189 } },
        { name = "apply_static_buffs", rval = nil, args = { "player" }, location = { "./src/martialarts.h", 187 } },
        { name = "has_technique", rval = "bool", args = { "player", "matec_id" }, location = { "./src/martialarts.h", 202 } },
        { name = "has_weapon", rval = "bool", args = { "std::string" }, location = { "./src/martialarts.h", 204 } },
        { name = "weapon_valid", rval = "bool", args = { "item" }, location = { "./src/martialarts.h", 206 } },
    }
}
classes['material_type'] = {
    string_id = "material_id",
    attributes = {
        id = { type = "material_id" },
    },
    functions = {
        { name = "acid_resist", rval = "int", args = { }, location = { "./src/material.h", 65 } },
        { name = "bash_dmg_verb", rval = "std::string", args = { }, location = { "./src/material.h", 62 } },
        { name = "bash_resist", rval = "int", args = { }, location = { "./src/material.h", 60 } },
        { name = "check", rval = nil, args = { }, location = { "./src/material.h", 52 } },
        { name = "chip_resist", rval = "int", args = { }, location = { "./src/material.h", 68 } },
        { name = "cut_dmg_verb", rval = "std::string", args = { }, location = { "./src/material.h", 63 } },
        { name = "cut_resist", rval = "int", args = { }, location = { "./src/material.h", 61 } },
        { name = "dam_resist", rval = "int", args = { "damage_type" }, location = { "./src/material.h", 54 } },
        { name = "density", rval = "int", args = { }, location = { "./src/material.h", 69 } },
        { name = "dmg_adj", rval = "std::string", args = { "int" }, location = { "./src/material.h", 64 } },
        { name = "edible", rval = "bool", args = { }, location = { "./src/material.h", 70 } },
        { name = "elec_resist", rval = "int", args = { }, location = { "./src/material.h", 66 } },
        { name = "fire_resist", rval = "int", args = { }, location = { "./src/material.h", 67 } },
        { name = "ident", rval = "material_id", args = { }, location = { "./src/material.h", 56 } },
        { name = "name", rval = "std::string", args = { }, location = { "./src/material.h", 57 } },
        { name = "repaired_with", rval = "std::string", args = { }, location = { "./src/material.h", 59 } },
        { name = "salvaged_into", rval = "std::string", args = { }, location = { "./src/material.h", 58 } },
        { name = "soft", rval = "bool", args = { }, location = { "./src/material.h", 71 } },
        { name = "vitamin", rval = "float", args = { "vitamin_id" }, location = { "./src/material.h", 73 } },
    }
}
classes['start_location'] = {
    string_id = "start_location_id",
    functions = {
        { name = "add_map_special", rval = nil, args = { "tripoint", "std::string" }, comment = "Adds a map special, see mapgen.h and mapgen.cpp. Look at the namespace MapExtras.", location = { "./src/start_location.h", 64 } },
        { name = "burn", rval = nil, args = { "tripoint", "int", "int" }, comment = "Burn random terrain / furniture with FLAMMABLE or FLAMMABLE_ASH tag.          * Doors and windows are excluded.          * @param omtstart Global overmap terrain coordinates where the player is to be spawned.          * @param rad safe radius area to prevent player spawn next to burning wall.          * @param count number of fire on the map.", location = { "./src/start_location.h", 59 } },
        { name = "find_player_initial_location", rval = "tripoint", args = { }, comment = "Find a suitable start location on the overmap.          * @return Global, absolute overmap terrain coordinates where the player should spawn.          * It may return `overmap::invalid_tripoint` if no suitable starting location could be found          * in the world.", location = { "./src/start_location.h", 42 } },
        { name = "flags", rval = "std::set<std::string>", args = { }, location = { "./src/start_location.h", 29 } },
        { name = "handle_heli_crash", rval = nil, args = { "player" }, location = { "./src/start_location.h", 66 } },
        { name = "name", rval = "std::string", args = { }, location = { "./src/start_location.h", 27 } },
        { name = "place_player", rval = nil, args = { "player" }, comment = "Place the player somewher ein th reality bubble (g->m).", location = { "./src/start_location.h", 51 } },
        { name = "prepare_map", rval = nil, args = { "tripoint" }, comment = "Initialize the map at players start location using @ref prepare_map.          * @param omtstart Global overmap terrain coordinates where the player is to be spawned.", location = { "./src/start_location.h", 47 } },
        { name = "target", rval = "std::string", args = { }, location = { "./src/start_location.h", 28 } },
    }
}
classes['ma_buff'] = {
    string_id = "mabuff_id",
    attributes = {
        blocks_bonus = { type = "int", writable = true },
        buff_duration = { type = "int", writable = true },
        description = { type = "std::string", writable = true },
        dodges_bonus = { type = "int", writable = true },
        id = { type = "mabuff_id" },
        max_stacks = { type = "int", writable = true },
        melee_allowed = { type = "bool", writable = true },
        name = { type = "std::string", writable = true },
        quiet = { type = "bool", writable = true },
        strictly_unarmed = { type = "bool", writable = true },
        throw_immune = { type = "bool", writable = true },
    },
    functions = {
        { name = "apply_buff", rval = nil, args = { "player" }, location = { "./src/martialarts.h", 119 } },
        { name = "apply_player", rval = nil, args = { "player" }, location = { "./src/martialarts.h", 125 } },
        { name = "armor_bonus", rval = "int", args = { "player", "damage_type" }, location = { "./src/martialarts.h", 134 } },
        { name = "block_bonus", rval = "int", args = { "player" }, location = { "./src/martialarts.h", 131 } },
        { name = "can_melee", rval = "bool", args = { }, location = { "./src/martialarts.h", 146 } },
        { name = "damage_bonus", rval = "float", args = { "player", "damage_type" }, location = { "./src/martialarts.h", 137 } },
        { name = "damage_mult", rval = "float", args = { "player", "damage_type" }, location = { "./src/martialarts.h", 141 } },
        { name = "dodge_bonus", rval = "int", args = { "player" }, location = { "./src/martialarts.h", 129 } },
        { name = "from_effect", static = true, rval = "ma_buff&", args = { "effect" }, location = { "./src/martialarts.h", 151 } },
        { name = "get_effect_id", rval = "efftype_id", args = { }, location = { "./src/martialarts.h", 149 } },
        { name = "hit_bonus", rval = "int", args = { "player" }, location = { "./src/martialarts.h", 128 } },
        { name = "is_quiet", rval = "bool", args = { }, location = { "./src/martialarts.h", 145 } },
        { name = "is_throw_immune", rval = "bool", args = { }, location = { "./src/martialarts.h", 144 } },
        { name = "is_valid_player", rval = "bool", args = { "player" }, location = { "./src/martialarts.h", 122 } },
        { name = "speed_bonus", rval = "int", args = { "player" }, location = { "./src/martialarts.h", 130 } },
    }
}
classes['ma_technique'] = {
    string_id = "matec_id",
    attributes = {
        aoe = { type = "std::string", writable = true },
        block_counter = { type = "bool", writable = true },
        crit_tec = { type = "bool", writable = true },
        defensive = { type = "bool", writable = true },
        disarms = { type = "bool", writable = true },
        dodge_counter = { type = "bool", writable = true },
        down_dur = { type = "int", writable = true },
        dummy = { type = "bool", writable = true },
        flags = { type = "std::set<std::string>", writable = true },
        goal = { type = "std::string", writable = true },
        grab_break = { type = "bool", writable = true },
        id = { type = "matec_id" },
        knockback_dist = { type = "int", writable = true },
        knockback_spread = { type = "float", writable = true },
        miss_recovery = { type = "bool", writable = true },
        name = { type = "std::string", writable = true },
        npc_message = { type = "std::string", writable = true },
        player_message = { type = "std::string", writable = true },
        stun_dur = { type = "int", writable = true },
        weighting = { type = "int", writable = true },
    },
    functions = {
        { name = "armor_penetration", rval = "float", args = { "player", "damage_type" }, location = { "./src/martialarts.h", 109 } },
        { name = "damage_bonus", rval = "float", args = { "player", "damage_type" }, location = { "./src/martialarts.h", 105 } },
        { name = "damage_multiplier", rval = "float", args = { "player", "damage_type" }, location = { "./src/martialarts.h", 106 } },
        { name = "is_valid_player", rval = "bool", args = { "player" }, location = { "./src/martialarts.h", 72 } },
        { name = "move_cost_multiplier", rval = "float", args = { "player" }, location = { "./src/martialarts.h", 107 } },
        { name = "move_cost_penalty", rval = "float", args = { "player" }, location = { "./src/martialarts.h", 108 } },
    }
}
classes['Skill'] = {
    string_id = "skill_id",
    has_equal = true,
    functions = {
        { name = "description", rval = "std::string", args = { }, location = { "./src/skill.h", 53 } },
        { name = "from_legacy_int", static = true, rval = "skill_id", args = { "int" }, location = { "./src/skill.h", 31 } },
        { name = "get", static = true, rval = "Skill&", args = { "skill_id" }, location = { "./src/skill.h", 34 } },
        { name = "ident", rval = "skill_id", args = { }, location = { "./src/skill.h", 47 } },
        { name = "is_combat_skill", rval = "bool", args = { }, location = { "./src/skill.h", 68 } },
        { name = "is_contextual_skill", rval = "bool", args = { }, location = { "./src/skill.h", 69 } },
        { name = "name", rval = "std::string", args = { }, location = { "./src/skill.h", 50 } },
        { name = "random_skill", static = true, rval = "skill_id", args = { }, location = { "./src/skill.h", 32 } },
        { name = "skill_count", static = true, rval = "int", args = { }, location = { "./src/skill.h", 36 } },
    }
}
classes['quality'] = {
    string_id = "quality_id",
    attributes = {
        id = { type = "quality_id" },
        name = { type = "std::string", writable = true },
    },
}
classes['species_type'] = {
    string_id = "species_id",
    attributes = {
        anger_trig = { type = "std::set<monster_trigger>", writable = true },
        fear_trig = { type = "std::set<monster_trigger>", writable = true },
        flags = { type = "std::set<m_flag>", writable = true },
        id = { type = "species_id" },
        placate_trig = { type = "std::set<monster_trigger>", writable = true },
    },
}
classes['MonsterGroup'] = {
    string_id = "mongroup_id",
    attributes = {
        defaultMonster = { type = "mtype_id", writable = true },
        is_safe = { type = "bool", writable = true },
        monster_group_time = { type = "int", writable = true },
        name = { type = "mongroup_id", writable = true },
        new_monster_group = { type = "mongroup_id", writable = true },
        replace_monster_group = { type = "bool", writable = true },
    },
    functions = {
        { name = "IsMonsterInGroup", rval = "bool", args = { "mtype_id" }, location = { "./src/mongroup.h", 78 } },
    }
}
classes['mtype'] = {
    string_id = "mtype_id",
    attributes = {
        agro = { type = "int", writable = true },
        anger = { type = "std::set<monster_trigger>", writable = true },
        armor_acid = { type = "int", writable = true },
        armor_bash = { type = "int", writable = true },
        armor_cut = { type = "int", writable = true },
        armor_fire = { type = "int", writable = true },
        armor_stab = { type = "int", writable = true },
        attack_cost = { type = "int", writable = true },
        bash_skill = { type = "int", writable = true },
        burn_into = { type = "mtype_id", writable = true },
        categories = { type = "std::set<std::string>", writable = true },
        color = { type = "int", writable = true },
        death_drops = { type = "std::string", writable = true },
        def_chance = { type = "int", writable = true },
        description = { type = "std::string", writable = true },
        difficulty = { type = "int", writable = true },
        fear = { type = "std::set<monster_trigger>", writable = true },
        flags = { type = "std::set<m_flag>", writable = true },
        half_life = { type = "int", writable = true },
        hp = { type = "int", writable = true },
        id = { type = "mtype_id" },
        luminance = { type = "float", writable = true },
        mat = { type = "std::vector<material_id>", writable = true },
        melee_damage = { type = "damage_instance", writable = true },
        melee_dice = { type = "int", writable = true },
        melee_sides = { type = "int", writable = true },
        melee_skill = { type = "int", writable = true },
        morale = { type = "int", writable = true },
        phase = { type = "phase_id", writable = true },
        placate = { type = "std::set<monster_trigger>", writable = true },
        revert_to_itype = { type = "std::string", writable = true },
        size = { type = "m_size", writable = true },
        sk_dodge = { type = "int", writable = true },
        special_attacks_names = { type = "std::vector<std::string>", writable = true },
        species = { type = "std::set<species_id>", writable = true },
        speed = { type = "int", writable = true },
        sym = { type = "std::string", writable = true },
        upgrade_group = { type = "mongroup_id", writable = true },
        upgrade_into = { type = "mtype_id", writable = true },
        upgrades = { type = "bool", writable = true },
        vision_day = { type = "int", writable = true },
        vision_night = { type = "int", writable = true },
    },
    functions = {
        { name = "bloodType", rval = "field_id", args = { }, location = { "./src/mtype.h", 301 } },
        { name = "get_meat_chunks_count", rval = "int", args = { }, location = { "./src/mtype.h", 306 } },
        { name = "get_meat_itype", rval = "std::string", args = { }, location = { "./src/mtype.h", 305 } },
        { name = "gibType", rval = "field_id", args = { }, location = { "./src/mtype.h", 302 } },
        { name = "has_anger_trigger", rval = "bool", args = { "monster_trigger" }, location = { "./src/mtype.h", 294 } },
        { name = "has_fear_trigger", rval = "bool", args = { "monster_trigger" }, location = { "./src/mtype.h", 295 } },
        { name = "has_flag", rval = "bool", args = { "m_flag" }, location = { "./src/mtype.h", 290 } },
        { name = "has_flag", rval = "bool", args = { "std::string" }, location = { "./src/mtype.h", 291 } },
        { name = "has_placate_trigger", rval = "bool", args = { "monster_trigger" }, location = { "./src/mtype.h", 296 } },
        { name = "has_special_attack", rval = "bool", args = { "std::string" }, location = { "./src/mtype.h", 289 } },
        { name = "in_category", rval = "bool", args = { "std::string" }, location = { "./src/mtype.h", 297 } },
        { name = "in_species", rval = "bool", args = { "species_id" }, location = { "./src/mtype.h", 298 } },
        { name = "in_species", rval = "bool", args = { "species_type" }, location = { "./src/mtype.h", 299 } },
        { name = "made_of", rval = "bool", args = { "material_id" }, location = { "./src/mtype.h", 292 } },
        { name = "nname", rval = "std::string", args = { "int" }, location = { "./src/mtype.h", 288 } },
        { name = "nname", rval = "std::string", args = { }, location = { "./src/mtype.h", 288 } },
        { name = "same_species", rval = "bool", args = { "mtype" }, comment = "Check if this type is of the same species as the other one, because          * species is a set and can contain several species, one entry that is          * in both monster types fulfills that test.", location = { "./src/mtype.h", 275 } },
        { name = "set_flag", rval = nil, args = { "std::string", "bool" }, location = { "./src/mtype.h", 293 } },
    }
}
classes['mongroup'] = {
    parents = {
        "JsonSerializer",
        "JsonDeserializer",
    },
    attributes = {
        diffuse = { type = "bool", writable = true },
        dying = { type = "bool", writable = true },
        horde = { type = "bool", writable = true },
        horde_behaviour = { type = "std::string", writable = true },
        interest = { type = "int", writable = true },
        population = { type = "int", writable = true },
        pos = { type = "tripoint", writable = true },
        radius = { type = "int", writable = true },
        target = { type = "tripoint", writable = true },
        type = { type = "mongroup_id", writable = true },
    },
    functions = {
        { name = "clear", rval = nil, args = { }, location = { "./src/mongroup.h", 131 } },
        { name = "dec_interest", rval = nil, args = { "int" }, location = { "./src/mongroup.h", 143 } },
        { name = "empty", rval = "bool", args = { }, location = { "./src/mongroup.h", 130 } },
        { name = "inc_interest", rval = nil, args = { "int" }, location = { "./src/mongroup.h", 137 } },
        { name = "is_safe", rval = "bool", args = { }, location = { "./src/mongroup.h", 129 } },
        { name = "set_interest", rval = nil, args = { "int" }, location = { "./src/mongroup.h", 149 } },
        { name = "set_target", rval = nil, args = { "int", "int" }, location = { "./src/mongroup.h", 132 } },
        { name = "wander", rval = nil, args = { "overmap" }, location = { "./src/mongroup.h", 136 } },
    }
}
classes['overmap'] = {
    attributes = {
        invalid_tripoint = { type = "tripoint", static = true },
    },
    functions = {
        { name = "add_note", rval = nil, args = { "int", "int", "int", "std::string" }, location = { "./src/overmap.h", 205 } },
        { name = "add_npc", rval = nil, args = { "npc" }, location = { "./src/overmap.h", 293 } },
        { name = "clear", rval = nil, args = { }, location = { "./src/overmap.h", 180 } },
        { name = "clear_mon_groups", rval = nil, args = { }, location = { "./src/overmap.h", 285 } },
        { name = "delete_note", rval = nil, args = { "int", "int", "int" }, location = { "./src/overmap.h", 206 } },
        { name = "display_notes", static = true, rval = "point", args = { "int" }, comment = "@todo This one should be obsoleted     /**      * Display a list of all notes on this z-level. Let the user choose      * one or none of them.      * @returns The location of the chosen note (absolute overmap terrain      * coordinates), or invalid_point if the user did not choose a note.", location = { "./src/overmap.h", 230 } },
        { name = "draw_editor", static = true, rval = "tripoint", args = { }, location = { "./src/overmap.h", 275 } },
        { name = "draw_hordes", static = true, rval = "tripoint", args = { }, comment = "Draw overmap like with @ref draw_overmap() and display hordes.", location = { "./src/overmap.h", 252 } },
        { name = "draw_overmap", static = true, rval = "tripoint", args = { "int" }, comment = "Same as @ref draw_overmap() but starts at select if set.      * Otherwise on players location.      */     /**      * Same as above but start at z-level z instead of players      * current z-level, x and y are taken from the players position.", location = { "./src/overmap.h", 273 } },
        { name = "draw_overmap", static = true, rval = "tripoint", args = { }, comment = "Interactive point choosing; used as the map screen.      * The map is initially center at the players position.      * @returns The absolute coordinates of the chosen point or      * invalid_point if canceled with escape (or similar key).", location = { "./src/overmap.h", 248 } },
        { name = "draw_scents", static = true, rval = "tripoint", args = { }, comment = "Draw overmap like with @ref draw_overmap() and display scent traces.", location = { "./src/overmap.h", 260 } },
        { name = "draw_weather", static = true, rval = "tripoint", args = { }, comment = "Draw overmap like with @ref draw_overmap() and display the weather.", location = { "./src/overmap.h", 256 } },
        { name = "draw_zones", static = true, rval = "tripoint", args = { "tripoint", "tripoint", "int" }, comment = "Draw overmap like with @ref draw_overmap() and display the given zone.", location = { "./src/overmap.h", 264 } },
        { name = "find_notes", rval = "std::vector<point>", args = { "int", "std::string" }, comment = "Return a vector containing the absolute coordinates of      * every matching note on the current z level of the current overmap.      * @returns A vector of note coordinates (absolute overmap terrain      * coordinates), or empty vector if no matching notes are found.", location = { "./src/overmap.h", 241 } },
        { name = "find_random_omt", rval = "tripoint", args = { "std::string" }, comment = "@return The (local) overmap terrain coordinates of a randomly      * chosen place on the overmap with the specific overmap terrain.      * Returns @ref invalid_tripoint if no suitable place has been found.", location = { "./src/overmap.h", 187 } },
        { name = "find_terrain", rval = "std::vector<point>", args = { "std::string", "int" }, comment = "Return a vector containing the absolute coordinates of      * every matching terrain on the current z level of the current overmap.      * @returns A vector of terrain coordinates (absolute overmap terrain      * coordinates), or empty vector if no matching terrain is found.", location = { "./src/overmap.h", 194 } },
        { name = "global_base_point", rval = "point", args = { }, comment = "Returns the (0, 0) corner of the overmap in the global coordinates.", location = { "./src/overmap.h", 278 } },
        { name = "has_note", rval = "bool", args = { "int", "int", "int" }, location = { "./src/overmap.h", 203 } },
        { name = "inbounds", static = true, rval = "bool", args = { "int", "int", "int" }, location = { "./src/overmap.h", 223 } },
        { name = "inbounds", static = true, rval = "bool", args = { "int", "int", "int", "int" }, location = { "./src/overmap.h", 223 } },
        { name = "inbounds", static = true, rval = "bool", args = { "tripoint" }, comment = "@returns Whether @param loc is within desired bounds of the overmap      * @param clearance Minimal distance from the edges of the overmap", location = { "./src/overmap.h", 222 } },
        { name = "inbounds", static = true, rval = "bool", args = { "tripoint", "int" }, comment = "@returns Whether @param loc is within desired bounds of the overmap      * @param clearance Minimal distance from the edges of the overmap", location = { "./src/overmap.h", 222 } },
        { name = "is_explored", rval = "bool", args = { "int", "int", "int" }, location = { "./src/overmap.h", 201 } },
        { name = "mongroup_check", rval = "bool", args = { "mongroup" }, comment = "Unit test enablers to check if a given mongroup is present.", location = { "./src/overmap.h", 290 } },
        { name = "note", rval = "std::string", args = { "int", "int", "int" }, location = { "./src/overmap.h", 204 } },
        { name = "pos", rval = "point", args = { }, location = { "./src/overmap.h", 177 } },
        { name = "save", rval = nil, args = { }, location = { "./src/overmap.h", 179 } },
    }
}
classes['itype'] = {
    attributes = {
        color = { type = "int", writable = true },
        countdown_destroy = { type = "bool", writable = true },
        countdown_interval = { type = "int", writable = true },
        damage_max = { type = "int", writable = true },
        damage_min = { type = "int", writable = true },
        default_container = { type = "std::string", writable = true },
        description = { type = "std::string", writable = true },
        explode_in_fire = { type = "bool", writable = true },
        integral_volume = { type = "units::volume", writable = true },
        item_tags = { type = "std::set<std::string>", writable = true },
        light_emission = { type = "int", writable = true },
        m_to_hit = { type = "int", writable = true },
        magazine_well = { type = "units::volume", writable = true },
        materials = { type = "std::vector<material_id>", writable = true },
        min_dex = { type = "int", writable = true },
        min_int = { type = "int", writable = true },
        min_per = { type = "int", writable = true },
        min_str = { type = "int", writable = true },
        phase = { type = "phase_id", writable = true },
        price = { type = "int", writable = true },
        price_post = { type = "int", writable = true },
        properties = { type = "std::map<std::string, std::string>", writable = true },
        repair = { type = "std::set<std::string>", writable = true },
        rigid = { type = "bool", writable = true },
        snippet_category = { type = "std::string", writable = true },
        stack_size = { type = "int", writable = true },
        stackable = { type = "bool", writable = true },
        sym = { type = "std::string", writable = true },
        techniques = { type = "std::set<matec_id>", writable = true },
        thrown_damage = { type = "damage_instance", writable = true },
        volume = { type = "units::volume", writable = true },
        weight = { type = "int", writable = true },
    },
    functions = {
        { name = "can_use", rval = "bool", args = { "std::string" }, location = { "./src/itype.h", 765 } },
        { name = "charges_default", rval = "int", args = { }, location = { "./src/itype.h", 737 } },
        { name = "charges_to_use", rval = "int", args = { }, location = { "./src/itype.h", 748 } },
        { name = "count_by_charges", rval = "bool", args = { }, location = { "./src/itype.h", 735 } },
        { name = "get_id", rval = "std::string", args = { }, location = { "./src/itype.h", 731 } },
        { name = "get_item_type_string", rval = "std::string", args = { }, location = { "./src/itype.h", 704 } },
        { name = "has_use", rval = "bool", args = { }, location = { "./src/itype.h", 764 } },
        { name = "invoke", rval = "int", args = { "player", "item", "tripoint" }, location = { "./src/itype.h", 769 } },
        { name = "invoke", rval = "int", args = { "player", "item", "tripoint", "std::string" }, location = { "./src/itype.h", 770 } },
        { name = "maximum_charges", rval = "int", args = { }, location = { "./src/itype.h", 756 } },
        { name = "nname", rval = "std::string", args = { "int" }, location = { "./src/itype.h", 728 } },
        { name = "tick", rval = "int", args = { "player", "item", "tripoint" }, location = { "./src/itype.h", 771 } },
    }
}
classes['trap'] = {
    string_id = "trap_str_id",
    int_id = "trap_id",
    attributes = {
        color = { type = "int", writable = true },
        id = { type = "trap_str_id" },
        loadid = { type = "trap_id" },
        name = { type = "std::string", writable = true },
        sym = { type = "int", writable = true },
    },
    functions = {
        { name = "can_see", rval = "bool", args = { "tripoint", "player" }, comment = "Can player/npc p see this kind of trap, either by their memory (they known there is          * the trap) or by the visibility of the trap (the trap is not hidden at all)?", location = { "./src/trap.h", 120 } },
        { name = "count", static = true, rval = "int", args = { }, location = { "./src/trap.h", 199 } },
        { name = "detect_trap", rval = "bool", args = { "tripoint", "player" }, comment = "Player has not yet seen the trap and returns the variable chance, at this moment,          of whether the trap is seen or not.", location = { "./src/trap.h", 115 } },
        { name = "funnel_turns_per_charge", rval = "float", args = { "float" }, location = { "./src/trap.h", 165 } },
        { name = "get_avoidance", rval = "int", args = { }, comment = "Whether triggering the trap can be avoid (if greater than 0) and if so, this is          * compared to dodge skill (with some adjustments). Smaller values means it's easier          * to dodge.", location = { "./src/trap.h", 95 } },
        { name = "get_difficulty", rval = "int", args = { }, comment = "This is used when disarming the trap. A value of 0 means disarming will always work          * (e.g. for funnels), a values of 99 means it can not be disarmed at all. Smaller values          * makes it easier to disarm the trap.", location = { "./src/trap.h", 103 } },
        { name = "get_visibility", rval = "int", args = { }, comment = "How easy it is to spot the trap. Smaller values means it's easier to spot.", location = { "./src/trap.h", 87 } },
        { name = "is_3x3_trap", rval = "bool", args = { }, comment = "Whether this kind of trap actually occupies a 3x3 area. Currently only blade traps          * do so.", location = { "./src/trap.h", 144 } },
        { name = "is_benign", rval = "bool", args = { }, comment = "If true, this is not really a trap and there won't be any safety queries before stepping          * onto it (e.g. for funnels).", location = { "./src/trap.h", 110 } },
        { name = "is_funnel", rval = "bool", args = { }, comment = "@name Funnels          *          * Traps can act as funnels, for this they need a @ref trap::funnel_radius_mm > 0.          * Funnels are usual not hidden at all (@ref trap::visibility == 0), are @ref trap::benign and can          * be picked up easily (@ref trap::difficulty == 0).          * The funnel filling is handled in weather.cpp. is_funnel is used the check whether the          * funnel specific code should be run for this trap.", location = { "./src/trap.h", 164 } },
        { name = "is_null", rval = "bool", args = { }, comment = "Whether this is the null-traps, aka no trap at all.", location = { "./src/trap.h", 148 } },
        { name = "on_disarmed", rval = nil, args = { "tripoint" }, comment = "Called when a trap at the given point in the main map has been disarmed.          * It should spawn trap items (if any) and remove the trap from the map via          * @ref map::remove_trap.", location = { "./src/trap.h", 139 } },
        { name = "trigger", rval = nil, args = { "tripoint", "Creature" }, comment = "Trigger trap effects.          * @param creature The creature that triggered the trap, it does not necessarily have to          * be on the place of the trap (traps can be triggered from adjacent, e.g. when disarming          * them). This can also be a null pointer if the trap has been triggered by some thrown          * item (which must have the @ref trigger_weight).          * @param pos The location of the trap in the main map.", location = { "./src/trap.h", 129 } },
        { name = "triggered_by_item", rval = "bool", args = { "item" }, comment = "If the given item is throw onto the trap, does it trigger the trap?", location = { "./src/trap.h", 133 } },
    }
}
classes['w_point'] = {
    attributes = {
        acidic = { type = "bool", writable = true },
        humidity = { type = "float", writable = true },
        pressure = { type = "float", writable = true },
        temperature = { type = "float", writable = true },
        windpower = { type = "float", writable = true },
    },
}
classes['vehicle'] = {
    parents = {
        "JsonSerializer",
        "JsonDeserializer",
    },
    attributes = {
        alarm_epower = { type = "int", writable = true },
        alternator_load = { type = "float", writable = true },
        camera_epower = { type = "int", writable = true },
        camera_on = { type = "bool", writable = true },
        check_environmental_effects = { type = "bool", writable = true },
        cruise_on = { type = "bool", writable = true },
        cruise_velocity = { type = "int", writable = true },
        engine_on = { type = "bool", writable = true },
        extra_drag = { type = "int", writable = true },
        falling = { type = "bool", writable = true },
        insides_dirty = { type = "bool", writable = true },
        is_alarm_on = { type = "bool", writable = true },
        is_locked = { type = "bool", writable = true },
        last_turn = { type = "int", writable = true },
        last_update_turn = { type = "calendar", writable = true },
        name = { type = "std::string", writable = true },
        occupied_cache_turn = { type = "calendar", writable = true },
        occupied_points = { type = "std::set<tripoint>", writable = true },
        of_turn = { type = "float", writable = true },
        of_turn_carry = { type = "float", writable = true },
        om_id = { type = "int", writable = true },
        parts = { type = "std::vector<vehicle_part>", writable = true },
        posx = { type = "int", writable = true },
        posy = { type = "int", writable = true },
        removed_part_count = { type = "int", writable = true },
        skidding = { type = "bool", writable = true },
        smx = { type = "int", writable = true },
        smy = { type = "int", writable = true },
        smz = { type = "int", writable = true },
        tags = { type = "std::set<std::string>", writable = true },
        tracking_epower = { type = "int", writable = true },
        tracking_on = { type = "bool", writable = true },
        turn_dir = { type = "int", writable = true },
        velocity = { type = "int", writable = true },
        vertical_velocity = { type = "int", writable = true },
    },
    functions = {
        { name = "acceleration", rval = "int", args = { "bool" }, location = { "./src/vehicle.h", 879 } },
        { name = "acceleration", rval = "int", args = { }, location = { "./src/vehicle.h", 879 } },
        { name = "add_charges", rval = "int", args = { "int", "item" }, comment = "Add an item counted by charges to the part's cargo.      *      * @returns The number of charges added.", location = { "./src/vehicle.h", 1025 } },
        { name = "add_item", rval = "bool", args = { "int", "item" }, comment = "Try to add an item to part's cargo.      *      * @returns False if it can't be put here (not a cargo part, adding this would violate      * the volume limit or item count limit, not all charges can fit, etc.)", location = { "./src/vehicle.h", 1017 } },
        { name = "add_item", rval = "bool", args = { "vehicle_part", "item" }, comment = "Like the above", location = { "./src/vehicle.h", 1019 } },
        { name = "add_item_at", rval = "bool", args = { "int", "std::list<item>::iterator", "item" }, comment = "Position specific item insertion that skips a bunch of safety checks      * since it should only ever be used by item processing code.", location = { "./src/vehicle.h", 1030 } },
        { name = "alarm", rval = nil, args = { }, location = { "./src/vehicle.h", 971 } },
        { name = "assign_seat", rval = "bool", args = { "vehicle_part", "npc" }, comment = "Try to assign a crew member (who must be a player ally) to a specific seat      *  @note enforces NPC's being assigned to only one seat (per-vehicle) at once", location = { "./src/vehicle.h", 1105 } },
        { name = "backfire", rval = nil, args = { "int" }, location = { "./src/vehicle.h", 598 } },
        { name = "balanced_wheel_config", rval = "bool", args = { "bool" }, location = { "./src/vehicle.h", 958 } },
        { name = "basic_consumption", rval = "int", args = { "std::string" }, location = { "./src/vehicle.h", 822 } },
        { name = "beeper_sound", rval = nil, args = { }, location = { "./src/vehicle.h", 602 } },
        { name = "break_part_into_pieces", rval = nil, args = { "int", "int", "int" }, location = { "./src/vehicle.h", 642 } },
        { name = "break_part_into_pieces", rval = nil, args = { "int", "int", "int", "bool" }, location = { "./src/vehicle.h", 642 } },
        { name = "can_enable", rval = "bool", args = { "vehicle_part" }, comment = "Test if part can be enabled (unbroken, sufficient fuel etc), optionally displaying failures to user", location = { "./src/vehicle.h", 694 } },
        { name = "can_enable", rval = "bool", args = { "vehicle_part", "bool" }, comment = "Test if part can be enabled (unbroken, sufficient fuel etc), optionally displaying failures to user", location = { "./src/vehicle.h", 694 } },
        { name = "can_mount", rval = "bool", args = { "int", "int", "vpart_id" }, location = { "./src/vehicle.h", 610 } },
        { name = "can_unmount", rval = "bool", args = { "int" }, location = { "./src/vehicle.h", 613 } },
        { name = "charge_battery", rval = "int", args = { "int" }, comment = "Try to charge our (and, optionally, connected vehicles') batteries by the given amount.      * @return amount of charge left over.", location = { "./src/vehicle.h", 843 } },
        { name = "charge_battery", rval = "int", args = { "int", "bool" }, comment = "Try to charge our (and, optionally, connected vehicles') batteries by the given amount.      * @return amount of charge left over.", location = { "./src/vehicle.h", 843 } },
        { name = "close", rval = nil, args = { "int" }, location = { "./src/vehicle.h", 1112 } },
        { name = "consume_fuel", rval = nil, args = { "float" }, location = { "./src/vehicle.h", 824 } },
        { name = "control_doors", rval = nil, args = { }, location = { "./src/vehicle.h", 1157 } },
        { name = "control_engines", rval = nil, args = { }, location = { "./src/vehicle.h", 1132 } },
        { name = "coord_translate", rval = "point", args = { "point" }, location = { "./src/vehicle.h", 737 } },
        { name = "coord_translate", rval = nil, args = { "int", "point", "point", "point" }, location = { "./src/vehicle.h", 740 } },
        { name = "cruise_thrust", rval = nil, args = { "int" }, location = { "./src/vehicle.h", 985 } },
        { name = "damage", rval = "int", args = { "int", "int" }, location = { "./src/vehicle.h", 1058 } },
        { name = "damage", rval = "int", args = { "int", "int", "damage_type" }, location = { "./src/vehicle.h", 1058 } },
        { name = "damage", rval = "int", args = { "int", "int", "damage_type", "bool" }, location = { "./src/vehicle.h", 1058 } },
        { name = "damage_all", rval = nil, args = { "int", "int", "damage_type", "point" }, location = { "./src/vehicle.h", 1061 } },
        { name = "discharge_battery", rval = "int", args = { "int" }, comment = "Try to discharge our (and, optionally, connected vehicles') batteries by the given amount.      * @return amount of request unfulfilled (0 if totally successful).", location = { "./src/vehicle.h", 849 } },
        { name = "discharge_battery", rval = "int", args = { "int", "bool" }, comment = "Try to discharge our (and, optionally, connected vehicles') batteries by the given amount.      * @return amount of request unfulfilled (0 if totally successful).", location = { "./src/vehicle.h", 849 } },
        { name = "disp_name", rval = "std::string", args = { }, location = { "./src/vehicle.h", 1174 } },
        { name = "do_engine_damage", rval = nil, args = { "int", "int" }, location = { "./src/vehicle.h", 1155 } },
        { name = "drag", rval = "float", args = { }, location = { "./src/vehicle.h", 951 } },
        { name = "drain", rval = "int", args = { "std::string", "int" }, location = { "./src/vehicle.h", 812 } },
        { name = "drain_energy", rval = "float", args = { "std::string", "float" }, comment = "Consumes enough fuel by energy content. Does not support cable draining.      * @param ftype Type of fuel      * @param energy Desired amount of energy of fuel to consume      * @return Amount of energy actually consumed. May be more or less than energy.", location = { "./src/vehicle.h", 819 } },
        { name = "find_part", rval = "int", args = { "item" }, comment = "Get index of part with matching base item or INT_MIN if not found", location = { "./src/vehicle.h", 631 } },
        { name = "fold_up", rval = "bool", args = { }, location = { "./src/vehicle.h", 589 } },
        { name = "forward_velocity", rval = "float", args = { }, location = { "./src/vehicle.h", 982 } },
        { name = "free_volume", rval = "units::volume", args = { "int" }, location = { "./src/vehicle.h", 1004 } },
        { name = "fuel_capacity", rval = "int", args = { "std::string" }, location = { "./src/vehicle.h", 808 } },
        { name = "fuel_left", rval = "int", args = { "std::string" }, location = { "./src/vehicle.h", 807 } },
        { name = "fuel_left", rval = "int", args = { "std::string", "bool" }, location = { "./src/vehicle.h", 807 } },
        { name = "gain_moves", rval = nil, args = { }, location = { "./src/vehicle.h", 1043 } },
        { name = "get_items", rval = "vehicle_stack", args = { "int" }, location = { "./src/vehicle.h", 1038 } },
        { name = "get_label", rval = "std::string", args = { "int", "int" }, location = { "./src/vehicle.h", 639 } },
        { name = "get_passenger", rval = "player&", args = { "int" }, location = { "./src/vehicle.h", 775 } },
        { name = "get_points", rval = "std::set<tripoint>", args = { "bool" }, location = { "./src/vehicle.h", 1108 } },
        { name = "get_points", rval = "std::set<tripoint>", args = { }, location = { "./src/vehicle.h", 1108 } },
        { name = "get_printable_fuel_types", rval = "std::vector<std::string>", args = { }, location = { "./src/vehicle.h", 762 } },
        { name = "global_part_at", rval = "int", args = { "int", "int" }, location = { "./src/vehicle.h", 744 } },
        { name = "global_part_pos3", rval = "tripoint", args = { "int" }, comment = "Get the coordinates of the studied part of the vehicle", location = { "./src/vehicle.h", 791 } },
        { name = "global_part_pos3", rval = "tripoint", args = { "vehicle_part" }, location = { "./src/vehicle.h", 792 } },
        { name = "global_pos", rval = "point", args = { }, location = { "./src/vehicle.h", 786 } },
        { name = "global_pos3", rval = "tripoint", args = { }, location = { "./src/vehicle.h", 787 } },
        { name = "global_x", rval = "int", args = { }, comment = "Get the coordinates (in map squares) of this vehicle, it's the same      * coordinate system that player::posx uses.      * Global apparently means relative to the currently loaded map (game::m).      * This implies:      * <code>g->m.veh_at(this->global_x(), this->global_y()) == this;</code>", location = { "./src/vehicle.h", 784 } },
        { name = "global_y", rval = "int", args = { }, location = { "./src/vehicle.h", 785 } },
        { name = "handle_trap", rval = nil, args = { "tripoint", "int" }, location = { "./src/vehicle.h", 1001 } },
        { name = "handling_difficulty", rval = "float", args = { }, comment = "Returns roughly driving skill level at which there is no chance of fumbling.", location = { "./src/vehicle.h", 966 } },
        { name = "has_engine_type", rval = "bool", args = { "std::string", "bool" }, location = { "./src/vehicle.h", 1150 } },
        { name = "has_engine_type_not", rval = "bool", args = { "std::string", "bool" }, location = { "./src/vehicle.h", 1153 } },
        { name = "has_part", rval = "bool", args = { "std::string" }, comment = "Check if vehicle has at least one unbroken part with specified flag      *  @param flag Specified flag to search parts for      *  @param enabled if set part must also be enabled to be considered      *  @returns true if part is found", location = { "./src/vehicle.h", 658 } },
        { name = "has_part", rval = "bool", args = { "std::string", "bool" }, comment = "Check if vehicle has at least one unbroken part with specified flag      *  @param flag Specified flag to search parts for      *  @param enabled if set part must also be enabled to be considered      *  @returns true if part is found", location = { "./src/vehicle.h", 658 } },
        { name = "has_part", rval = "bool", args = { "tripoint", "std::string" }, comment = "Check if vehicle has at least one unbroken part with specified flag      *  @param pos limit check for parts to this global position      *  @param flag The specified flag      *  @param enabled if set part must also be enabled to be considered", location = { "./src/vehicle.h", 666 } },
        { name = "has_part", rval = "bool", args = { "tripoint", "std::string", "bool" }, comment = "Check if vehicle has at least one unbroken part with specified flag      *  @param pos limit check for parts to this global position      *  @param flag The specified flag      *  @param enabled if set part must also be enabled to be considered", location = { "./src/vehicle.h", 666 } },
        { name = "has_security_working", rval = "bool", args = { }, location = { "./src/vehicle.h", 1121 } },
        { name = "honk_horn", rval = nil, args = { }, location = { "./src/vehicle.h", 601 } },
        { name = "idle", rval = nil, args = { "bool" }, location = { "./src/vehicle.h", 969 } },
        { name = "idle", rval = nil, args = { }, location = { "./src/vehicle.h", 969 } },
        { name = "index_of_part", rval = "int", args = { "vehicle_part" }, location = { "./src/vehicle.h", 749 } },
        { name = "index_of_part", rval = "int", args = { "vehicle_part", "bool" }, location = { "./src/vehicle.h", 749 } },
        { name = "init_state", rval = nil, args = { "int", "int" }, location = { "./src/vehicle.h", 566 } },
        { name = "install_part", rval = "int", args = { "int", "int", "vehicle_part" }, location = { "./src/vehicle.h", 619 } },
        { name = "install_part", rval = "int", args = { "int", "int", "vpart_id" }, location = { "./src/vehicle.h", 616 } },
        { name = "install_part", rval = "int", args = { "int", "int", "vpart_id", "bool" }, location = { "./src/vehicle.h", 616 } },
        { name = "interact_vehicle_locked", rval = "bool", args = { }, location = { "./src/vehicle.h", 1119 } },
        { name = "invalidate_mass", rval = nil, args = { }, comment = "Mark mass caches and pivot cache as dirty", location = { "./src/vehicle.h", 854 } },
        { name = "is_alternator_on", rval = "bool", args = { "int" }, location = { "./src/vehicle.h", 1144 } },
        { name = "is_engine_on", rval = "bool", args = { "int" }, location = { "./src/vehicle.h", 1138 } },
        { name = "is_engine_type", rval = "bool", args = { "int", "std::string" }, location = { "./src/vehicle.h", 1142 } },
        { name = "is_engine_type_on", rval = "bool", args = { "int", "std::string" }, location = { "./src/vehicle.h", 1136 } },
        { name = "is_foldable", rval = "bool", args = { }, location = { "./src/vehicle.h", 1115 } },
        { name = "is_inside", rval = "bool", args = { "int" }, location = { "./src/vehicle.h", 1050 } },
        { name = "is_part_on", rval = "bool", args = { "int" }, location = { "./src/vehicle.h", 1140 } },
        { name = "k_aerodynamics", rval = "float", args = { }, comment = "Air friction coefficient of the vehicle.      * Affected by vehicle's width and non-passable tiles.      * Calculated by projecting rays from front of the vehicle to its back.      * Each ray that contains only passable vehicle tiles causes a small penalty,      * and each ray that contains an unpassable vehicle tile causes a big penalty.      *      * Affects @ref k_dynamics, which in turn affects velocity and acceleration.", location = { "./src/vehicle.h", 929 } },
        { name = "k_dynamics", rval = "float", args = { }, comment = "Combined coefficient of aerodynamic and wheel friction resistance of vehicle.      * Safe velocity and acceleration are multiplied by this value.", location = { "./src/vehicle.h", 910 } },
        { name = "k_friction", rval = "float", args = { }, comment = "Wheel friction coefficient of the vehicle.      * Inversely proportional to (wheel area + constant).      *       * Affects @ref k_dynamics, which in turn affects velocity and acceleration.", location = { "./src/vehicle.h", 918 } },
        { name = "k_mass", rval = "float", args = { }, comment = "Mass coefficient of the vehicle.      * Roughly proportional to vehicle's mass divided by wheel area, times constant.      *       * Affects safe velocity (moderately), acceleration (heavily).      * Also affects braking (including handbraking) and velocity drop during coasting.", location = { "./src/vehicle.h", 938 } },
        { name = "k_traction", rval = "float", args = { "float" }, comment = "Traction coefficient of the vehicle.      * 1.0 on road. Outside roads, depends on mass divided by wheel area      * and the surface beneath wheels.      *       * Affects safe velocity, acceleration and handling difficulty.", location = { "./src/vehicle.h", 947 } },
        { name = "lift_strength", rval = "int", args = { }, comment = "Required strength to be able to successfully lift the vehicle unaided by equipment", location = { "./src/vehicle.h", 1177 } },
        { name = "local_center_of_mass", rval = "point", args = { }, location = { "./src/vehicle.h", 862 } },
        { name = "max_velocity", rval = "int", args = { "bool" }, location = { "./src/vehicle.h", 883 } },
        { name = "max_velocity", rval = "int", args = { }, location = { "./src/vehicle.h", 883 } },
        { name = "max_volume", rval = "units::volume", args = { "int" }, location = { "./src/vehicle.h", 1003 } },
        { name = "mod_hp", rval = "bool", args = { "vehicle_part", "int" }, comment = "Apply damage to part constrained by range [0,durability] possibly destroying it      * @param pt Part being damaged      * @param qty maximum amount by which to adjust damage (negative permissible)      * @param dt type of damage which may be passed to base @ref item::on_damage callback      * @return whether part was destroyed as a result of the damage", location = { "./src/vehicle.h", 558 } },
        { name = "mod_hp", rval = "bool", args = { "vehicle_part", "int", "damage_type" }, comment = "Apply damage to part constrained by range [0,durability] possibly destroying it      * @param pt Part being damaged      * @param qty maximum amount by which to adjust damage (negative permissible)      * @param dt type of damage which may be passed to base @ref item::on_damage callback      * @return whether part was destroyed as a result of the damage", location = { "./src/vehicle.h", 558 } },
        { name = "next_part_to_close", rval = "int", args = { "int" }, comment = "Return the index of the next part to close at `p`      *      *  The next part to open is the first opened part in the list of      *  parts at part `p`'s coordinates. Returns -1 for no more to close.      *      *  @param p Part who's coordinates provide the location to check      *  @param outside If true, give parts that can be closed from outside only      *  @return part index or -1 if no part", location = { "./src/vehicle.h", 718 } },
        { name = "next_part_to_close", rval = "int", args = { "int", "bool" }, comment = "Return the index of the next part to close at `p`      *      *  The next part to open is the first opened part in the list of      *  parts at part `p`'s coordinates. Returns -1 for no more to close.      *      *  @param p Part who's coordinates provide the location to check      *  @param outside If true, give parts that can be closed from outside only      *  @return part index or -1 if no part", location = { "./src/vehicle.h", 718 } },
        { name = "next_part_to_open", rval = "int", args = { "int" }, comment = "Return the index of the next part to open at `p`'s location      *      *  The next part to open is the first unopened part in the reversed list of      *  parts at part `p`'s coordinates.      *      *  @param p Part who's coordinates provide the location to check      *  @param outside If true, give parts that can be opened from outside only      *  @return part index or -1 if no part", location = { "./src/vehicle.h", 706 } },
        { name = "next_part_to_open", rval = "int", args = { "int", "bool" }, comment = "Return the index of the next part to open at `p`'s location      *      *  The next part to open is the first unopened part in the reversed list of      *  parts at part `p`'s coordinates.      *      *  @param p Part who's coordinates provide the location to check      *  @param outside If true, give parts that can be opened from outside only      *  @return part index or -1 if no part", location = { "./src/vehicle.h", 706 } },
        { name = "noise_and_smoke", rval = nil, args = { "float" }, location = { "./src/vehicle.h", 893 } },
        { name = "noise_and_smoke", rval = nil, args = { "float", "float" }, location = { "./src/vehicle.h", 893 } },
        { name = "obstacle_at_part", rval = "int", args = { "int" }, location = { "./src/vehicle.h", 734 } },
        { name = "on_move", rval = nil, args = { }, location = { "./src/vehicle.h", 1165 } },
        { name = "open", rval = nil, args = { "int" }, location = { "./src/vehicle.h", 1111 } },
        { name = "open_all_at", rval = nil, args = { "int" }, comment = "Opens everything that can be opened on the same tile as `p`", location = { "./src/vehicle.h", 1125 } },
        { name = "operate_planter", rval = nil, args = { }, location = { "./src/vehicle.h", 605 } },
        { name = "operate_plow", rval = nil, args = { }, location = { "./src/vehicle.h", 1130 } },
        { name = "operate_reaper", rval = nil, args = { }, location = { "./src/vehicle.h", 1129 } },
        { name = "operate_scoop", rval = nil, args = { }, location = { "./src/vehicle.h", 1128 } },
        { name = "part_at", rval = "int", args = { "int", "int" }, location = { "./src/vehicle.h", 743 } },
        { name = "part_color", rval = "int", args = { "int" }, location = { "./src/vehicle.h", 756 } },
        { name = "part_color", rval = "int", args = { "int", "bool" }, location = { "./src/vehicle.h", 756 } },
        { name = "part_displayed_at", rval = "int", args = { "int", "int" }, location = { "./src/vehicle.h", 745 } },
        { name = "part_flag", rval = "bool", args = { "int", "std::string" }, location = { "./src/vehicle.h", 728 } },
        { name = "part_flag", rval = "bool", args = { "int", "vpart_bitflags" }, location = { "./src/vehicle.h", 729 } },
        { name = "part_info", rval = "vpart_info&", args = { "int" }, location = { "./src/vehicle.h", 607 } },
        { name = "part_info", rval = "vpart_info&", args = { "int", "bool" }, location = { "./src/vehicle.h", 607 } },
        { name = "part_removal_cleanup", rval = nil, args = { }, location = { "./src/vehicle.h", 625 } },
        { name = "part_sym", rval = "int", args = { "int" }, location = { "./src/vehicle.h", 752 } },
        { name = "part_sym", rval = "int", args = { "int", "bool" }, location = { "./src/vehicle.h", 752 } },
        { name = "part_with_feature", rval = "int", args = { "int", "std::string" }, location = { "./src/vehicle.h", 648 } },
        { name = "part_with_feature", rval = "int", args = { "int", "std::string", "bool" }, location = { "./src/vehicle.h", 648 } },
        { name = "part_with_feature", rval = "int", args = { "int", "vpart_bitflags" }, location = { "./src/vehicle.h", 650 } },
        { name = "part_with_feature", rval = "int", args = { "int", "vpart_bitflags", "bool" }, location = { "./src/vehicle.h", 650 } },
        { name = "part_with_feature_at_relative", rval = "int", args = { "point", "std::string" }, location = { "./src/vehicle.h", 649 } },
        { name = "part_with_feature_at_relative", rval = "int", args = { "point", "std::string", "bool" }, location = { "./src/vehicle.h", 649 } },
        { name = "pivot_displacement", rval = "point", args = { }, location = { "./src/vehicle.h", 871 } },
        { name = "pivot_point", rval = "point", args = { }, location = { "./src/vehicle.h", 866 } },
        { name = "place_spawn_items", rval = nil, args = { }, location = { "./src/vehicle.h", 1041 } },
        { name = "play_chimes", rval = nil, args = { }, location = { "./src/vehicle.h", 604 } },
        { name = "play_music", rval = nil, args = { }, location = { "./src/vehicle.h", 603 } },
        { name = "player_in_control", rval = "bool", args = { "player" }, location = { "./src/vehicle.h", 561 } },
        { name = "possibly_recover_from_skid", rval = nil, args = { }, location = { "./src/vehicle.h", 979 } },
        { name = "power_parts", rval = nil, args = { }, location = { "./src/vehicle.h", 837 } },
        { name = "precalc_mounts", rval = nil, args = { "int", "int", "point" }, location = { "./src/vehicle.h", 769 } },
        { name = "real_global_pos", rval = "point", args = { }, comment = "Really global absolute coordinates in map squares.      * This includes the overmap, the submap, and the map square.", location = { "./src/vehicle.h", 797 } },
        { name = "real_global_pos3", rval = "tripoint", args = { }, location = { "./src/vehicle.h", 798 } },
        { name = "refresh_insides", rval = nil, args = { }, location = { "./src/vehicle.h", 1048 } },
        { name = "remote_controlled", rval = "bool", args = { "player" }, location = { "./src/vehicle.h", 563 } },
        { name = "remove_item", rval = "bool", args = { "int", "int" }, location = { "./src/vehicle.h", 1033 } },
        { name = "remove_item", rval = "bool", args = { "int", "item" }, location = { "./src/vehicle.h", 1034 } },
        { name = "remove_item", rval = "std::list<item>::iterator", args = { "int", "std::list<item>::iterator" }, location = { "./src/vehicle.h", 1035 } },
        { name = "remove_part", rval = "bool", args = { "int" }, location = { "./src/vehicle.h", 624 } },
        { name = "remove_remote_part", rval = nil, args = { "int" }, comment = "Remove a part from a targeted remote vehicle. Useful for, e.g. power cables that have      * a vehicle part on both sides.", location = { "./src/vehicle.h", 637 } },
        { name = "restore", rval = "bool", args = { "std::string" }, location = { "./src/vehicle.h", 1117 } },
        { name = "roof_at_part", rval = "int", args = { "int" }, location = { "./src/vehicle.h", 746 } },
        { name = "rotated_center_of_mass", rval = "point", args = { }, location = { "./src/vehicle.h", 860 } },
        { name = "safe_velocity", rval = "int", args = { "bool" }, location = { "./src/vehicle.h", 887 } },
        { name = "safe_velocity", rval = "int", args = { }, location = { "./src/vehicle.h", 887 } },
        { name = "select_engine", rval = "int", args = { }, location = { "./src/vehicle.h", 1134 } },
        { name = "set_hp", rval = nil, args = { "vehicle_part", "int" }, comment = "Set stat for part constrained by range [0,durability]      * @note does not invoke base @ref item::on_damage callback", location = { "./src/vehicle.h", 549 } },
        { name = "set_label", rval = nil, args = { "int", "int", "std::string" }, location = { "./src/vehicle.h", 640 } },
        { name = "set_submap_moved", rval = nil, args = { "int", "int" }, comment = "Update the submap coordinates smx, smy, and update the tracker info in the overmap      * (if enabled).      * This should be called only when the vehicle has actually been moved, not when      * the map is just shifted (in the later case simply set smx/smy directly).", location = { "./src/vehicle.h", 1172 } },
        { name = "shed_loose_parts", rval = nil, args = { }, location = { "./src/vehicle.h", 1067 } },
        { name = "shift_if_needed", rval = "bool", args = { }, location = { "./src/vehicle.h", 1065 } },
        { name = "shift_parts", rval = nil, args = { "point" }, location = { "./src/vehicle.h", 1064 } },
        { name = "slow_leak", rval = nil, args = { }, location = { "./src/vehicle.h", 973 } },
        { name = "smash", rval = nil, args = { }, location = { "./src/vehicle.h", 569 } },
        { name = "spew_smoke", rval = nil, args = { "float", "int" }, location = { "./src/vehicle.h", 890 } },
        { name = "spew_smoke", rval = nil, args = { "float", "int", "int" }, location = { "./src/vehicle.h", 890 } },
        { name = "start_engine", rval = "bool", args = { "int" }, location = { "./src/vehicle.h", 592 } },
        { name = "start_engines", rval = nil, args = { "bool" }, location = { "./src/vehicle.h", 595 } },
        { name = "start_engines", rval = nil, args = { }, location = { "./src/vehicle.h", 595 } },
        { name = "steering_effectiveness", rval = "float", args = { }, location = { "./src/vehicle.h", 963 } },
        { name = "stop", rval = nil, args = { }, location = { "./src/vehicle.h", 1046 } },
        { name = "stored_volume", rval = "units::volume", args = { "int" }, location = { "./src/vehicle.h", 1005 } },
        { name = "strain", rval = "float", args = { }, location = { "./src/vehicle.h", 954 } },
        { name = "sufficient_wheel_config", rval = "bool", args = { "bool" }, location = { "./src/vehicle.h", 957 } },
        { name = "thrust", rval = nil, args = { "int" }, location = { "./src/vehicle.h", 976 } },
        { name = "toggle_specific_engine", rval = nil, args = { "int", "bool" }, location = { "./src/vehicle.h", 1146 } },
        { name = "toggle_specific_part", rval = nil, args = { "int", "bool" }, location = { "./src/vehicle.h", 1147 } },
        { name = "total_mass", rval = "int", args = { }, location = { "./src/vehicle.h", 857 } },
        { name = "total_power", rval = "int", args = { "bool" }, location = { "./src/vehicle.h", 875 } },
        { name = "total_power", rval = "int", args = { }, location = { "./src/vehicle.h", 875 } },
        { name = "turn", rval = nil, args = { "int" }, location = { "./src/vehicle.h", 988 } },
        { name = "turrets_aim", rval = "bool", args = { }, location = { "./src/vehicle.h", 1097 } },
        { name = "turrets_set_mode", rval = nil, args = { }, comment = "Set firing mode for specific turrets", location = { "./src/vehicle.h", 1091 } },
        { name = "turrets_set_targeting", rval = nil, args = { }, comment = "Set targeting mode for specific turrets", location = { "./src/vehicle.h", 1088 } },
        { name = "unboard_all", rval = nil, args = { }, location = { "./src/vehicle.h", 1052 } },
        { name = "update_time", rval = nil, args = { "calendar" }, location = { "./src/vehicle.h", 1229 } },
        { name = "use_controls", rval = nil, args = { "tripoint" }, comment = "Operate vehicle controls      *  @param pos location of physical controls to operate (ignored during remote operation)", location = { "./src/vehicle.h", 586 } },
        { name = "valid_wheel_config", rval = "bool", args = { "bool" }, location = { "./src/vehicle.h", 959 } },
        { name = "wheel_area", rval = "float", args = { "bool" }, comment = "Calculates the sum of the area under the wheels of the vehicle.      * @param boat If true, calculates the area under 'wheels' that allow swimming.", location = { "./src/vehicle.h", 899 } },
    }
}
classes['vehicle_part'] = {
    parents = {
        "JsonSerializer",
        "JsonDeserializer",
    },
    new = {
        { },
    },
    by_value_and_reference = true,
    attributes = {
        blood = { type = "int", writable = true },
        direction = { type = "int", writable = true },
        enabled = { type = "bool", writable = true },
        flags = { type = "int", writable = true },
        inside = { type = "bool", writable = true },
        mount = { type = "point", writable = true },
        open = { type = "bool", writable = true },
        passenger_id = { type = "int", writable = true },
        removed = { type = "bool", writable = true },
    },
    functions = {
        { name = "ammo_capacity", rval = "int", args = { }, comment = "Maximum amount of fuel, charges or ammunition that can be contained by a part", location = { "./src/vehicle.h", 109 } },
        { name = "ammo_consume", rval = "int", args = { "int", "tripoint" }, comment = "Consume fuel, charges or ammunition (if available)      * @param qty maximum amount of ammo that should be consumed      * @param pos current global location of part from which ammo is being consumed      * @return amount consumed which will be between 0 and specified qty", location = { "./src/vehicle.h", 131 } },
        { name = "ammo_current", rval = "std::string", args = { }, comment = "Specific type of fuel, charges or ammunition currently contained by a part", location = { "./src/vehicle.h", 106 } },
        { name = "ammo_remaining", rval = "int", args = { }, comment = "Amount of fuel, charges or ammunition currently contained by a part", location = { "./src/vehicle.h", 112 } },
        { name = "ammo_set", rval = "int", args = { "std::string" }, comment = "Set fuel, charges or ammunition for this part removing any existing ammo      * @param ammo specific type of ammo (must be compatible with vehicle part)      * @param qty maximum ammo (capped by part capacity) or negative to fill to capacity      * @return amount of ammo actually set or negative on failure", location = { "./src/vehicle.h", 120 } },
        { name = "ammo_set", rval = "int", args = { "std::string", "int" }, comment = "Set fuel, charges or ammunition for this part removing any existing ammo      * @param ammo specific type of ammo (must be compatible with vehicle part)      * @param qty maximum ammo (capped by part capacity) or negative to fill to capacity      * @return amount of ammo actually set or negative on failure", location = { "./src/vehicle.h", 120 } },
        { name = "ammo_unset", rval = nil, args = { }, comment = "Remove all fuel, charges or ammunition (if any) from this part", location = { "./src/vehicle.h", 123 } },
        { name = "can_reload", rval = "bool", args = { "std::string" }, location = { "./src/vehicle.h", 142 } },
        { name = "can_reload", rval = "bool", args = { }, location = { "./src/vehicle.h", 142 } },
        { name = "consume_energy", rval = "float", args = { "std::string", "float" }, comment = "Consume fuel by energy content.      * @param ftype Type of fuel to consume      * @param energy Energy to consume, in kJ      * @return Energy actually consumed, in kJ", location = { "./src/vehicle.h", 139 } },
        { name = "crew", rval = "npc&", args = { }, comment = "Get NPC currently assigned to this part (seat, turret etc)?      *  @note checks crew member is alive and currently allied to the player      *  @return nullptr if no valid crew member is currently assigned", location = { "./src/vehicle.h", 173 } },
        { name = "damage", rval = "float", args = { }, comment = "Current part damage in same units as item::damage.", location = { "./src/vehicle.h", 225 } },
        { name = "fault_set", rval = "bool", args = { "fault_id" }, comment = "Try to set fault returning false if specified fault cannot occur with this item", location = { "./src/vehicle.h", 157 } },
        { name = "faults", rval = "std::set<fault_id>", args = { }, comment = "Current faults affecting this part (if any)", location = { "./src/vehicle.h", 151 } },
        { name = "faults_potential", rval = "std::set<fault_id>", args = { }, comment = "Faults which could potentially occur with this part (if any)", location = { "./src/vehicle.h", 154 } },
        { name = "fill_with", rval = "bool", args = { "item" }, comment = "Try adding @param liquid to tank optionally limited by @param qty      *  @return whether any of the liquid was consumed (which may be less than qty)", location = { "./src/vehicle.h", 148 } },
        { name = "fill_with", rval = "bool", args = { "item", "int" }, comment = "Try adding @param liquid to tank optionally limited by @param qty      *  @return whether any of the liquid was consumed (which may be less than qty)", location = { "./src/vehicle.h", 148 } },
        { name = "has_flag", rval = "bool", args = { "int" }, location = { "./src/vehicle.h", 98 } },
        { name = "hp", rval = "int", args = { }, comment = "current part health with range [0,durability]", location = { "./src/vehicle.h", 222 } },
        { name = "info", rval = "vpart_info&", args = { }, comment = "Get part definition common to all parts of this type", location = { "./src/vehicle.h", 267 } },
        { name = "is_battery", rval = "bool", args = { }, comment = "Can this part store electrical charge?", location = { "./src/vehicle.h", 201 } },
        { name = "is_broken", rval = "bool", args = { }, comment = "parts are considered broken at zero health", location = { "./src/vehicle.h", 228 } },
        { name = "is_engine", rval = "bool", args = { }, comment = "Can this part provide power or propulsion?", location = { "./src/vehicle.h", 192 } },
        { name = "is_light", rval = "bool", args = { }, comment = "Is this any type of vehicle light?", location = { "./src/vehicle.h", 195 } },
        { name = "is_reactor", rval = "bool", args = { }, comment = "Is this part a reactor?", location = { "./src/vehicle.h", 204 } },
        { name = "is_seat", rval = "bool", args = { }, comment = "Can a player or NPC use this part as a seat?", location = { "./src/vehicle.h", 210 } },
        { name = "is_tank", rval = "bool", args = { }, comment = "Can this part contain liquid fuels?", location = { "./src/vehicle.h", 198 } },
        { name = "is_turret", rval = "bool", args = { }, comment = "Can this part function as a turret?", location = { "./src/vehicle.h", 207 } },
        { name = "name", rval = "std::string", args = { }, comment = "Translated name of a part inclusive of any current status effects", location = { "./src/vehicle.h", 103 } },
        { name = "properties_to_item", rval = "item", args = { }, comment = "Generate the corresponding item from this vehicle part. It includes      * the hp (item damage), fuel charges (battery or liquids), aspect, ...", location = { "./src/vehicle.h", 279 } },
        { name = "remove_flag", rval = "int", args = { "int" }, location = { "./src/vehicle.h", 100 } },
        { name = "set_crew", rval = "bool", args = { "npc" }, comment = "Set crew member for this part (seat, truret etc) who must be a player ally)      *  @return true if part can have crew members and passed npc was suitable", location = { "./src/vehicle.h", 178 } },
        { name = "set_flag", rval = "int", args = { "int" }, location = { "./src/vehicle.h", 99 } },
        { name = "unset_crew", rval = nil, args = { }, comment = "Remove any currently assigned crew member for this part", location = { "./src/vehicle.h", 181 } },
        { name = "wheel_area", rval = "int", args = { }, comment = "Get wheel diameter times wheel width (inches^2) or return 0 if part is not wheel", location = { "./src/vehicle.h", 160 } },
        { name = "wheel_diameter", rval = "int", args = { }, comment = "Get wheel diameter (inches) or return 0 if part is not wheel", location = { "./src/vehicle.h", 163 } },
        { name = "wheel_width", rval = "int", args = { }, comment = "Get wheel width (inches) or return 0 if part is not wheel", location = { "./src/vehicle.h", 166 } },
    }
}
classes['vehicle_stack'] = {
    by_value = true,
    functions = {
        { name = "amount_can_fit", rval = "int", args = { "item" }, comment = "Returns how many of the specified item (or how many charges if it's counted by charges)          * could be added without violating either the volume or itemcount limits.          *          * @returns Value of zero or greater for all items. For items counted by charges, it is always at          * most it.charges.", location = { "./src/item_stack.h", 61 } },
        { name = "count_limit", rval = "int", args = { }, comment = "Maximum number of items allowed here", location = { "./src/item_stack.h", 46 } },
        { name = "cppbegin", rval = "std::list<item>::iterator", cpp_name = "begin", args = { }, location = { "./src/item_stack.h", 36 } },
        { name = "cppend", rval = "std::list<item>::iterator", cpp_name = "end", args = { }, location = { "./src/item_stack.h", 37 } },
        { name = "empty", rval = "bool", args = { }, location = { "./src/item_stack.h", 29 } },
        { name = "erase", rval = "std::list<item>::iterator", args = { "std::list<item>::iterator" }, location = { "./src/item_stack.h", 30 } },
        { name = "free_volume", rval = "units::volume", args = { }, location = { "./src/item_stack.h", 51 } },
        { name = "front", rval = "item&", args = { }, location = { "./src/item_stack.h", 33 } },
        { name = "insert_at", rval = nil, args = { "std::list<item>::iterator", "item" }, location = { "./src/item_stack.h", 32 } },
        { name = "max_volume", rval = "units::volume", args = { }, comment = "Maximum volume allowed here", location = { "./src/item_stack.h", 48 } },
        { name = "push_back", rval = nil, args = { "item" }, location = { "./src/item_stack.h", 31 } },
        { name = "size", rval = "int", args = { }, location = { "./src/item_stack.h", 28 } },
        { name = "stacks_with", rval = "item&", args = { "item" }, comment = "Return the item (or nullptr) that stacks with the argument", location = { "./src/item_stack.h", 63 } },
        { name = "stored_volume", rval = "units::volume", args = { }, comment = "Total volume of the items here", location = { "./src/item_stack.h", 50 } },
    }
}
classes['vpart_info'] = {
    string_id = "vpart_id",
    attributes = {
        bonus = { type = "int", writable = true },
        breaks_into_group = { type = "std::string", writable = true },
        color = { type = "int", writable = true },
        color_broken = { type = "int", writable = true },
        default_ammo = { type = "std::string", writable = true },
        difficulty = { type = "int", writable = true },
        dmg_mod = { type = "int", writable = true },
        durability = { type = "int", writable = true },
        epower = { type = "int", writable = true },
        folded_volume = { type = "units::volume", writable = true },
        fuel_type = { type = "std::string", writable = true },
        install_moves = { type = "int", writable = true },
        item = { type = "std::string", writable = true },
        legacy = { type = "bool", writable = true },
        list_order = { type = "int", writable = true },
        location = { type = "std::string", writable = true },
        power = { type = "int", writable = true },
        removal_moves = { type = "int", writable = true },
        repair_moves = { type = "int", writable = true },
        size = { type = "units::volume", writable = true },
        sym = { type = "int", writable = true },
        sym_broken = { type = "int", writable = true },
        z_order = { type = "int", writable = true },
    },
    functions = {
        { name = "check", static = true, rval = nil, args = { }, location = { "./src/veh_type.h", 223 } },
        { name = "get_id", rval = "vpart_id", args = { }, location = { "./src/veh_type.h", 89 } },
        { name = "has_flag", rval = "bool", args = { "std::string" }, location = { "./src/veh_type.h", 213 } },
        { name = "has_flag", rval = "bool", args = { "vpart_bitflags" }, location = { "./src/veh_type.h", 216 } },
        { name = "install_requirements", rval = "requirement_data", args = { }, comment = "Installation requirements for this component", location = { "./src/veh_type.h", 146 } },
        { name = "install_time", rval = "int", args = { "Character" }, comment = "Installation time (in moves) for this component accounting for player skills", location = { "./src/veh_type.h", 155 } },
        { name = "is_repairable", rval = "bool", args = { }, comment = "Returns whether or not the part is repairable", location = { "./src/veh_type.h", 173 } },
        { name = "name", rval = "std::string", args = { }, comment = "Translated name of a part", location = { "./src/veh_type.h", 87 } },
        { name = "removal_requirements", rval = "requirement_data", args = { }, comment = "Requirements for removal of this component", location = { "./src/veh_type.h", 158 } },
        { name = "removal_time", rval = "int", args = { "Character" }, comment = "Removal time (in moves) for this component accounting for player skills", location = { "./src/veh_type.h", 167 } },
        { name = "repair_requirements", rval = "requirement_data", args = { }, comment = "Requirements for repair of this component (per level of damage)", location = { "./src/veh_type.h", 170 } },
        { name = "repair_time", rval = "int", args = { "Character" }, comment = "Repair time (in moves) to fully repair this component, accounting for player skills", location = { "./src/veh_type.h", 182 } },
        { name = "set_flag", rval = nil, args = { "std::string" }, location = { "./src/veh_type.h", 219 } },
    }
}
classes['fault'] = {
    string_id = "fault_id",
    functions = {
        { name = "description", rval = "std::string", args = { }, location = { "./src/fault.h", 34 } },
        { name = "id", rval = "fault_id", args = { }, location = { "./src/fault.h", 22 } },
        { name = "is_null", rval = "bool", args = { }, location = { "./src/fault.h", 26 } },
        { name = "name", rval = "std::string", args = { }, location = { "./src/fault.h", 30 } },
        { name = "requirements", rval = "requirement_data", args = { }, location = { "./src/fault.h", 46 } },
        { name = "time", rval = "int", args = { }, location = { "./src/fault.h", 38 } },
    }
}
classes['effect'] = {
    parents = {
        "JsonSerializer",
        "JsonDeserializer",
    },
    attributes = {
        null_effect = { type = "effect", writable = true, static = true },
    },
    functions = {
        { name = "activated", rval = "bool", args = { "int", "std::string", "int" }, comment = "Checks to see if a given modifier type can activate, and performs any rolls required to do so. mod is a direct          *  multiplier on the overall chance of a modifier type activating.", location = { "./src/effect.h", 231 } },
        { name = "activated", rval = "bool", args = { "int", "std::string", "int", "bool" }, comment = "Checks to see if a given modifier type can activate, and performs any rolls required to do so. mod is a direct          *  multiplier on the overall chance of a modifier type activating.", location = { "./src/effect.h", 231 } },
        { name = "activated", rval = "bool", args = { "int", "std::string", "int", "bool", "float" }, comment = "Checks to see if a given modifier type can activate, and performs any rolls required to do so. mod is a direct          *  multiplier on the overall chance of a modifier type activating.", location = { "./src/effect.h", 231 } },
        { name = "decay", rval = nil, args = { "std::vector<efftype_id>", "std::vector<body_part>", "int", "bool" }, comment = "Decays effect durations, pushing their id and bp's back to rem_ids and rem_bps for removal later          *  if their duration is <= 0. This is called in the middle of a loop through all effects, which is          *  why we aren't allowed to remove the effects here.", location = { "./src/effect.h", 156 } },
        { name = "disp_desc", rval = "std::string", args = { "bool" }, comment = "Returns the description displayed in the player status window.", location = { "./src/effect.h", 146 } },
        { name = "disp_desc", rval = "std::string", args = { }, comment = "Returns the description displayed in the player status window.", location = { "./src/effect.h", 146 } },
        { name = "disp_name", rval = "std::string", args = { }, comment = "Returns the name displayed in the player status window.", location = { "./src/effect.h", 144 } },
        { name = "get_addict_mod", rval = "float", args = { "std::string", "int" }, comment = "Returns the modifier caused by addictions. Currently only handles painkiller addictions.", location = { "./src/effect.h", 235 } },
        { name = "get_amount", rval = "int", args = { "std::string" }, comment = "Returns the amount of a modifier type applied when a new effect is first added.", location = { "./src/effect.h", 220 } },
        { name = "get_amount", rval = "int", args = { "std::string", "bool" }, comment = "Returns the amount of a modifier type applied when a new effect is first added.", location = { "./src/effect.h", 220 } },
        { name = "get_avg_mod", rval = "int", args = { "std::string" }, comment = "Returns the average return of get_mod for a modifier type. Used in effect description displays.", location = { "./src/effect.h", 218 } },
        { name = "get_avg_mod", rval = "int", args = { "std::string", "bool" }, comment = "Returns the average return of get_mod for a modifier type. Used in effect description displays.", location = { "./src/effect.h", 218 } },
        { name = "get_blocks_effects", rval = "std::vector<efftype_id>", args = { }, comment = "Returns the string ids of the effects blocked by this effect to be used in add_effect('id').", location = { "./src/effect.h", 213 } },
        { name = "get_bp", rval = "body_part", args = { }, comment = "Returns the targeted body_part of the effect. This is num_bp for untargeted effects.", location = { "./src/effect.h", 174 } },
        { name = "get_dur_add_perc", rval = "int", args = { }, comment = "Returns the percentage value by further applications of existing effects' duration is multiplied by.", location = { "./src/effect.h", 239 } },
        { name = "get_duration", rval = "int", args = { }, comment = "Returns the remaining duration of an effect.", location = { "./src/effect.h", 160 } },
        { name = "get_effect_type", rval = "effect_type&", args = { }, comment = "Returns the effect's matching effect_type.", location = { "./src/effect.h", 151 } },
        { name = "get_harmful_cough", rval = "bool", args = { }, comment = "Returns true if the coughs caused by an effect can harm the player directly.", location = { "./src/effect.h", 237 } },
        { name = "get_id", rval = "efftype_id", args = { }, comment = "Returns the effect's matching effect_type id.", location = { "./src/effect.h", 255 } },
        { name = "get_int_add_val", rval = "int", args = { }, comment = "Returns the amount an already existing effect intensity is modified by further applications of the same effect.", location = { "./src/effect.h", 243 } },
        { name = "get_int_dur_factor", rval = "int", args = { }, comment = "Returns the number of turns it takes for the intensity to fall by 1 or 0 if intensity isn't based on duration.", location = { "./src/effect.h", 241 } },
        { name = "get_intensity", rval = "int", args = { }, comment = "Returns the intensity of an effect.", location = { "./src/effect.h", 186 } },
        { name = "get_max_duration", rval = "int", args = { }, comment = "Returns the maximum duration of an effect.", location = { "./src/effect.h", 162 } },
        { name = "get_max_intensity", rval = "int", args = { }, comment = "Returns the maximum intensity of an effect.", location = { "./src/effect.h", 188 } },
        { name = "get_max_val", rval = "int", args = { "std::string" }, comment = "Returns the maximum value of a modifier type that get_mod() and get_amount() will push the player to.", location = { "./src/effect.h", 224 } },
        { name = "get_max_val", rval = "int", args = { "std::string", "bool" }, comment = "Returns the maximum value of a modifier type that get_mod() and get_amount() will push the player to.", location = { "./src/effect.h", 224 } },
        { name = "get_min_val", rval = "int", args = { "std::string" }, comment = "Returns the minimum value of a modifier type that get_mod() and get_amount() will push the player to.", location = { "./src/effect.h", 222 } },
        { name = "get_min_val", rval = "int", args = { "std::string", "bool" }, comment = "Returns the minimum value of a modifier type that get_mod() and get_amount() will push the player to.", location = { "./src/effect.h", 222 } },
        { name = "get_mod", rval = "int", args = { "std::string" }, comment = "Returns the matching modifier type from an effect, used for getting actual effect effects.", location = { "./src/effect.h", 216 } },
        { name = "get_mod", rval = "int", args = { "std::string", "bool" }, comment = "Returns the matching modifier type from an effect, used for getting actual effect effects.", location = { "./src/effect.h", 216 } },
        { name = "get_percentage", rval = "float", args = { "std::string", "int" }, comment = "Returns the approximate percentage chance of a modifier type activating on any given tick, used for descriptions.", location = { "./src/effect.h", 228 } },
        { name = "get_percentage", rval = "float", args = { "std::string", "int", "bool" }, comment = "Returns the approximate percentage chance of a modifier type activating on any given tick, used for descriptions.", location = { "./src/effect.h", 228 } },
        { name = "get_removes_effects", rval = "std::vector<efftype_id>", args = { }, comment = "Returns the string ids of the effects removed by this effect to be used in remove_effect('id').", location = { "./src/effect.h", 211 } },
        { name = "get_resist_effects", rval = "std::vector<efftype_id>", args = { }, comment = "Returns the string id of the resist effect to be used in has_effect('id').", location = { "./src/effect.h", 209 } },
        { name = "get_resist_traits", rval = "std::vector<std::string>", args = { }, comment = "Returns the string id of the resist trait to be used in has_trait('id').", location = { "./src/effect.h", 207 } },
        { name = "get_sizing", rval = "bool", args = { "std::string" }, comment = "Returns true if the given modifier type's trigger chance is affected by size mutations.", location = { "./src/effect.h", 226 } },
        { name = "get_speed_name", rval = "std::string", args = { }, comment = "Returns the value used for display on the speed modifier window in the player status menu.", location = { "./src/effect.h", 249 } },
        { name = "get_start_turn", rval = "int", args = { }, comment = "Returns the turn the effect was applied.", location = { "./src/effect.h", 171 } },
        { name = "impairs_movement", rval = "bool", args = { }, comment = "Returns if the effect is supposed to be handed in Creature::movement", location = { "./src/effect.h", 252 } },
        { name = "is_null", rval = "bool", args = { }, comment = "Compares pointers of this effect with the dummy above.", location = { "./src/effect.h", 141 } },
        { name = "is_permanent", rval = "bool", args = { }, comment = "Returns true if an effect is permanent, i.e. it's duration does not decrease over time.", location = { "./src/effect.h", 179 } },
        { name = "mod_duration", rval = nil, args = { "int" }, comment = "Mods the duration, capping at max_duration if it exists.", location = { "./src/effect.h", 166 } },
        { name = "mod_intensity", rval = "int", args = { "int" }, comment = "Modify inensity of effect capped by range [1..max_intensity]          * @param mod Amount to increase current intensity by          * @param alert whether decay messages should be displayed          * @return new intensity of the effect after modification and capping", location = { "./src/effect.h", 204 } },
        { name = "mod_intensity", rval = "int", args = { "int", "bool" }, comment = "Modify inensity of effect capped by range [1..max_intensity]          * @param mod Amount to increase current intensity by          * @param alert whether decay messages should be displayed          * @return new intensity of the effect after modification and capping", location = { "./src/effect.h", 204 } },
        { name = "mult_duration", rval = nil, args = { "float" }, comment = "Multiplies the duration, capping at max_duration if it exists.", location = { "./src/effect.h", 168 } },
        { name = "pause_effect", rval = nil, args = { }, comment = "Makes an effect permanent. Note: This pauses the duration, but does not otherwise change it.", location = { "./src/effect.h", 181 } },
        { name = "set_bp", rval = nil, args = { "body_part" }, comment = "Sets the targeted body_part of an effect.", location = { "./src/effect.h", 176 } },
        { name = "set_duration", rval = nil, args = { "int" }, comment = "Sets the duration, capping at max_duration if it exists.", location = { "./src/effect.h", 164 } },
        { name = "set_intensity", rval = "int", args = { "int" }, comment = "Sets inensity of effect capped by range [1..max_intensity]          * @param val Value to set intensity to          * @param alert whether decay messages should be displayed          * @return new intensity of the effect after val subjected to above cap", location = { "./src/effect.h", 196 } },
        { name = "set_intensity", rval = "int", args = { "int", "bool" }, comment = "Sets inensity of effect capped by range [1..max_intensity]          * @param val Value to set intensity to          * @param alert whether decay messages should be displayed          * @return new intensity of the effect after val subjected to above cap", location = { "./src/effect.h", 196 } },
        { name = "unpause_effect", rval = nil, args = { }, comment = "Makes an effect not permanent. Note: This unpauses the duration, but does not otherwise change it.", location = { "./src/effect.h", 183 } },
        { name = "use_part_descs", rval = "bool", args = { }, comment = "Returns true if a description will be formatted as 'Your' + body_part + description.", location = { "./src/effect.h", 148 } },
    }
}
classes['vitamin'] = {
    string_id = "vitamin_id",
    functions = {
        { name = "deficiency", rval = "efftype_id", args = { }, comment = "Disease effect with increasing intensity proportional to vitamin deficiency", location = { "./src/vitamin.h", 29 } },
        { name = "excess", rval = "efftype_id", args = { }, comment = "Disease effect with increasing intensity proportional to vitamin excess", location = { "./src/vitamin.h", 34 } },
        { name = "id", rval = "vitamin_id", args = { }, location = { "./src/vitamin.h", 16 } },
        { name = "is_null", rval = "bool", args = { }, location = { "./src/vitamin.h", 20 } },
        { name = "max", rval = "int", args = { }, comment = "Upper bound for any accumulation of this vitamin", location = { "./src/vitamin.h", 44 } },
        { name = "min", rval = "int", args = { }, comment = "Lower bound for deficiency of this vitamin", location = { "./src/vitamin.h", 39 } },
        { name = "name", rval = "std::string", args = { }, location = { "./src/vitamin.h", 24 } },
        { name = "rate", rval = "int", args = { }, comment = "Usage rate of vitamin (turns to consume unit)          * Lower bound is zero whereby vitamin is not required (but may still accumulate)          * If unspecified in JSON a default value of 60 minutes is used", location = { "./src/vitamin.h", 53 } },
        { name = "severity", rval = "int", args = { "int" }, comment = "Get intensity of deficiency or zero if not deficient for specified qty", location = { "./src/vitamin.h", 58 } },
    }
}
classes['npc'] = {
    parents = {
        "player",
    },
    attributes = {
        attitude = { type = "npc_attitude", writable = true },
        companion_mission = { type = "std::string", writable = true },
        companion_mission_time = { type = "int", writable = true },
        fac_id = { type = "std::string", writable = true },
        fetching_item = { type = "bool", writable = true },
        goal = { type = "tripoint", writable = true },
        guard_pos = { type = "tripoint", writable = true },
        has_new_items = { type = "bool", writable = true },
        hit_by_player = { type = "bool", writable = true },
        idz = { type = "std::string", writable = true },
        last_player_seen_pos = { type = "tripoint", writable = true },
        last_seen_player_turn = { type = "int", writable = true },
        last_updated = { type = "int", writable = true },
        marked_for_death = { type = "bool", writable = true },
        mission = { type = "npc_mission", writable = true },
        needs = { type = "std::vector<npc_need>", writable = true },
        no_goal_point = { type = "tripoint", static = true },
        path = { type = "std::vector<tripoint>", writable = true },
        patience = { type = "int", writable = true },
        pulp_location = { type = "tripoint", writable = true },
        restock = { type = "int", writable = true },
        wander_pos = { type = "tripoint", writable = true },
        wander_time = { type = "int", writable = true },
        wanted_item_pos = { type = "tripoint", writable = true },
        worst_item_value = { type = "int", writable = true },
    },
    functions = {
        { name = "activate_item", rval = nil, args = { "int" }, location = { "./src/npc.h", 598 } },
        { name = "adjust_worn", rval = "bool", args = { }, location = { "./src/npc.h", 591 } },
        { name = "aim", rval = nil, args = { }, location = { "./src/npc.h", 673 } },
        { name = "alt_attack", rval = "bool", args = { }, location = { "./src/npc.h", 716 } },
        { name = "assess_danger", rval = nil, args = { }, location = { "./src/npc.h", 641 } },
        { name = "assigned_missions_value", rval = "int", args = { }, location = { "./src/npc.h", 551 } },
        { name = "average_damage_dealt", rval = "float", args = { }, location = { "./src/npc.h", 614 } },
        { name = "avoid_friendly_fire", rval = nil, args = { }, location = { "./src/npc.h", 688 } },
        { name = "best_skill", rval = "skill_id", args = { }, location = { "./src/npc.h", 515 } },
        { name = "bravery_check", rval = "bool", args = { "int" }, location = { "./src/npc.h", 615 } },
        { name = "can_move_to", rval = "bool", args = { "tripoint" }, location = { "./src/npc.h", 685 } },
        { name = "can_move_to", rval = "bool", args = { "tripoint", "bool" }, location = { "./src/npc.h", 685 } },
        { name = "can_reload_current", rval = "bool", args = { }, comment = "Can reload currently wielded gun?", location = { "./src/npc.h", 663 } },
        { name = "character_danger", rval = "float", args = { "Character" }, location = { "./src/npc.h", 540 } },
        { name = "choose_target", rval = nil, args = { }, location = { "./src/npc.h", 640 } },
        { name = "complain", rval = "bool", args = { }, location = { "./src/npc.h", 624 } },
        { name = "confidence_mult", rval = "float", args = { }, location = { "./src/npc.h", 656 } },
        { name = "confident_gun_mode_range", rval = "int", args = { "item::gun_mode" }, location = { "./src/npc.h", 658 } },
        { name = "confident_gun_mode_range", rval = "int", args = { "item::gun_mode", "int" }, location = { "./src/npc.h", 658 } },
        { name = "confident_shoot_range", rval = "int", args = { "item" }, location = { "./src/npc.h", 657 } },
        { name = "confident_throw_range", rval = "int", args = { "item", "Creature" }, location = { "./src/npc.h", 659 } },
        { name = "consume_food", rval = "bool", args = { }, comment = "Returns true if food was consumed, false otherwise.", location = { "./src/npc.h", 723 } },
        { name = "current_target", rval = "Creature&", args = { }, location = { "./src/npc.h", 610 } },
        { name = "danger_assessment", rval = "float", args = { }, location = { "./src/npc.h", 613 } },
        { name = "decide_needs", rval = nil, args = { }, location = { "./src/npc.h", 620 } },
        { name = "do_pulp", rval = "bool", args = { }, comment = "Returns true if it handles the turn.", location = { "./src/npc.h", 712 } },
        { name = "do_reload", rval = nil, args = { "item" }, location = { "./src/npc.h", 674 } },
        { name = "drop_items", rval = nil, args = { "int", "int" }, location = { "./src/npc.h", 699 } },
        { name = "emergency", rval = "bool", args = { "float" }, location = { "./src/npc.h", 617 } },
        { name = "emergency", rval = "bool", args = { }, location = { "./src/npc.h", 616 } },
        { name = "enough_time_to_reload", rval = "bool", args = { "item" }, location = { "./src/npc.h", 661 } },
        { name = "evaluate_enemy", rval = "float", args = { "Creature" }, comment = "rates how dangerous a target is from 0 (harmless) to 1 (max danger)", location = { "./src/npc.h", 638 } },
        { name = "fac_has_job", rval = "bool", args = { "faction_job" }, location = { "./src/npc.h", 535 } },
        { name = "fac_has_value", rval = "bool", args = { "faction_value" }, location = { "./src/npc.h", 534 } },
        { name = "find_corpse_to_pulp", rval = "bool", args = { }, comment = "Returns true if it finds one.", location = { "./src/npc.h", 710 } },
        { name = "find_item", rval = nil, args = { }, location = { "./src/npc.h", 697 } },
        { name = "find_npc", rval = "npc&", args = { "std::string" }, location = { "./src/npc.h", 479 } },
        { name = "find_reloadable", rval = "item&", args = { }, location = { "./src/npc.h", 666 } },
        { name = "follow_distance", rval = "int", args = { }, location = { "./src/npc.h", 577 } },
        { name = "form_opinion", rval = nil, args = { "player" }, location = { "./src/npc.h", 538 } },
        { name = "get_healing_item", rval = "item&", args = { "bool" }, location = { "./src/npc.h", 593 } },
        { name = "get_healing_item", rval = "item&", args = { "bool", "bool" }, location = { "./src/npc.h", 593 } },
        { name = "get_healing_item", rval = "item&", args = { "bool", "bool", "bool" }, location = { "./src/npc.h", 593 } },
        { name = "get_healing_item", rval = "item&", args = { "bool", "bool", "bool", "bool" }, location = { "./src/npc.h", 593 } },
        { name = "get_healing_item", rval = "item&", args = { }, location = { "./src/npc.h", 593 } },
        { name = "go_to_destination", rval = nil, args = { }, location = { "./src/npc.h", 728 } },
        { name = "guaranteed_hostile", rval = "bool", args = { }, comment = "Is enemy or will turn into one (can't be convinced not to attack).", location = { "./src/npc.h", 571 } },
        { name = "guard_current_pos", rval = nil, args = { }, location = { "./src/npc.h", 731 } },
        { name = "has_destination", rval = "bool", args = { }, location = { "./src/npc.h", 726 } },
        { name = "has_healing_item", rval = "bool", args = { "bool" }, location = { "./src/npc.h", 592 } },
        { name = "has_healing_item", rval = "bool", args = { "bool", "bool" }, location = { "./src/npc.h", 592 } },
        { name = "has_healing_item", rval = "bool", args = { "bool", "bool", "bool" }, location = { "./src/npc.h", 592 } },
        { name = "has_healing_item", rval = "bool", args = { }, location = { "./src/npc.h", 592 } },
        { name = "has_item_whitelist", rval = "bool", args = { }, location = { "./src/npc.h", 705 } },
        { name = "has_painkiller", rval = "bool", args = { }, location = { "./src/npc.h", 595 } },
        { name = "heal_player", rval = nil, args = { "player" }, location = { "./src/npc.h", 717 } },
        { name = "heal_self", rval = nil, args = { }, location = { "./src/npc.h", 718 } },
        { name = "hostile_anger_level", rval = "int", args = { }, location = { "./src/npc.h", 543 } },
        { name = "is_active", rval = "bool", args = { }, location = { "./src/npc.h", 618 } },
        { name = "is_dead", rval = "bool", args = { }, location = { "./src/npc.h", 622 } },
        { name = "is_enemy", rval = "bool", args = { }, location = { "./src/npc.h", 562 } },
        { name = "is_following", rval = "bool", args = { }, location = { "./src/npc.h", 563 } },
        { name = "is_friend", rval = "bool", args = { }, location = { "./src/npc.h", 564 } },
        { name = "is_guarding", rval = "bool", args = { }, comment = "Standing in one spot, moving back if removed from it.", location = { "./src/npc.h", 567 } },
        { name = "is_leader", rval = "bool", args = { }, location = { "./src/npc.h", 565 } },
        { name = "is_minion", rval = "bool", args = { }, comment = "Trusts you a lot.", location = { "./src/npc.h", 569 } },
        { name = "item_name_whitelisted", rval = "bool", args = { "std::string" }, location = { "./src/npc.h", 706 } },
        { name = "item_whitelisted", rval = "bool", args = { "item" }, location = { "./src/npc.h", 707 } },
        { name = "load_npc_template", rval = nil, args = { "std::string" }, location = { "./src/npc.h", 480 } },
        { name = "look_for_player", rval = nil, args = { "player" }, location = { "./src/npc.h", 720 } },
        { name = "make_angry", rval = nil, args = { }, location = { "./src/npc.h", 544 } },
        { name = "minimum_item_value", rval = "int", args = { }, location = { "./src/npc.h", 585 } },
        { name = "move", rval = nil, args = { }, location = { "./src/npc.h", 633 } },
        { name = "move_away_from", rval = nil, args = { "tripoint" }, location = { "./src/npc.h", 689 } },
        { name = "move_away_from", rval = nil, args = { "tripoint", "bool" }, location = { "./src/npc.h", 689 } },
        { name = "move_pause", rval = nil, args = { }, location = { "./src/npc.h", 690 } },
        { name = "move_to", rval = nil, args = { "tripoint" }, location = { "./src/npc.h", 686 } },
        { name = "move_to", rval = nil, args = { "tripoint", "bool" }, location = { "./src/npc.h", 686 } },
        { name = "move_to_next", rval = nil, args = { }, location = { "./src/npc.h", 687 } },
        { name = "mug_player", rval = nil, args = { "player" }, location = { "./src/npc.h", 719 } },
        { name = "on_attacked", rval = nil, args = { "Creature" }, location = { "./src/npc.h", 550 } },
        { name = "on_load", rval = nil, args = { }, comment = "Retroactively update npc.", location = { "./src/npc.h", 853 } },
        { name = "on_unload", rval = nil, args = { }, comment = "Do some cleanup and caching as npc is being unloaded from map.", location = { "./src/npc.h", 849 } },
        { name = "opinion_text", rval = "std::string", args = { }, location = { "./src/npc.h", 531 } },
        { name = "pick_talk_topic", rval = "std::string", args = { "player" }, location = { "./src/npc.h", 539 } },
        { name = "pick_up_item", rval = nil, args = { }, location = { "./src/npc.h", 698 } },
        { name = "pick_up_item_map", rval = "std::list<item>", args = { "tripoint" }, comment = "Picks up items and returns a list of them.", location = { "./src/npc.h", 702 } },
        { name = "pick_up_item_vehicle", rval = "std::list<item>", args = { "vehicle", "int" }, location = { "./src/npc.h", 703 } },
        { name = "place_on_map", rval = nil, args = { }, comment = "Places the NPC on the @ref map. This update its      * pos values to fit the current offset of      * map (g->levx, g->levy).      * If the square on the map where the NPC would go is not empty      * a spiral search for an empty square around it is performed.", location = { "./src/npc.h", 510 } },
        { name = "randomize", rval = nil, args = { }, location = { "./src/npc.h", 483 } },
        { name = "reach_destination", rval = nil, args = { }, location = { "./src/npc.h", 729 } },
        { name = "regen_ai_cache", rval = nil, args = { }, location = { "./src/npc.h", 608 } },
        { name = "saw_player_recently", rval = "bool", args = { }, location = { "./src/npc.h", 721 } },
        { name = "say", rval = nil, args = { "std::string" }, location = { "./src/npc.h", 619 } },
        { name = "scan_new_items", rval = "bool", args = { }, location = { "./src/npc.h", 650 } },
        { name = "set_destination", rval = nil, args = { }, location = { "./src/npc.h", 727 } },
        { name = "set_fac", rval = nil, args = { "std::string" }, location = { "./src/npc.h", 485 } },
        { name = "shift", rval = nil, args = { "int", "int" }, location = { "./src/npc.h", 629 } },
        { name = "shop_restock", rval = nil, args = { }, location = { "./src/npc.h", 583 } },
        { name = "short_description", rval = "std::string", args = { }, location = { "./src/npc.h", 530 } },
        { name = "skills_offered_to", rval = "std::vector<skill_id>", args = { "player" }, comment = "@return Skills of which this NPC has a higher level than the given player. In other      * words: skills this NPC could teach the player.", location = { "./src/npc.h", 556 } },
        { name = "smash_ability", rval = "int", args = { }, location = { "./src/npc.h", 623 } },
        { name = "spawn_at_precise", rval = nil, args = { "point", "tripoint" }, comment = "As spawn_at, but also sets position within the submap.      * Note: final submap may differ from submap_offset if @ref square has      * x/y values outside [0, SEEX-1]/[0, SEEY-1] range.", location = { "./src/npc.h", 497 } },
        { name = "spawn_at_random_city", rval = nil, args = { "overmap" }, comment = "Calls spawn_at, spawns in a random city in      * the given overmap on z-level 0.", location = { "./src/npc.h", 502 } },
        { name = "spawn_at_sm", rval = nil, args = { "int", "int", "int" }, comment = "Set @ref submap_coords and @ref pos.      * @param mx,my,mz are global submap coordinates.      * This function also adds the npc object to the overmap.", location = { "./src/npc.h", 491 } },
        { name = "styles_offered_to", rval = "std::vector<matype_id>", args = { "player" }, comment = "Martial art styles that we known, but the player p doesn't.", location = { "./src/npc.h", 560 } },
        { name = "talk_to_u", rval = nil, args = { }, location = { "./src/npc.h", 581 } },
        { name = "took_painkiller", rval = "bool", args = { }, location = { "./src/npc.h", 596 } },
        { name = "turned_hostile", rval = "bool", args = { }, location = { "./src/npc.h", 542 } },
        { name = "update_path", rval = "bool", args = { "tripoint" }, comment = "Tries to find path to p. If it can, updates path to it.      * @param p Destination of pathing      * @param no_bashing Don't allow pathing through tiles that require bashing.      * @param force If there is no valid path, empty the current path.      * @returns If it updated the path.", location = { "./src/npc.h", 684 } },
        { name = "update_path", rval = "bool", args = { "tripoint", "bool" }, comment = "Tries to find path to p. If it can, updates path to it.      * @param p Destination of pathing      * @param no_bashing Don't allow pathing through tiles that require bashing.      * @param force If there is no valid path, empty the current path.      * @returns If it updated the path.", location = { "./src/npc.h", 684 } },
        { name = "update_path", rval = "bool", args = { "tripoint", "bool", "bool" }, comment = "Tries to find path to p. If it can, updates path to it.      * @param p Destination of pathing      * @param no_bashing Don't allow pathing through tiles that require bashing.      * @param force If there is no valid path, empty the current path.      * @returns If it updated the path.", location = { "./src/npc.h", 684 } },
        { name = "update_worst_item_value", rval = nil, args = { }, location = { "./src/npc.h", 586 } },
        { name = "use_painkiller", rval = nil, args = { }, location = { "./src/npc.h", 597 } },
        { name = "value", rval = "int", args = { "item" }, location = { "./src/npc.h", 587 } },
        { name = "value", rval = "int", args = { "item", "int" }, location = { "./src/npc.h", 588 } },
        { name = "vehicle_danger", rval = "float", args = { "int" }, location = { "./src/npc.h", 541 } },
        { name = "wants_to_buy", rval = "bool", args = { "item" }, location = { "./src/npc.h", 604 } },
        { name = "wants_to_buy", rval = "bool", args = { "item", "int", "int" }, location = { "./src/npc.h", 605 } },
        { name = "wants_to_sell", rval = "bool", args = { "item" }, location = { "./src/npc.h", 602 } },
        { name = "wants_to_sell", rval = "bool", args = { "item", "int", "int" }, location = { "./src/npc.h", 603 } },
        { name = "wear_if_wanted", rval = "bool", args = { "item" }, location = { "./src/npc.h", 589 } },
        { name = "wield_best_melee", rval = nil, args = { }, location = { "./src/npc.h", 715 } },
        { name = "wield_better_weapon", rval = "bool", args = { }, location = { "./src/npc.h", 652 } },
        { name = "will_accept_from_player", rval = "bool", args = { "item" }, comment = "Is the item safe or does the NPC trust you enough?", location = { "./src/npc.h", 600 } },
        { name = "wont_hit_friend", rval = "bool", args = { "tripoint", "item", "bool" }, location = { "./src/npc.h", 660 } },
    }
}
classes['damage_instance'] = {
    new = {
        { "damage_type", "float" },
        { "damage_type", "float", "float" },
        { "damage_type", "float", "float", "float" },
        { "damage_type", "float", "float", "float", "float" },
        { },
    },
    by_value = true,
    attributes = {
        damage_units = { type = "std::vector<damage_unit>", writable = true },
    },
    functions = {
        { name = "add", rval = nil, args = { "damage_instance" }, location = { "./src/damage.h", 67 } },
        { name = "add", rval = nil, args = { "damage_unit" }, location = { "./src/damage.h", 68 } },
        { name = "add_damage", rval = nil, args = { "damage_type", "float" }, location = { "./src/damage.h", 66 } },
        { name = "add_damage", rval = nil, args = { "damage_type", "float", "float" }, location = { "./src/damage.h", 66 } },
        { name = "add_damage", rval = nil, args = { "damage_type", "float", "float", "float" }, location = { "./src/damage.h", 66 } },
        { name = "add_damage", rval = nil, args = { "damage_type", "float", "float", "float", "float" }, location = { "./src/damage.h", 66 } },
        { name = "clear", rval = nil, args = { }, location = { "./src/damage.h", 57 } },
        { name = "empty", rval = "bool", args = { }, location = { "./src/damage.h", 58 } },
        { name = "mult_damage", rval = nil, args = { "float" }, location = { "./src/damage.h", 54 } },
        { name = "mult_damage", rval = nil, args = { "float", "bool" }, location = { "./src/damage.h", 54 } },
        { name = "physical", static = true, rval = "damage_instance", args = { "float", "float", "float" }, location = { "./src/damage.h", 52 } },
        { name = "physical", static = true, rval = "damage_instance", args = { "float", "float", "float", "float" }, location = { "./src/damage.h", 52 } },
        { name = "total_damage", rval = "float", args = { }, location = { "./src/damage.h", 56 } },
        { name = "type_damage", rval = "float", args = { "damage_type" }, location = { "./src/damage.h", 55 } },
    }
}
classes['damage_unit'] = {
    new = {
        { "damage_type", "float" },
        { "damage_type", "float", "float" },
        { "damage_type", "float", "float", "float" },
        { "damage_type", "float", "float", "float", "float" },
    },
    by_value = true,
    attributes = {
        amount = { type = "float", writable = true },
        damage_multiplier = { type = "float", writable = true },
        res_mult = { type = "float", writable = true },
        res_pen = { type = "float", writable = true },
        type = { type = "damage_type", writable = true },
    },
}
classes['recipe_dictionary'] = {
    functions = {
        { name = "get_uncraft", static = true, rval = "recipe", args = { "std::string" }, comment = "Returns disassembly recipe (or null recipe if no match)", location = { "./src/recipe_dictionary.h", 38 } },
        { name = "size", rval = "int", args = { }, location = { "./src/recipe_dictionary.h", 33 } },
    }
}
classes['recipe'] = {
    new = {
        { },
    },
    by_value_and_reference = true,
    attributes = {
        category = { type = "std::string", writable = true },
        difficulty = { type = "int", writable = true },
        result = { type = "std::string", writable = true },
        skill_used = { type = "skill_id", writable = true },
        subcategory = { type = "std::string", writable = true },
        time = { type = "int", writable = true },
    },
    functions = {
        { name = "batch_time", rval = "int", args = { "int", "float", "int" }, location = { "./src/recipe.h", 79 } },
        { name = "create_byproducts", rval = "std::vector<item>", args = { "int" }, location = { "./src/recipe.h", 75 } },
        { name = "create_byproducts", rval = "std::vector<item>", args = { }, location = { "./src/recipe.h", 75 } },
        { name = "create_result", rval = "item", args = { }, location = { "./src/recipe.h", 71 } },
        { name = "create_results", rval = "std::vector<item>", args = { "int" }, location = { "./src/recipe.h", 72 } },
        { name = "create_results", rval = "std::vector<item>", args = { }, location = { "./src/recipe.h", 72 } },
        { name = "disassembly_requirements", rval = "requirement_data", args = { }, comment = "If recipe can be used for disassembly fetch the combined requirements", location = { "./src/recipe.h", 53 } },
        { name = "finalize", rval = nil, args = { }, location = { "./src/recipe.h", 84 } },
        { name = "get_consistency_error", rval = "std::string", args = { }, comment = "Returns a non-empty string describing an inconsistency (if any) in the recipe.", location = { "./src/recipe.h", 87 } },
        { name = "has_byproducts", rval = "bool", args = { }, location = { "./src/recipe.h", 77 } },
        { name = "has_flag", rval = "bool", args = { "std::string" }, location = { "./src/recipe.h", 81 } },
        { name = "ident", rval = "std::string", args = { }, location = { "./src/recipe.h", 44 } },
        { name = "is_blacklisted", rval = "bool", args = { }, location = { "./src/recipe.h", 48 } },
        { name = "required_skills_string", rval = "std::string", args = { }, location = { "./src/recipe.h", 67 } },
        { name = "requirements", rval = "requirement_data", args = { }, comment = "Fetch combined requirement data (inline and via 'using' syntax)", location = { "./src/recipe.h", 40 } },
    }
}
classes['inventory'] = {
    new = {
        { "inventory" },
        { },
    },
    by_value_and_reference = true,
    attributes = {
        nullitem = { type = "item", writable = true },
        nullstack = { type = "std::list<item>", writable = true },
    },
    functions = {
        { name = "add_item", rval = "item&", args = { "item" }, location = { "./src/inventory.h", 86 } },
        { name = "add_item", rval = "item&", args = { "item", "bool" }, location = { "./src/inventory.h", 86 } },
        { name = "add_item", rval = "item&", args = { "item", "bool", "bool" }, location = { "./src/inventory.h", 86 } },
        { name = "add_item_keep_invlet", rval = nil, args = { "item" }, location = { "./src/inventory.h", 87 } },
        { name = "add_stack", rval = nil, args = { "std::list<item>" }, location = { "./src/inventory.h", 82 } },
        { name = "amount_of", rval = "int", args = { "std::string" }, comment = "Count items matching id including both this instance and any contained items          * @param what ID of items to count          * @param pseudo whether pseudo-items (from map/vehicle tiles, bionics etc) are considered          * @param limit stop searching after this many matches          * @note items must be empty to be considered a match", location = { "./src/visitable.h", 88 } },
        { name = "amount_of", rval = "int", args = { "std::string", "bool" }, comment = "Count items matching id including both this instance and any contained items          * @param what ID of items to count          * @param pseudo whether pseudo-items (from map/vehicle tiles, bionics etc) are considered          * @param limit stop searching after this many matches          * @note items must be empty to be considered a match", location = { "./src/visitable.h", 88 } },
        { name = "amount_of", rval = "int", args = { "std::string", "bool", "int" }, comment = "Count items matching id including both this instance and any contained items          * @param what ID of items to count          * @param pseudo whether pseudo-items (from map/vehicle tiles, bionics etc) are considered          * @param limit stop searching after this many matches          * @note items must be empty to be considered a match", location = { "./src/visitable.h", 88 } },
        { name = "assign_empty_invlet", rval = nil, args = { "item" }, location = { "./src/inventory.h", 175 } },
        { name = "assign_empty_invlet", rval = nil, args = { "item", "bool" }, location = { "./src/inventory.h", 175 } },
        { name = "charges_of", rval = "int", args = { "std::string" }, comment = "Count maximum available charges from this instance and any contained items          * @param what ID of item to count charges of          * @param limit stop searching after this many charges have been found", location = { "./src/visitable.h", 79 } },
        { name = "charges_of", rval = "int", args = { "std::string", "int" }, comment = "Count maximum available charges from this instance and any contained items          * @param what ID of item to count charges of          * @param limit stop searching after this many charges have been found", location = { "./src/visitable.h", 79 } },
        { name = "clear", rval = nil, args = { }, location = { "./src/inventory.h", 81 } },
        { name = "clone_stack", rval = nil, args = { "std::list<item>" }, location = { "./src/inventory.h", 83 } },
        { name = "const_stack", rval = "std::list<item>", args = { "int" }, location = { "./src/inventory.h", 60 } },
        { name = "find_item", rval = "item&", args = { "int" }, location = { "./src/inventory.h", 118 } },
        { name = "find_parent", rval = "item&", args = { "item" }, comment = "Determine the immediate parent container (if any) for an item.          * @param it item to search for which must be contained (at any depth) by this object          * @return parent container or nullptr if the item is not within a container", location = { "./src/visitable.h", 52 } },
        { name = "form_from_map", rval = nil, args = { "tripoint", "int" }, location = { "./src/inventory.h", 96 } },
        { name = "form_from_map", rval = nil, args = { "tripoint", "int", "bool" }, location = { "./src/inventory.h", 96 } },
        { name = "has_amount", rval = "bool", args = { "std::string", "int" }, comment = "Check instance provides at least qty of an item (@see amount_of)", location = { "./src/visitable.h", 92 } },
        { name = "has_amount", rval = "bool", args = { "std::string", "int", "bool" }, comment = "Check instance provides at least qty of an item (@see amount_of)", location = { "./src/visitable.h", 92 } },
        { name = "has_charges", rval = "bool", args = { "std::string", "int" }, location = { "./src/inventory.h", 143 } },
        { name = "has_components", rval = "bool", args = { "std::string", "int" }, location = { "./src/inventory.h", 142 } },
        { name = "has_enough_painkiller", rval = "bool", args = { "int" }, location = { "./src/inventory.h", 149 } },
        { name = "has_item", rval = "bool", args = { "item" }, comment = "Returns true if this visitable instance contains the item", location = { "./src/visitable.h", 63 } },
        { name = "has_quality", rval = "bool", args = { "quality_id" }, comment = "Returns true if instance has amount (or more) items of at least quality level", location = { "./src/visitable.h", 69 } },
        { name = "has_quality", rval = "bool", args = { "quality_id", "int" }, comment = "Returns true if instance has amount (or more) items of at least quality level", location = { "./src/visitable.h", 69 } },
        { name = "has_quality", rval = "bool", args = { "quality_id", "int", "int" }, comment = "Returns true if instance has amount (or more) items of at least quality level", location = { "./src/visitable.h", 69 } },
        { name = "has_tools", rval = "bool", args = { "std::string", "int" }, location = { "./src/inventory.h", 141 } },
        { name = "invlet_to_position", rval = "int", args = { "int" }, comment = "Return the item position of the item with given invlet, return INT_MIN if          * the inventory does not have such an item with that invlet. Don't use this on npcs inventory.", location = { "./src/inventory.h", 133 } },
        { name = "is_sorted", rval = "bool", args = { }, location = { "./src/inventory.h", 63 } },
        { name = "item_by_type", rval = "item&", args = { "std::string" }, location = { "./src/inventory.h", 119 } },
        { name = "item_or_container", rval = "item&", args = { "std::string" }, location = { "./src/inventory.h", 120 } },
        { name = "leak_level", rval = "int", args = { "std::string" }, location = { "./src/inventory.h", 145 } },
        { name = "max_quality", rval = "int", args = { "quality_id" }, comment = "Return maximum tool quality level provided by instance or INT_MIN if not found", location = { "./src/visitable.h", 72 } },
        { name = "most_appropriate_painkiller", rval = "item&", args = { "int" }, location = { "./src/inventory.h", 150 } },
        { name = "most_loaded_gun", rval = "item&", args = { }, location = { "./src/inventory.h", 152 } },
        { name = "num_items", rval = "int", args = { }, location = { "./src/inventory.h", 62 } },
        { name = "position_by_item", rval = "int", args = { "item" }, comment = "Returns the item position of the stack that contains the given item (compared by          * pointers). Returns INT_MIN if the item is not found.          * Note that this may lose some information, for example the returned position is the          * same when the given item points to the container and when it points to the item inside          * the container. All items that are part of the same stack have the same item position.", location = { "./src/inventory.h", 129 } },
        { name = "position_by_type", rval = "int", args = { "std::string" }, location = { "./src/inventory.h", 130 } },
        { name = "push_back", rval = nil, args = { "item" }, location = { "./src/inventory.h", 88 } },
        { name = "push_back", rval = nil, args = { "std::list<item>" }, location = { "./src/inventory.h", 84 } },
        { name = "reduce_stack", rval = "std::list<item>", args = { "int", "int" }, location = { "./src/inventory.h", 111 } },
        { name = "reduce_stack", rval = "std::list<item>", args = { "std::string", "int" }, location = { "./src/inventory.h", 112 } },
        { name = "remove_item", rval = "item", args = { "int" }, location = { "./src/inventory.h", 106 } },
        { name = "remove_item", rval = "item", args = { "item" }, comment = "Remove a specific item from the inventory. The item is compared          * by pointer. Contents of the item are removed as well.          * @param it A pointer to the item to be removed. The item *must* exists          * in this inventory.          * @return A copy of the removed item.", location = { "./src/inventory.h", 105 } },
        { name = "remove_item", rval = "item", args = { "item" }, comment = "Removes and returns the item which must be contained by this instance", location = { "./src/visitable.h", 111 } },
        { name = "remove_randomly_by_volume", rval = "std::list<item>", args = { "units::volume" }, comment = "Randomly select items until the volume quota is filled.", location = { "./src/inventory.h", 110 } },
        { name = "restack", rval = nil, args = { "player" }, location = { "./src/inventory.h", 94 } },
        { name = "restack", rval = nil, args = { }, location = { "./src/inventory.h", 94 } },
        { name = "rust_iron_items", rval = nil, args = { }, location = { "./src/inventory.h", 154 } },
        { name = "size", rval = "int", args = { }, location = { "./src/inventory.h", 61 } },
        { name = "sort", rval = nil, args = { }, location = { "./src/inventory.h", 80 } },
        { name = "unsort", rval = nil, args = { }, location = { "./src/inventory.h", 79 } },
        { name = "use_amount", rval = "std::list<item>", args = { "std::string", "int" }, location = { "./src/inventory.h", 139 } },
        { name = "volume", rval = "units::volume", args = { }, location = { "./src/inventory.h", 157 } },
        { name = "weight", rval = "int", args = { }, location = { "./src/inventory.h", 156 } },
        { name = "worst_item_value", rval = "int", args = { "npc" }, location = { "./src/inventory.h", 148 } },
    }
}
classes['requirement_data'] = {
    string_id = "requirement_id",
    by_value_and_reference = true,
    functions = {
        { name = "all", static = true, rval = "std::map<requirement_id, requirement_data>", args = { }, comment = "Get all currently loaded requirements", location = { "./src/requirements.h", 187 } },
        { name = "blacklist_item", rval = nil, args = { "std::string" }, comment = "Remove tools or components of given type leaving qualities unchanged          * @note if the last available component of a grouping is removed the recipe          * will be marked as @ref blacklisted", location = { "./src/requirements.h", 209 } },
        { name = "can_make_with_inventory", rval = "bool", args = { "inventory" }, location = { "./src/requirements.h", 216 } },
        { name = "can_make_with_inventory", rval = "bool", args = { "inventory", "int" }, location = { "./src/requirements.h", 216 } },
        { name = "disassembly_requirements", rval = "requirement_data", args = { }, comment = "Gets a variant of this recipe with crafting-only tools replaced by their          * disassembly equivalents.", location = { "./src/requirements.h", 228 } },
        { name = "get_folded_components_list", rval = "std::vector<std::string>", args = { "int", "int", "inventory" }, location = { "./src/requirements.h", 218 } },
        { name = "get_folded_components_list", rval = "std::vector<std::string>", args = { "int", "int", "inventory", "int" }, location = { "./src/requirements.h", 218 } },
        { name = "get_folded_tools_list", rval = "std::vector<std::string>", args = { "int", "int", "inventory" }, location = { "./src/requirements.h", 221 } },
        { name = "get_folded_tools_list", rval = "std::vector<std::string>", args = { "int", "int", "inventory", "int" }, location = { "./src/requirements.h", 221 } },
        { name = "id", rval = "requirement_id", args = { }, location = { "./src/requirements.h", 146 } },
        { name = "is_blacklisted", rval = "bool", args = { }, comment = "check if removal of items via @ref blacklist_item left no alternatives in group", location = { "./src/requirements.h", 161 } },
        { name = "is_empty", rval = "bool", args = { }, comment = "empty requirements are not necessary null", location = { "./src/requirements.h", 156 } },
        { name = "is_null", rval = "bool", args = { }, comment = "null requirements are always empty (were never initialized)", location = { "./src/requirements.h", 151 } },
        { name = "list_missing", rval = "std::string", args = { }, comment = "Returns a list of components/tools/qualities that are not available,          * nicely formatted for popup window or similar.", location = { "./src/requirements.h", 202 } },
        { name = "save_requirement", static = true, rval = nil, args = { "requirement_data" }, comment = "Store requirement data for future lookup          * @param req Data to save          * @param id provide (or override) unique id for this instance", location = { "./src/requirements.h", 184 } },
        { name = "save_requirement", static = true, rval = nil, args = { "requirement_data", "std::string" }, comment = "Store requirement data for future lookup          * @param req Data to save          * @param id provide (or override) unique id for this instance", location = { "./src/requirements.h", 184 } },
    }
}
classes['quality'] = {
    string_id = "quality_id",
    attributes = {
        id = { type = "quality_id" },
        name = { type = "std::string", writable = true },
    },
}
classes['tool_comp'] = {
    new = {
        { "std::string", "int" },
        { },
    },
    by_value_and_reference = true,
    attributes = {
        available = { type = "available_status", writable = true },
        count = { type = "int", writable = true },
        recoverable = { type = "bool", writable = true },
        requirement = { type = "bool", writable = true },
        type = { type = "std::string", writable = true },
    },
    functions = {
        { name = "by_charges", rval = "bool", args = { }, location = { "./src/requirements.h", 70 } },
        { name = "check_consistency", rval = nil, args = { "std::string" }, location = { "./src/requirements.h", 59 } },
        { name = "get_color", rval = "std::string", args = { "bool", "inventory" }, location = { "./src/requirements.h", 69 } },
        { name = "get_color", rval = "std::string", args = { "bool", "inventory", "int" }, location = { "./src/requirements.h", 69 } },
        { name = "has", rval = "bool", args = { "inventory" }, location = { "./src/requirements.h", 67 } },
        { name = "has", rval = "bool", args = { "inventory", "int" }, location = { "./src/requirements.h", 67 } },
        { name = "to_string", rval = "std::string", args = { "int" }, location = { "./src/requirements.h", 68 } },
        { name = "to_string", rval = "std::string", args = { }, location = { "./src/requirements.h", 68 } },
    }
}
classes['item_comp'] = {
    new = {
        { "std::string", "int" },
        { },
    },
    by_value_and_reference = true,
    attributes = {
        available = { type = "available_status", writable = true },
        count = { type = "int", writable = true },
        recoverable = { type = "bool", writable = true },
        requirement = { type = "bool", writable = true },
        type = { type = "std::string", writable = true },
    },
    functions = {
        { name = "check_consistency", rval = nil, args = { "std::string" }, location = { "./src/requirements.h", 59 } },
        { name = "get_color", rval = "std::string", args = { "bool", "inventory" }, location = { "./src/requirements.h", 80 } },
        { name = "get_color", rval = "std::string", args = { "bool", "inventory", "int" }, location = { "./src/requirements.h", 80 } },
        { name = "has", rval = "bool", args = { "inventory" }, location = { "./src/requirements.h", 78 } },
        { name = "has", rval = "bool", args = { "inventory", "int" }, location = { "./src/requirements.h", 78 } },
        { name = "to_string", rval = "std::string", args = { "int" }, location = { "./src/requirements.h", 79 } },
        { name = "to_string", rval = "std::string", args = { }, location = { "./src/requirements.h", 79 } },
    }
}
classes['quality_requirement'] = {
    new = {
        { "quality_id", "int", "int" },
        { },
    },
    by_value_and_reference = true,
    attributes = {
        available = { type = "available_status", writable = true },
        count = { type = "int", writable = true },
        level = { type = "int", writable = true },
        requirement = { type = "bool", writable = true },
        type = { type = "quality_id", writable = true },
    },
    functions = {
        { name = "check_consistency", rval = nil, args = { "std::string" }, location = { "./src/requirements.h", 97 } },
        { name = "get_color", rval = "std::string", args = { "bool", "inventory" }, location = { "./src/requirements.h", 98 } },
        { name = "get_color", rval = "std::string", args = { "bool", "inventory", "int" }, location = { "./src/requirements.h", 98 } },
        { name = "has", rval = "bool", args = { "inventory" }, location = { "./src/requirements.h", 95 } },
        { name = "has", rval = "bool", args = { "inventory", "int" }, location = { "./src/requirements.h", 95 } },
        { name = "to_string", rval = "std::string", args = { "int" }, location = { "./src/requirements.h", 96 } },
        { name = "to_string", rval = "std::string", args = { }, location = { "./src/requirements.h", 96 } },
    }
}
classes['JsonSerializer'] = {
    functions = {
        { name = "serialize", rval = "std::string", args = { }, location = { "./src/json.h", 957 } },
    }
}
classes['JsonDeserializer'] = {
    functions = {
        { name = "deserialize", rval = nil, args = { "std::string" }, location = { "./src/json.h", 996 } },
    }
}
classes['item::solitary_tag'] = {
    by_value = true,
}
classes['item::default_charges_tag'] = {
    by_value = true,
}
classes['item::gun_mode'] = {
    new = {
        { "std::string", "item", "int", "std::set<std::string>" },
        { },
    },
    by_value = true,
    attributes = {
        flags = { type = "std::set<std::string>", writable = true },
        mode = { type = "std::string", writable = true },
        qty = { type = "int", writable = true },
        target = { type = "item", writable = true },
    },
    functions = {
        { name = "melee", rval = "bool", args = { }, comment = "if true perform a melee attach as opposed to shooting", location = { "./src/item.h", 1480 } },
    }
}
classes['item::sound_data'] = {
    by_value = true,
    attributes = {
        sound = { type = "std::string", writable = true },
        volume = { type = "int", writable = true },
    },
}

enums = { }
enums['body_part'] = {
    "bp_torso",
    "bp_head",
    "bp_eyes",
    "bp_mouth",
    "bp_arm_l",
    "bp_arm_r",
    "bp_hand_l",
    "bp_hand_r",
    "bp_leg_l",
    "bp_leg_r",
    "bp_foot_l",
    "bp_foot_r",
    "num_bp",
}
enums['hp_part'] = {
    "hp_head",
    "hp_torso",
    "hp_arm_l",
    "hp_arm_r",
    "hp_leg_l",
    "hp_leg_r",
    "num_hp_parts",
}
enums['phase_id'] = {
    "PNULL",
    "SOLID",
    "LIQUID",
    "GAS",
    "PLASMA",
}
enums['m_size'] = {
    "MS_TINY",
    "MS_SMALL",
    "MS_MEDIUM",
    "MS_LARGE",
    "MS_HUGE",
}
enums['game_message_type'] = {
    "m_good",
    "m_bad",
    "m_mixed",
    "m_warning",
    "m_info",
    "m_neutral",
    "m_debug",
    "m_headshot",
    "m_critical",
    "m_grazing",
}
enums['season_type'] = {
    "SPRING",
    "SUMMER",
    "AUTUMN",
    "WINTER",
}
enums['add_type'] = {
    "ADD_NULL",
    "ADD_CAFFEINE",
    "ADD_ALCOHOL",
    "ADD_SLEEP",
    "ADD_PKILLER",
    "ADD_SPEED",
    "ADD_CIG",
    "ADD_COKE",
    "ADD_CRACK",
    "ADD_MUTAGEN",
    "ADD_DIAZEPAM",
    "ADD_MARLOSS_R",
    "ADD_MARLOSS_B",
    "ADD_MARLOSS_Y",
}
enums['field_id'] = {
    "fd_null",
    "fd_blood",
    "fd_bile",
    "fd_gibs_flesh",
    "fd_gibs_veggy",
    "fd_web",
    "fd_slime",
    "fd_acid",
    "fd_sap",
    "fd_sludge",
    "fd_fire",
    "fd_rubble",
    "fd_smoke",
    "fd_toxic_gas",
    "fd_tear_gas",
    "fd_nuke_gas",
    "fd_gas_vent",
    "fd_fire_vent",
    "fd_flame_burst",
    "fd_electricity",
    "fd_fatigue",
    "fd_push_items",
    "fd_shock_vent",
    "fd_acid_vent",
    "fd_plasma",
    "fd_laser",
    "fd_spotlight",
    "fd_dazzling",
    "fd_blood_veggy",
    "fd_blood_insect",
    "fd_blood_invertebrate",
    "fd_gibs_insect",
    "fd_gibs_invertebrate",
    "fd_cigsmoke",
    "fd_weedsmoke",
    "fd_cracksmoke",
    "fd_methsmoke",
    "fd_bees",
    "fd_incendiary",
    "fd_relax_gas",
    "fd_fungal_haze",
    "fd_hot_air1",
    "fd_hot_air2",
    "fd_hot_air3",
    "fd_hot_air4",
    "fd_fungicidal_gas",
    "num_fields",
}
enums['damage_type'] = {
    "DT_NULL",
    "DT_TRUE",
    "DT_BIOLOGICAL",
    "DT_BASH",
    "DT_CUT",
    "DT_ACID",
    "DT_STAB",
    "DT_HEAT",
    "DT_COLD",
    "DT_ELECTRIC",
    "NUM_DT",
}
enums['m_flag'] = {
    "MF_NULL",
    "MF_SEES",
    "MF_HEARS",
    "MF_GOODHEARING",
    "MF_SMELLS",
    "MF_KEENNOSE",
    "MF_STUMBLES",
    "MF_WARM",
    "MF_NOHEAD",
    "MF_HARDTOSHOOT",
    "MF_GRABS",
    "MF_BASHES",
    "MF_DESTROYS",
    "MF_BORES",
    "MF_POISON",
    "MF_VENOM",
    "MF_BADVENOM",
    "MF_PARALYZE",
    "MF_BLEED",
    "MF_WEBWALK",
    "MF_DIGS",
    "MF_CAN_DIG",
    "MF_FLIES",
    "MF_AQUATIC",
    "MF_SWIMS",
    "MF_ATTACKMON",
    "MF_ANIMAL",
    "MF_PLASTIC",
    "MF_SUNDEATH",
    "MF_ELECTRIC",
    "MF_ACIDPROOF",
    "MF_ACIDTRAIL",
    "MF_FIREPROOF",
    "MF_SLUDGEPROOF",
    "MF_SLUDGETRAIL",
    "MF_FIREY",
    "MF_QUEEN",
    "MF_ELECTRONIC",
    "MF_FUR",
    "MF_LEATHER",
    "MF_WOOL",
    "MF_FEATHER",
    "MF_BONES",
    "MF_FAT",
    "MF_IMMOBILE",
    "MF_HIT_AND_RUN",
    "MF_GUILT",
    "MF_HUMAN",
    "MF_NO_BREATHE",
    "MF_REGENERATES_50",
    "MF_REGENERATES_10",
    "MF_REGENERATES_IN_DARK",
    "MF_FLAMMABLE",
    "MF_REVIVES",
    "MF_CHITIN",
    "MF_VERMIN",
    "MF_NOGIB",
    "MF_LARVA",
    "MF_ARTHROPOD_BLOOD",
    "MF_ACID_BLOOD",
    "MF_BILE_BLOOD",
    "MF_ABSORBS",
    "MF_REGENMORALE",
    "MF_CBM_CIV",
    "MF_CBM_POWER",
    "MF_CBM_SCI",
    "MF_CBM_OP",
    "MF_CBM_TECH",
    "MF_CBM_SUBS",
    "MF_FISHABLE",
    "MF_GROUP_BASH",
    "MF_SWARMS",
    "MF_GROUP_MORALE",
    "MF_INTERIOR_AMMO",
    "MF_CLIMBS",
    "MF_PUSH_MON",
    "MF_NIGHT_INVISIBILITY",
    "MF_REVIVES_HEALTHY",
    "MF_NO_NECRO",
    "MF_AVOID_DANGER_1",
    "MF_AVOID_DANGER_2",
    "MF_PRIORITIZE_TARGETS",
    "MF_NOT_HALLU",
    "MF_MAX",
}
enums['effect_rating'] = {
    "e_good",
    "e_neutral",
    "e_bad",
    "e_mixed",
}
enums['weather_type'] = {
    "WEATHER_NULL",
    "WEATHER_CLEAR",
    "WEATHER_SUNNY",
    "WEATHER_CLOUDY",
    "WEATHER_DRIZZLE",
    "WEATHER_RAINY",
    "WEATHER_THUNDER",
    "WEATHER_LIGHTNING",
    "WEATHER_ACID_DRIZZLE",
    "WEATHER_ACID_RAIN",
    "WEATHER_FLURRIES",
    "WEATHER_SNOW",
    "WEATHER_SNOWSTORM",
    "NUM_WEATHER_TYPES",
}
enums['monster_trigger'] = {
    "MTRIG_NULL",
    "MTRIG_STALK",
    "MTRIG_MEAT",
    "MTRIG_HOSTILE_WEAK",
    "MTRIG_HOSTILE_CLOSE",
    "MTRIG_HURT",
    "MTRIG_FIRE",
    "MTRIG_FRIEND_DIED",
    "MTRIG_FRIEND_ATTACKED",
    "MTRIG_SOUND",
    "N_MONSTER_TRIGGERS",
}
enums['moon_phase'] = {
    "MOON_NEW",
    "MOON_WAXING_CRESCENT",
    "MOON_HALF_MOON_WAXING",
    "MOON_WAXING_GIBBOUS",
    "MOON_FULL",
    "MOON_WANING_GIBBOUS",
    "MOON_HALF_MOON_WANING",
    "MOON_WANING_CRESCENT",
    "MOON_PHASE_MAX",
}
enums['art_effect_passive'] = {
    "AEP_NULL",
    "AEP_STR_UP",
    "AEP_DEX_UP",
    "AEP_PER_UP",
    "AEP_INT_UP",
    "AEP_ALL_UP",
    "AEP_SPEED_UP",
    "AEP_PBLUE",
    "AEP_SNAKES",
    "AEP_INVISIBLE",
    "AEP_CLAIRVOYANCE",
    "AEP_SUPER_CLAIRVOYANCE",
    "AEP_STEALTH",
    "AEP_EXTINGUISH",
    "AEP_GLOW",
    "AEP_PSYSHIELD",
    "AEP_RESIST_ELECTRICITY",
    "AEP_CARRY_MORE",
    "AEP_SAP_LIFE",
    "AEP_SPLIT",
    "AEP_HUNGER",
    "AEP_THIRST",
    "AEP_SMOKE",
    "AEP_EVIL",
    "AEP_SCHIZO",
    "AEP_RADIOACTIVE",
    "AEP_MUTAGENIC",
    "AEP_ATTENTION",
    "AEP_STR_DOWN",
    "AEP_DEX_DOWN",
    "AEP_PER_DOWN",
    "AEP_INT_DOWN",
    "AEP_ALL_DOWN",
    "AEP_SPEED_DOWN",
    "AEP_FORCE_TELEPORT",
    "AEP_MOVEMENT_NOISE",
    "AEP_BAD_WEATHER",
    "AEP_SICK",
    "NUM_AEPS",
}
enums['special_game_id'] = {
    "SGAME_NULL",
    "SGAME_TUTORIAL",
    "SGAME_DEFENSE",
    "NUM_SPECIAL_GAMES",
}
enums['safe_mode_type'] = {
    "SAFE_MODE_OFF",
    "SAFE_MODE_ON",
    "SAFE_MODE_STOP",
}
enums['edible_rating'] = {
    "EDIBLE",
    "INEDIBLE",
    "INEDIBLE_MUTATION",
    "ALLERGY",
    "ALLERGY_WEAK",
    "CANNIBALISM",
    "ROTTEN",
    "TOO_FULL",
    "NO_TOOL",
}
enums['hint_rating'] = {
    "HINT_CANT",
    "HINT_IFFY",
    "HINT_GOOD",
}
enums['side'] = {
    "BOTH",
    "LEFT",
    "RIGHT",
}
enums['lit_level'] = {
    "LL_DARK",
    "LL_LOW",
    "LL_BRIGHT_ONLY",
    "LL_LIT",
    "LL_BRIGHT",
    "LL_BLANK",
}
enums['ter_bitflags'] = {
    "TFLAG_TRANSPARENT",
    "TFLAG_FLAMMABLE",
    "TFLAG_REDUCE_SCENT",
    "TFLAG_SWIMMABLE",
    "TFLAG_SUPPORTS_ROOF",
    "TFLAG_MINEABLE",
    "TFLAG_NOITEM",
    "TFLAG_SEALED",
    "TFLAG_ALLOW_FIELD_EFFECT",
    "TFLAG_LIQUID",
    "TFLAG_COLLAPSES",
    "TFLAG_FLAMMABLE_ASH",
    "TFLAG_DESTROY_ITEM",
    "TFLAG_INDOORS",
    "TFLAG_LIQUIDCONT",
    "TFLAG_FIRE_CONTAINER",
    "TFLAG_FLAMMABLE_HARD",
    "TFLAG_SUPPRESS_SMOKE",
    "TFLAG_SHARP",
    "TFLAG_DIGGABLE",
    "TFLAG_ROUGH",
    "TFLAG_UNSTABLE",
    "TFLAG_WALL",
    "TFLAG_DEEP_WATER",
    "TFLAG_HARVESTED",
    "TFLAG_PERMEABLE",
    "TFLAG_AUTO_WALL_SYMBOL",
    "TFLAG_CONNECT_TO_WALL",
    "TFLAG_CLIMBABLE",
    "TFLAG_GOES_DOWN",
    "TFLAG_GOES_UP",
    "TFLAG_NO_FLOOR",
    "TFLAG_SEEN_FROM_ABOVE",
    "TFLAG_RAMP",
    "NUM_TERFLAGS",
}
enums['direction'] = {
    "ABOVENORTHWEST",
    "NORTHWEST",
    "BELOWNORTHWEST",
    "ABOVENORTH",
    "NORTH",
    "BELOWNORTH",
    "ABOVENORTHEAST",
    "NORTHEAST",
    "BELOWNORTHEAST",
    "ABOVEWEST",
    "WEST",
    "BELOWWEST",
    "ABOVECENTER",
    "CENTER",
    "BELOWCENTER",
    "ABOVEEAST",
    "EAST",
    "BELOWEAST",
    "ABOVESOUTHWEST",
    "SOUTHWEST",
    "BELOWSOUTHWEST",
    "ABOVESOUTH",
    "SOUTH",
    "BELOWSOUTH",
    "ABOVESOUTHEAST",
    "SOUTHEAST",
    "BELOWSOUTHEAST",
}
enums['monster_attitude'] = {
    "MATT_NULL",
    "MATT_FRIEND",
    "MATT_FPASSIVE",
    "MATT_FLEE",
    "MATT_IGNORE",
    "MATT_FOLLOW",
    "MATT_ATTACK",
    "MATT_ZLAVE",
    "NUM_MONSTER_ATTITUDES",
}
enums['vpart_bitflags'] = {
    "VPFLAG_ARMOR",
    "VPFLAG_EVENTURN",
    "VPFLAG_ODDTURN",
    "VPFLAG_CONE_LIGHT",
    "VPFLAG_CIRCLE_LIGHT",
    "VPFLAG_BOARDABLE",
    "VPFLAG_AISLE",
    "VPFLAG_CONTROLS",
    "VPFLAG_OBSTACLE",
    "VPFLAG_OPAQUE",
    "VPFLAG_OPENABLE",
    "VPFLAG_SEATBELT",
    "VPFLAG_WHEEL",
    "VPFLAG_MOUNTABLE",
    "VPFLAG_FLOATS",
    "VPFLAG_DOME_LIGHT",
    "VPFLAG_AISLE_LIGHT",
    "VPFLAG_ATOMIC_LIGHT",
    "VPFLAG_ALTERNATOR",
    "VPFLAG_ENGINE",
    "VPFLAG_FRIDGE",
    "VPFLAG_LIGHT",
    "VPFLAG_WINDOW",
    "VPFLAG_CURTAIN",
    "VPFLAG_CARGO",
    "VPFLAG_INTERNAL",
    "VPFLAG_SOLAR_PANEL",
    "VPFLAG_RECHARGE",
    "VPFLAG_EXTENDS_VISION",
    "VPFLAG_ENABLED_DRAINS_EPOWER",
    "NUM_VPFLAGS",
}
enums['npc_attitude'] = {
    "NPCATT_NULL",
    "NPCATT_TALK",
    "NPCATT_LEGACY_1",
    "NPCATT_FOLLOW",
    "NPCATT_LEGACY_2",
    "NPCATT_LEAD",
    "NPCATT_WAIT",
    "NPCATT_LEGACY_6",
    "NPCATT_MUG",
    "NPCATT_WAIT_FOR_LEAVE",
    "NPCATT_KILL",
    "NPCATT_FLEE",
    "NPCATT_LEGACY_3",
    "NPCATT_HEAL",
    "NPCATT_LEGACY_4",
    "NPCATT_LEGACY_5",
    "NPCATT_MAX",
}
enums['npc_mission'] = {
    "NPC_MISSION_NULL",
    "NPC_MISSION_LEGACY_1",
    "NPC_MISSION_SHELTER",
    "NPC_MISSION_SHOPKEEP",
    "NPC_MISSION_LEGACY_2",
    "NPC_MISSION_LEGACY_3",
    "NPC_MISSION_BASE",
    "NPC_MISSION_GUARD",
    "NUM_NPC_MISSIONS",
}
enums['available_status'] = {
    "a_true",
    "a_false",
    "a_insufficent",
}
enums['rule_state'] = {
    "RULE_NONE",
    "RULE_WHITELISTED",
    "RULE_BLACKLISTED",
}
enums['visibility_type'] = {
    "VIS_HIDDEN",
    "VIS_CLEAR",
    "VIS_LIT",
    "VIS_BOOMER",
    "VIS_DARK",
    "VIS_BOOMER_DARK",
}
enums['artifact_natural_property'] = {
    "ARTPROP_NULL",
    "ARTPROP_WRIGGLING",
    "ARTPROP_GLOWING",
    "ARTPROP_HUMMING",
    "ARTPROP_MOVING",
    "ARTPROP_WHISPERING",
    "ARTPROP_BREATHING",
    "ARTPROP_DEAD",
    "ARTPROP_ITCHY",
    "ARTPROP_GLITTERING",
    "ARTPROP_ELECTRIC",
    "ARTPROP_SLIMY",
    "ARTPROP_ENGRAVED",
    "ARTPROP_CRACKLING",
    "ARTPROP_WARM",
    "ARTPROP_RATTLING",
    "ARTPROP_SCALED",
    "ARTPROP_FRACTAL",
    "ARTPROP_MAX",
}
enums['object_type'] = {
    "OBJECT_NONE",
    "OBJECT_ITEM",
    "OBJECT_ACTOR",
    "OBJECT_PLAYER",
    "OBJECT_NPC",
    "OBJECT_MONSTER",
    "OBJECT_VEHICLE",
    "OBJECT_TRAP",
    "OBJECT_FIELD",
    "OBJECT_TERRAIN",
    "OBJECT_FURNITURE",
    "NUM_OBJECTS",
}
enums['VisitResponse'] = {
    "ABORT",
    "NEXT",
    "SKIP",
}
enums['character_type'] = {
    "PLTYPE_CUSTOM",
    "PLTYPE_RANDOM",
    "PLTYPE_TEMPLATE",
    "PLTYPE_NOW",
}
enums['color_id'] = {
    "def_c_black",
    "def_c_white",
    "def_c_ltgray",
    "def_c_dkgray",
    "def_c_red",
    "def_c_green",
    "def_c_blue",
    "def_c_cyan",
    "def_c_magenta",
    "def_c_brown",
    "def_c_ltred",
    "def_c_ltgreen",
    "def_c_ltblue",
    "def_c_ltcyan",
    "def_c_pink",
    "def_c_yellow",
    "def_h_black",
    "def_h_white",
    "def_h_ltgray",
    "def_h_dkgray",
    "def_h_red",
    "def_h_green",
    "def_h_blue",
    "def_h_cyan",
    "def_h_magenta",
    "def_h_brown",
    "def_h_ltred",
    "def_h_ltgreen",
    "def_h_ltblue",
    "def_h_ltcyan",
    "def_h_pink",
    "def_h_yellow",
    "def_i_black",
    "def_i_white",
    "def_i_ltgray",
    "def_i_dkgray",
    "def_i_red",
    "def_i_green",
    "def_i_blue",
    "def_i_cyan",
    "def_i_magenta",
    "def_i_brown",
    "def_i_ltred",
    "def_i_ltgreen",
    "def_i_ltblue",
    "def_i_ltcyan",
    "def_i_pink",
    "def_i_yellow",
    "def_c_unset",
    "def_c_white_red",
    "def_c_ltgray_red",
    "def_c_dkgray_red",
    "def_c_red_red",
    "def_c_green_red",
    "def_c_blue_red",
    "def_c_cyan_red",
    "def_c_magenta_red",
    "def_c_brown_red",
    "def_c_ltred_red",
    "def_c_ltgreen_red",
    "def_c_ltblue_red",
    "def_c_ltcyan_red",
    "def_c_pink_red",
    "def_c_yellow_red",
    "def_c_black_white",
    "def_c_dkgray_white",
    "def_c_ltgray_white",
    "def_c_white_white",
    "def_c_red_white",
    "def_c_ltred_white",
    "def_c_green_white",
    "def_c_ltgreen_white",
    "def_c_brown_white",
    "def_c_yellow_white",
    "def_c_blue_white",
    "def_c_ltblue_white",
    "def_c_magenta_white",
    "def_c_pink_white",
    "def_c_cyan_white",
    "def_c_ltcyan_white",
    "def_c_black_green",
    "def_c_dkgray_green",
    "def_c_ltgray_green",
    "def_c_white_green",
    "def_c_red_green",
    "def_c_ltred_green",
    "def_c_green_green",
    "def_c_ltgreen_green",
    "def_c_brown_green",
    "def_c_yellow_green",
    "def_c_blue_green",
    "def_c_ltblue_green",
    "def_c_magenta_green",
    "def_c_pink_green",
    "def_c_cyan_green",
    "def_c_ltcyan_green",
    "def_c_black_yellow",
    "def_c_dkgray_yellow",
    "def_c_ltgray_yellow",
    "def_c_white_yellow",
    "def_c_red_yellow",
    "def_c_ltred_yellow",
    "def_c_green_yellow",
    "def_c_ltgreen_yellow",
    "def_c_brown_yellow",
    "def_c_yellow_yellow",
    "def_c_blue_yellow",
    "def_c_ltblue_yellow",
    "def_c_magenta_yellow",
    "def_c_pink_yellow",
    "def_c_cyan_yellow",
    "def_c_ltcyan_yellow",
    "def_c_black_magenta",
    "def_c_dkgray_magenta",
    "def_c_ltgray_magenta",
    "def_c_white_magenta",
    "def_c_red_magenta",
    "def_c_ltred_magenta",
    "def_c_green_magenta",
    "def_c_ltgreen_magenta",
    "def_c_brown_magenta",
    "def_c_yellow_magenta",
    "def_c_blue_magenta",
    "def_c_ltblue_magenta",
    "def_c_magenta_magenta",
    "def_c_pink_magenta",
    "def_c_cyan_magenta",
    "def_c_ltcyan_magenta",
    "def_c_black_cyan",
    "def_c_dkgray_cyan",
    "def_c_ltgray_cyan",
    "def_c_white_cyan",
    "def_c_red_cyan",
    "def_c_ltred_cyan",
    "def_c_green_cyan",
    "def_c_ltgreen_cyan",
    "def_c_brown_cyan",
    "def_c_yellow_cyan",
    "def_c_blue_cyan",
    "def_c_ltblue_cyan",
    "def_c_magenta_cyan",
    "def_c_pink_cyan",
    "def_c_cyan_cyan",
    "def_c_ltcyan_cyan",
    "num_colors",
}
enums['col_attribute'] = {
    "WA_NULL",
    "HI",
    "INV",
}
enums['hl_enum'] = {
    "HL_BLUE",
    "HL_RED",
    "HL_WHITE",
    "HL_GREEN",
    "HL_YELLOW",
    "HL_MAGENTA",
    "HL_CYAN",
    "NUM_HL",
}
enums['item_filter_type'] = {
    "FIRST",
    "FILTER",
    "LOW_PRIORITY",
    "HIGH_PRIORITY",
}
enums['DebugLevel'] = {
    "D_INFO",
    "D_WARNING",
    "D_ERROR",
    "D_PEDANTIC_INFO",
    "DL_ALL",
}
enums['DebugClass'] = {
    "D_MAIN",
    "D_MAP",
    "D_MAP_GEN",
    "D_GAME",
    "D_NPC",
    "D_SDL",
    "DC_ALL",
}
enums['units_type'] = {
    "VU_VEHICLE",
    "VU_WIND",
}
enums['layer_level'] = {
    "UNDERWEAR",
    "REGULAR_LAYER",
    "WAIST_LAYER",
    "OUTER_LAYER",
    "BELTED_LAYER",
    "MAX_CLOTHING_LAYER",
}
enums['pf_special'] = {
    "PF_NORMAL",
    "PF_SLOW",
    "PF_WALL",
    "PF_VEHICLE",
    "PF_FIELD",
    "PF_TRAP",
    "PF_UPDOWN",
}
enums['vision_modes'] = {
    "DEBUG_NIGHTVISION",
    "NV_GOGGLES",
    "NIGHTVISION_1",
    "NIGHTVISION_2",
    "NIGHTVISION_3",
    "FULL_ELFA_VISION",
    "ELFA_VISION",
    "CEPH_VISION",
    "FELINE_VISION",
    "BIRD_EYE",
    "URSINE_VISION",
    "BOOMERED",
    "DARKNESS",
    "IR_VISION",
    "VISION_CLAIRVOYANCE",
    "VISION_CLAIRVOYANCE_SUPER",
    "NUM_VISION_MODES",
}
enums['fatigue_levels'] = {
    "TIRED",
    "DEAD_TIRED",
    "EXHAUSTED",
    "MASSIVE_FATIGUE",
}
enums['based_on_type'] = {
    "TIME",
    "SPEED",
    "NEITHER",
}
enums['usage'] = {
    "use_from_map",
    "use_from_player",
    "use_from_both",
    "use_from_none",
    "cancel",
}
enums['target_mode'] = {
    "TARGET_MODE_FIRE",
    "TARGET_MODE_THROW",
    "TARGET_MODE_TURRET",
    "TARGET_MODE_TURRET_MANUAL",
    "TARGET_MODE_REACH",
}
enums['dump_mode'] = {
    "TSV",
    "HTML",
}
enums['tut_type'] = {
    "TUT_NULL",
    "TUT_BASIC",
    "TUT_COMBAT",
    "TUT_MAX",
}
enums['input_ret'] = {
    "IR_GOOD",
    "IR_BAD",
    "IR_TIMEOUT",
}
enums['quit_status'] = {
    "QUIT_NO",
    "QUIT_SUICIDE",
    "QUIT_SAVED",
    "QUIT_NOSAVED",
    "QUIT_DIED",
    "QUIT_WATCH",
    "QUIT_ERROR",
}
enums['scaling_stat'] = {
    "STAT_NULL",
    "STAT_STR",
    "STAT_DEX",
    "STAT_INT",
    "STAT_PER",
    "NUM_STATS",
}
enums['affected_stat'] = {
    "AFFECTED_NULL",
    "AFFECTED_HIT",
    "AFFECTED_DODGE",
    "AFFECTED_BLOCK",
    "AFFECTED_SPEED",
    "AFFECTED_MOVE_COST",
    "AFFECTED_DAMAGE",
    "AFFECTED_ARMOR",
    "AFFECTED_ARMOR_PENETRATION",
    "AFFECTED_TARGET_ARMOR_MULTIPLIER",
    "NUM_AFFECTED",
}
enums['om_direction::type'] = {
    "invalid",
    "none",
    "north",
    "east",
    "south",
    "west",
}
enums['oter_flags'] = {
    "allow_override",
    "known_down",
    "known_up",
    "no_rotate",
    "river_tile",
    "has_sidewalk",
    "line_drawing",
    "num_oter_flags",
}
enums['hack_result'] = {
    "HACK_UNABLE",
    "HACK_FAIL",
    "HACK_NOTHING",
    "HACK_SUCCESS",
}
enums['ter_connects'] = {
    "TERCONN_NONE",
    "TERCONN_WALL",
    "TERCONN_CHAINFENCE",
    "TERCONN_WOODFENCE",
    "TERCONN_RAILING",
    "TERCONN_WATER",
}
enums['monster_effect_cache_fields'] = {
    "MOVEMENT_IMPAIRED",
    "FLEEING",
    "NUM_MEFF",
}
enums['radio_type'] = {
    "MESSAGE_BROADCAST",
    "WEATHER_RADIO",
}
enums['veh_coll_type'] = {
    "veh_coll_nothing",
    "veh_coll_body",
    "veh_coll_veh",
    "veh_coll_bashable",
    "veh_coll_other",
    "num_veh_coll_types",
}
enums['faction_goal'] = {
    "FACGOAL_NULL",
    "FACGOAL_NONE",
    "FACGOAL_WEALTH",
    "FACGOAL_DOMINANCE",
    "FACGOAL_CLEANSE",
    "FACGOAL_SHADOW",
    "FACGOAL_APOCALYPSE",
    "FACGOAL_ANARCHY",
    "FACGOAL_KNOWLEDGE",
    "FACGOAL_NATURE",
    "FACGOAL_CIVILIZATION",
    "FACGOAL_FUNGUS",
    "NUM_FACGOALS",
}
enums['faction_job'] = {
    "FACJOB_NULL",
    "FACJOB_EXTORTION",
    "FACJOB_INFORMATION",
    "FACJOB_TRADE",
    "FACJOB_CARAVANS",
    "FACJOB_SCAVENGE",
    "FACJOB_MERCENARIES",
    "FACJOB_ASSASSINS",
    "FACJOB_RAIDERS",
    "FACJOB_THIEVES",
    "FACJOB_GAMBLING",
    "FACJOB_DOCTORS",
    "FACJOB_FARMERS",
    "FACJOB_DRUGS",
    "FACJOB_MANUFACTURE",
    "NUM_FACJOBS",
}
enums['faction_value'] = {
    "FACVAL_NULL",
    "FACVAL_CHARITABLE",
    "FACVAL_LONERS",
    "FACVAL_EXPLORATION",
    "FACVAL_ARTIFACTS",
    "FACVAL_BIONICS",
    "FACVAL_BOOKS",
    "FACVAL_TRAINING",
    "FACVAL_ROBOTS",
    "FACVAL_TREACHERY",
    "FACVAL_STRAIGHTEDGE",
    "FACVAL_LAWFUL",
    "FACVAL_CRUELTY",
    "NUM_FACVALS",
}
enums['npc_need'] = {
    "need_none",
    "need_ammo",
    "need_weapon",
    "need_gun",
    "need_food",
    "need_drink",
    "num_needs",
}
enums['npc_personality_type'] = {
    "NPE_AGGRESSION",
    "NPE_BRAVERY",
    "NPE_COLLECTOR",
    "NPE_ALTRUISM",
    "NUM_NPE",
}
enums['combat_engagement'] = {
    "ENGAGE_NONE",
    "ENGAGE_CLOSE",
    "ENGAGE_WEAK",
    "ENGAGE_HIT",
    "ENGAGE_ALL",
    "ENGAGE_NO_MOVE",
}
enums['aim_rule'] = {
    "AIM_WHEN_CONVENIENT",
    "AIM_SPRAY",
    "AIM_PRECISE",
    "AIM_STRICTLY_PRECISE",
}
enums['talk_topic_enum'] = {
    "TALK_NONE",
    "TALK_DONE",
    "TALK_GUARD",
    "TALK_MISSION_LIST",
    "TALK_MISSION_LIST_ASSIGNED",
    "TALK_MISSION_START",
    "TALK_MISSION_DESCRIBE",
    "TALK_MISSION_OFFER",
    "TALK_MISSION_ACCEPTED",
    "TALK_MISSION_REJECTED",
    "TALK_MISSION_ADVICE",
    "TALK_MISSION_INQUIRE",
    "TALK_MISSION_SUCCESS",
    "TALK_MISSION_SUCCESS_LIE",
    "TALK_MISSION_FAILURE",
    "TALK_MISSION_END",
    "TALK_MISSION_REWARD",
    "TALK_EVAC_MERCHANT",
    "TALK_EVAC_MERCHANT_NEW",
    "TALK_EVAC_MERCHANT_PLANS",
    "TALK_EVAC_MERCHANT_PLANS2",
    "TALK_EVAC_MERCHANT_PLANS3",
    "TALK_EVAC_MERCHANT_WORLD",
    "TALK_EVAC_MERCHANT_HORDES",
    "TALK_EVAC_MERCHANT_PRIME_LOOT",
    "TALK_EVAC_MERCHANT_ASK_JOIN",
    "TALK_EVAC_MERCHANT_NO",
    "TALK_EVAC_MERCHANT_HELL_NO",
    "TALK_FREE_MERCHANT_STOCKS",
    "TALK_FREE_MERCHANT_STOCKS_NEW",
    "TALK_FREE_MERCHANT_STOCKS_WHY",
    "TALK_FREE_MERCHANT_STOCKS_ALL",
    "TALK_FREE_MERCHANT_STOCKS_JERKY",
    "TALK_FREE_MERCHANT_STOCKS_CORNMEAL",
    "TALK_FREE_MERCHANT_STOCKS_FLOUR",
    "TALK_FREE_MERCHANT_STOCKS_SUGAR",
    "TALK_FREE_MERCHANT_STOCKS_WINE",
    "TALK_FREE_MERCHANT_STOCKS_BEER",
    "TALK_FREE_MERCHANT_STOCKS_SMMEAT",
    "TALK_FREE_MERCHANT_STOCKS_SMFISH",
    "TALK_FREE_MERCHANT_STOCKS_OIL",
    "TALK_FREE_MERCHANT_STOCKS_DELIVERED",
    "TALK_EVAC_GUARD1",
    "TALK_EVAC_GUARD1_PLACE",
    "TALK_EVAC_GUARD1_GOVERNMENT",
    "TALK_EVAC_GUARD1_TRADE",
    "TALK_EVAC_GUARD1_JOIN",
    "TALK_EVAC_GUARD1_JOIN2",
    "TALK_EVAC_GUARD1_JOIN3",
    "TALK_EVAC_GUARD1_ATTITUDE",
    "TALK_EVAC_GUARD1_JOB",
    "TALK_EVAC_GUARD1_OLDGUARD",
    "TALK_EVAC_GUARD1_BYE",
    "TALK_EVAC_GUARD2",
    "TALK_EVAC_GUARD2_NEW",
    "TALK_EVAC_GUARD2_RULES",
    "TALK_EVAC_GUARD2_RULES_BASEMENT",
    "TALK_EVAC_GUARD2_WHO",
    "TALK_EVAC_GUARD2_TRADE",
    "TALK_EVAC_GUARD3",
    "TALK_EVAC_GUARD3_NEW",
    "TALK_EVAC_GUARD3_RULES",
    "TALK_EVAC_GUARD3_HIDE1",
    "TALK_EVAC_GUARD3_HIDE2",
    "TALK_EVAC_GUARD3_WASTE",
    "TALK_EVAC_GUARD3_DEAD",
    "TALK_EVAC_GUARD3_HOSTILE",
    "TALK_EVAC_GUARD3_INSULT",
    "TALK_EVAC_HUNTER",
    "TALK_EVAC_HUNTER_SMELL",
    "TALK_EVAC_HUNTER_DO",
    "TALK_EVAC_HUNTER_LIFE",
    "TALK_EVAC_HUNTER_HUNT",
    "TALK_EVAC_HUNTER_SALE",
    "TALK_EVAC_HUNTER_ADVICE",
    "TALK_EVAC_HUNTER_BYE",
    "TALK_OLD_GUARD_REP",
    "TALK_OLD_GUARD_REP_NEW",
    "TALK_OLD_GUARD_REP_NEW_DOING",
    "TALK_OLD_GUARD_REP_NEW_DOWNSIDE",
    "TALK_OLD_GUARD_REP_WORLD",
    "TALK_OLD_GUARD_REP_WORLD_2NDFLEET",
    "TALK_OLD_GUARD_REP_WORLD_FOOTHOLDS",
    "TALK_OLD_GUARD_REP_ASK_JOIN",
    "TALK_ARSONIST",
    "TALK_ARSONIST_NEW",
    "TALK_ARSONIST_DOING",
    "TALK_ARSONIST_DOING_REBAR",
    "TALK_ARSONIST_WORLD",
    "TALK_ARSONIST_WORLD_OPTIMISTIC",
    "TALK_ARSONIST_JOIN",
    "TALK_ARSONIST_MUTATION",
    "TALK_ARSONIST_MUTATION_INSULT",
    "TALK_SCAVENGER_MERC",
    "TALK_SCAVENGER_MERC_NEW",
    "TALK_SCAVENGER_MERC_TIPS",
    "TALK_SCAVENGER_MERC_HIRE",
    "TALK_SCAVENGER_MERC_HIRE_SUCCESS",
    "TALK_SHELTER",
    "TALK_SHELTER_PLANS",
    "TALK_SHARE_EQUIPMENT",
    "TALK_GIVE_EQUIPMENT",
    "TALK_DENY_EQUIPMENT",
    "TALK_TRAIN",
    "TALK_TRAIN_START",
    "TALK_TRAIN_FORCE",
    "TALK_SUGGEST_FOLLOW",
    "TALK_AGREE_FOLLOW",
    "TALK_DENY_FOLLOW",
    "TALK_SHOPKEEP",
    "TALK_LEADER",
    "TALK_LEAVE",
    "TALK_PLAYER_LEADS",
    "TALK_LEADER_STAYS",
    "TALK_HOW_MUCH_FURTHER",
    "TALK_FRIEND",
    "TALK_FRIEND_GUARD",
    "TALK_DENY_GUARD",
    "TALK_DENY_TRAIN",
    "TALK_DENY_PERSONAL",
    "TALK_FRIEND_UNCOMFORTABLE",
    "TALK_COMBAT_COMMANDS",
    "TALK_COMBAT_ENGAGEMENT",
    "TALK_STRANGER_NEUTRAL",
    "TALK_STRANGER_WARY",
    "TALK_STRANGER_SCARED",
    "TALK_STRANGER_FRIENDLY",
    "TALK_STRANGER_AGGRESSIVE",
    "TALK_MUG",
    "TALK_DESCRIBE_MISSION",
    "TALK_WEAPON_DROPPED",
    "TALK_DEMAND_LEAVE",
    "TALK_SIZE_UP",
    "TALK_LOOK_AT",
    "TALK_OPINION",
    "NUM_TALK_TOPICS",
}

make_list_class("item")
make_map_class("requirement_id", "requirement_data")
make_map_class("std::string", "m_size")
make_map_class("std::string", "std::string")
make_set_class("fault_id")
make_set_class("m_flag")
make_set_class("matec_id")
make_set_class("material_id")
make_set_class("monster_trigger")
make_set_class("species_id")
make_set_class("std::string")
make_set_class("tripoint")
make_vector_class("art_effect_passive")
make_vector_class("body_part")
make_vector_class("damage_unit")
make_vector_class("efftype_id")
make_vector_class("item")
make_vector_class("item_comp")
make_vector_class("mabuff_id")
make_vector_class("matec_id")
make_vector_class("material_id")
make_vector_class("matype_id")
make_vector_class("npc_need")
make_vector_class("point")
make_vector_class("skill_id")
make_vector_class("std::string")
make_vector_class("tool_comp")
make_vector_class("tripoint")
make_vector_class("vehicle_part")
