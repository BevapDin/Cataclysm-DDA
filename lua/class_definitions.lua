--[[
Defines which attributes are exported by our C++ classes. The required C functions (used as
callbacks from Lua) are automatically generated by src/lua/generate_bindings.lua

The classes table contains all classes that will be accessible in Lua. The key is the name
of the class in C++. Keep in mind that it has to be a valid Lua identifiers, you can add a
typedef in catalua.cpp, e.g. `using cppstring = std::string;`, than add a class with the name
`cppstring` here. It maps to a table with the following values:

Each class requires at least the attributes and the functions table (they can be empty).
Optional values are:
- by_value (boolean, default: false): if true, copy the C++ object into memory managed by Lua
  (the copy may outlive the source C++ object), otherwise only a pointer to the C++ object
  is stored in Lua and it *needs* to stay valid in C++ until the Lua object is gone.
- by_value_and_reference (boolean, default: false): if true, the class is can be exported to Lua
  as value (copy of the object, managed by Lua) *and* as reference (to an object managed by C++
  code). This flag implies "by_value", "by_value" should therefor not be specified explicitly.
- has_equal (boolean, default: false): If true, generate the __eq entry in the metatable which
  will map to the C++ using the operator==.
- new (an array of parameter lists): defines the constructor of the object. This is only useful for
  by_value objects, it allows to create an instance of it in Lua. The entry should be an array,
  each element of it represents one overload of the constructor. Each element should be a list of
  parameters to those overloads (same as the list of arguments to member functions).
- int_id (optional, a string): if the class has an associated int_id (e.g. ter_t has int_id<ter_t>,
  which is typedefed to ter_id), this can be used to define that int_id (for ter_t is should be
  "ter_id"). At the end of this file, this will be used to create an actual entry in the classes
  table for the type name given here.
  This is done because all the int_id objects have essentially the same functions.

The attributes table contains the members of the C++ class. Each key is the name of the member,
it maps to a map with the following values:
- cpp_name (defaults to the name of the member): an alternatively name for the member,
  used only in the C++ part of the wrapper.
- writable (boolean, default: false): if true, a wrapper to set the member is generated (otherwise
  only the getter is generated and the member is effectively read-only).
- type (required): the type of the member (see below).

The functions table contains the member functions of the C++ class. Each entry (no keys, it's an
array) should have the following values:
- name (required, string): the name of the function as it appears in Lua.
- cpp_name (defaults to the name of the function, string): an alternatively name for the function,
  used only in the C++ part of the wrapper.
- args (an array of strings): the types (see below) of the parameters to the function (in order).
- rval (can be nil when the function returns void): the type (see below) that the function returns.

Types can be built in types: int, float, bool, string (std::string in C++), cstring (const char* in C++)
Or any class defined in the classes table.

Regarding reference and the by_value setting:
Instances of the itype class are created by C++ (specifically by the Item_factory). They are
never created elsewhere and once created each instance will stay valid (and at the same address)
until the game has ended. Furthermore it's actually important that each item id maps to exactly
one instance of itype. Similar for mtype.
Therefor those objects are exported as pointer only (by_value is false).

Other objects (e.g. tripoint) can be constructed as values in Lua (by_value is true).

The return value of functions ("rval") behaves a bit special:
- If it ends with a '&', as in `rval = "item&"`, it is assumed the function returns a reference.
  The by_value setting will determine whether to copy the referred object (to Lua memory), or
  to store only a reference in Lua memory.
  Using '&' on native Lua types is not allowed.
- If the return type is a class type (has an entry in classes), it is copied to Lua memory. This
  will fail (when the generated bindings are compiled or when they get linked) if the type does not
  support copying. One should either add `by_value = true` or `by_value_and_reference = true` to the type.
- Otherwise it should be a native Lua type, which will be copied.

Example: (Creature::pos returns a const reference to tripoint, game::zombie returns a reference to monster)
`local m = game.zombie(0)` stores a pointer to the monster returned by `game::zombie(0)`. This reference
must not be used after the monster has been removed from the game (e.g. because it died). Calling
the function again will give the very same pointer:
`local n = game.zombie(0)`
`m.setpos(tripoint(10,0,0))` This also affects `n` because `m` and `n` are pointers to the very
same C++ object.
`local p = some_monster:pos()` stores a copy of the result of `some_monster.pos()` in `p`. This
variable can be used long after `some_monster` has been killed and removed from the game. It has
no connection at all to the monster.
--]]

classes = {
    Character = {
        headers = { "character.h", "color.h", "units.h", "player.h" },
        parent = "Creature",
        attributes = {
            -- Character::hp_cur ignored because: unhandled type std::array<int, num_hp_parts>[CXType_Elaborated] as member (std::array<int, 6>[CXType_Record]),
            -- Character::hp_max ignored because: unhandled type std::array<int, num_hp_parts>[CXType_Elaborated] as member (std::array<int, 6>[CXType_Record]),
            -- Character::inv ignored because: unhandled type inventory[CXType_Record] as member (inventory[CXType_Record]),
            -- Character::my_bionics ignored because: unhandled type pimpl<bionic_collection>[CXType_Unexposed] as member (pimpl<bionic_collection>[CXType_Record]),
            dex_cur = { type = "int", writable = true },
            dex_max = { type = "int", writable = true },
            int_cur = { type = "int", writable = true },
            int_max = { type = "int", writable = true },
            last_item = { type = "string", writable = true },
            male = { type = "bool", writable = true },
            name = { type = "string", writable = true },
            nv_cached = { type = "bool", writable = true },
            per_cur = { type = "int", writable = true },
            per_max = { type = "int", writable = true },
            str_cur = { type = "int", writable = true },
            str_max = { type = "int", writable = true },
            weapon = { type = "item", writable = true },
        },
        functions = {
            -- Character::compare_skill_requirements ignored because: unhandled type const std::map<skill_id, int> &[CXType_LValueReference] as argument (const std::map<string_id<Skill>, int, std::less<string_id<Skill> >, std::allocator<std::pair<const string_id<Skill>, int> > > &[CXType_LValueReference]),
            -- Character::extraEncumbrance ignored because: unhandled type const layer_level[CXType_Enum] as argument (const layer_level[CXType_Enum]),
            -- Character::has_active_bionic ignored because: unhandled type const bionic_id &[CXType_LValueReference] as argument (const string_id<bionic_data> &[CXType_LValueReference]),
            -- Character::has_artifact_with ignored because: unhandled type const art_effect_passive[CXType_Enum] as argument (const art_effect_passive[CXType_Enum]),
            -- Character::has_bionic ignored because: unhandled type const bionic_id &[CXType_LValueReference] as argument (const string_id<bionic_data> &[CXType_LValueReference]),
            -- Character::meets_skill_requirements ignored because: unhandled type const std::map<skill_id, int> &[CXType_LValueReference] as argument (const std::map<string_id<Skill>, int, std::less<string_id<Skill> >, std::allocator<std::pair<const string_id<Skill>, int> > > &[CXType_LValueReference]),
            -- Character::mutation_armor ignored because: unhandled type const damage_unit &[CXType_LValueReference] as argument (const damage_unit &[CXType_LValueReference]),
            -- Character::nearby ignored because: unhandled type const std::function<bool (const item *, const item *)> &[CXType_LValueReference] as argument (const std::function<bool (const item *, const item *)> &[CXType_LValueReference]),
            -- Character::remove_worn_items_with ignored because: unhandled type std::function<bool (item &)>[CXType_Elaborated] as argument (std::function<bool (item &)>[CXType_Record]),
            { name = "add_traits", rval = nil, args = { } },
            { name = "aim_cap_from_volume", rval = "float", args = { "item" } },
            { name = "aim_per_move", rval = "float", args = { "item", "float" } },
            { name = "aim_speed_dex_modifier", rval = "float", args = { } },
            { name = "aim_speed_encumbrance_modifier", rval = "float", args = { } },
            { name = "aim_speed_skill_modifier", rval = "float", args = { "skill_id" } },
            { name = "allocated_invlets", rval = nil, args = { } },
            { name = "ammo_count_for", rval = "int", args = { "item" } },
            { name = "body_window", rval = "hp_part", args = { "bool" } },
            { name = "body_window", rval = "hp_part", args = { "string", "bool", "bool", "int", "int", "int", "bool", "bool", "bool" } },
            { name = "bp_to_hp", static = true, rval = "hp_part", args = { "body_part" } },
            { name = "can_pickVolume", rval = "bool", args = { "item", "bool" } },
            { name = "can_pickWeight", rval = "bool", args = { "item", "bool" } },
            { name = "can_use", rval = "bool", args = { "item", "item" } },
            { name = "drop_inventory_overflow", rval = nil, args = { } },
            { name = "effective_dispersion", rval = "int", args = { "int" } },
            { name = "empty_skills", rval = nil, args = { } },
            { name = "empty_traits", rval = nil, args = { } },
            { name = "encumb", rval = "int", args = { "body_part" } },
            { name = "enumerate_unmet_requirements", rval = "string", args = { "item", "item" } },
            { name = "exclusive_flag_coverage", rval = nil, args = { "string" } },
            { name = "find_ammo", rval = nil, args = { "item", "bool", "int" } },
            { name = "get_aim_types", rval = nil, args = { "item" } },
            { name = "get_ammo", rval = nil, args = { "ammotype" } },
            { name = "get_dex", rval = "int", args = { } },
            { name = "get_dex_base", rval = "int", args = { } },
            { name = "get_dex_bonus", rval = "int", args = { } },
            { name = "get_encumbrance", rval = nil, args = { "item" } },
            { name = "get_encumbrance", rval = nil, args = { } },
            { name = "get_fastest_sight", rval = nil, args = { "item", "float" } },
            { name = "get_fatigue", rval = "int", args = { } },
            { name = "get_healthy", rval = "int", args = { } },
            { name = "get_healthy_mod", rval = "int", args = { } },
            { name = "get_hunger", rval = "int", args = { } },
            { name = "get_int", rval = "int", args = { } },
            { name = "get_int_base", rval = "int", args = { } },
            { name = "get_int_bonus", rval = "int", args = { } },
            { name = "get_item_position", rval = "int", args = { "item" } },
            { name = "get_most_accurate_sight", rval = "int", args = { "item" } },
            { name = "get_per", rval = "int", args = { } },
            { name = "get_per_base", rval = "int", args = { } },
            { name = "get_per_bonus", rval = "int", args = { } },
            { name = "get_skill_level", rval = "int", args = { "skill_id" } },
            { name = "get_skill_level", rval = "int", args = { "skill_id", "item" } },
            { name = "get_skill_level_object", rval = nil, args = { "skill_id" } },
            { name = "get_stomach_food", rval = "int", args = { } },
            { name = "get_stomach_water", rval = "int", args = { } },
            { name = "get_str", rval = "int", args = { } },
            { name = "get_str_base", rval = "int", args = { } },
            { name = "get_str_bonus", rval = "int", args = { } },
            { name = "get_thirst", rval = "int", args = { } },
            { name = "get_time_died", rval = "time_point", args = { } },
            { name = "get_vision_modes", rval = nil, args = { } },
            { name = "get_vision_threshold", rval = "float", args = { "float" } },
            { name = "has_active_item", rval = "bool", args = { "string" } },
            { name = "has_active_mutation", rval = "bool", args = { "trait_id" } },
            { name = "has_base_trait", rval = "bool", args = { "trait_id" } },
            { name = "has_bionic_flag", rval = "bool", args = { "string" } },
            { name = "has_nv", rval = "bool", args = { } },
            { name = "has_trait_flag", rval = "bool", args = { "string" } },
            { name = "healing_rate", rval = "float", args = { "float" } },
            { name = "hp_to_bp", static = true, rval = "body_part", args = { "hp_part" } },
            { name = "i_add", rval = "item&", args = { "item" } },
            { name = "i_add_or_drop", rval = "bool", args = { "item", "int" } },
            { name = "i_add_to_container", rval = "int", args = { "item", "bool" } },
            { name = "i_at", rval = "item", args = { "int" } },
            { name = "i_at", rval = "item&", args = { "int" } },
            { name = "i_rem", rval = "item", args = { "int" } },
            { name = "i_rem", rval = "item", args = { "item" } },
            { name = "i_rem_keep_contents", rval = nil, args = { "int" } },
            { name = "is_armed", rval = "bool", args = { } },
            { name = "is_blind", rval = "bool", args = { } },
            { name = "is_wearing", rval = "bool", args = { "string" } },
            { name = "is_wearing_active_power_armor", rval = "bool", args = { } },
            { name = "is_wearing_on_bp", rval = "bool", args = { "string", "body_part" } },
            { name = "is_worn", rval = "bool", args = { "item" } },
            { name = "limb_color", rval = "nc_color", args = { "body_part", "bool", "bool", "bool" } },
            { name = "meets_requirements", rval = "bool", args = { "item", "item" } },
            { name = "meets_stat_requirements", rval = "bool", args = { "item" } },
            { name = "mod_dex_bonus", rval = nil, args = { "int" } },
            { name = "mod_fatigue", rval = nil, args = { "int" } },
            { name = "mod_healthy", rval = nil, args = { "int" } },
            { name = "mod_healthy_mod", rval = nil, args = { "int", "int" } },
            { name = "mod_hunger", rval = nil, args = { "int" } },
            { name = "mod_int_bonus", rval = nil, args = { "int" } },
            { name = "mod_per_bonus", rval = nil, args = { "int" } },
            { name = "mod_skill_level", rval = nil, args = { "skill_id", "int" } },
            { name = "mod_stomach_food", rval = nil, args = { "int" } },
            { name = "mod_stomach_water", rval = nil, args = { "int" } },
            { name = "mod_str_bonus", rval = nil, args = { "int" } },
            { name = "mod_thirst", rval = nil, args = { "int" } },
            { name = "mutation_armor", rval = "float", args = { "body_part", "damage_type" } },
            { name = "mutation_armor", rval = nil, args = { "body_part" } },
            { name = "mutation_effect", rval = nil, args = { "trait_id" } },
            { name = "mutation_loss_effect", rval = nil, args = { "trait_id" } },
            { name = "mutation_value", rval = "float", args = { "string" } },
            { name = "on_item_takeoff", rval = nil, args = { "item" } },
            { name = "on_item_wear", rval = nil, args = { "item" } },
            { name = "pick_name", rval = nil, args = { "bool" } },
            { name = "pour_into", rval = "bool", args = { "item", "item" } },
            { name = "pour_into", rval = "bool", args = { "vehicle", "item" } },
            { name = "query_yn", rval = "bool", args = { "string" } },
            { name = "random_bad_trait", rval = "trait_id", args = { } },
            { name = "random_good_trait", rval = "trait_id", args = { } },
            { name = "ranged_dex_mod", rval = "int", args = { } },
            { name = "ranged_per_mod", rval = "int", args = { } },
            { name = "recalc_hp", rval = nil, args = { } },
            { name = "recalc_sight_limits", rval = nil, args = { } },
            { name = "remove_mission_items", rval = nil, args = { "int" } },
            { name = "remove_weapon", rval = "item", args = { } },
            { name = "reset_encumbrance", rval = nil, args = { } },
            { name = "rest_quality", rval = "float", args = { } },
            { name = "set_dex_bonus", rval = nil, args = { "int" } },
            { name = "set_fatigue", rval = nil, args = { "int" } },
            { name = "set_healthy", rval = nil, args = { "int" } },
            { name = "set_healthy_mod", rval = nil, args = { "int" } },
            { name = "set_hunger", rval = nil, args = { "int" } },
            { name = "set_int_bonus", rval = nil, args = { "int" } },
            { name = "set_mutation", rval = nil, args = { "trait_id" } },
            { name = "set_per_bonus", rval = nil, args = { "int" } },
            { name = "set_skill_level", rval = nil, args = { "skill_id", "int" } },
            { name = "set_stomach_food", rval = nil, args = { "int" } },
            { name = "set_stomach_water", rval = nil, args = { "int" } },
            { name = "set_str_bonus", rval = nil, args = { "int" } },
            { name = "set_thirst", rval = nil, args = { "int" } },
            { name = "set_time_died", rval = nil, args = { "time_point" } },
            { name = "throw_dispersion_per_dodge", rval = "int", args = { "bool" } },
            { name = "throw_range", rval = "int", args = { "item" } },
            { name = "throwing_dispersion", rval = "int", args = { "item", "Creature" } },
            { name = "toggle_trait", rval = nil, args = { "trait_id" } },
            { name = "trait_by_invlet", rval = "trait_id", args = { "int" } },
            { name = "unset_mutation", rval = nil, args = { "trait_id" } },
            { name = "update_health", rval = nil, args = { "int" } },
            { name = "used_weapon", rval = "item", args = { } },
            { name = "used_weapon", rval = "item&", args = { } },
            { name = "volume_capacity", rval = "units::volume", args = { } },
            { name = "volume_capacity_reduced_by", rval = "units::volume", args = { "units::volume" } },
            { name = "volume_carried", rval = "units::volume", args = { } },
            { name = "weight_carried", rval = "units::mass", args = { } },
            { name = "worn_position_to_index", static = true, rval = "int", args = { "int" } },
            { name = "worn_with_flag", rval = "bool", args = { "string", "body_part" } },
        }
    },
    Creature = {
        headers = { "creature.h", "calendar.h", "color.h", "units.h", "character.h", "monster.h", "enums.h" },
        attributes = {
            moves = { type = "int", writable = true },
            underwater = { type = "bool", writable = true },
        },
        functions = {
            -- Creature::absorb_hit ignored because: unhandled type damage_instance &[CXType_LValueReference] as argument (damage_instance &[CXType_LValueReference]),
            -- Creature::add_msg_if_npc ignored because: unhandled type game_message_type[CXType_Enum] as argument (game_message_type[CXType_Enum]),
            -- Creature::add_msg_if_player ignored because: unhandled type game_message_type[CXType_Enum] as argument (game_message_type[CXType_Enum]),
            -- Creature::add_msg_player_or_npc ignored because: unhandled type game_message_type[CXType_Enum] as argument (game_message_type[CXType_Enum]),
            -- Creature::add_msg_player_or_say ignored because: unhandled type game_message_type[CXType_Enum] as argument (game_message_type[CXType_Enum]),
            -- Creature::auto_find_hostile_target ignored because: unhandled type int &[CXType_LValueReference] as argument (int &[CXType_LValueReference]),
            -- Creature::block_hit ignored because: unhandled type damage_instance &[CXType_LValueReference] as argument (damage_instance &[CXType_LValueReference]),
            -- Creature::deal_damage ignored because: unhandled type const damage_instance &[CXType_LValueReference] as argument (const damage_instance &[CXType_LValueReference]),
            -- Creature::deal_damage_handle_type ignored because: unhandled type const damage_unit &[CXType_LValueReference] as argument (const damage_unit &[CXType_LValueReference]),
            -- Creature::deal_melee_hit ignored because: unhandled type const damage_instance &[CXType_LValueReference] as argument (const damage_instance &[CXType_LValueReference]),
            -- Creature::deal_projectile_attack ignored because: unhandled type dealt_projectile_attack &[CXType_LValueReference] as argument (dealt_projectile_attack &[CXType_LValueReference]),
            -- Creature::draw ignored because: unhandled type const catacurses::window &[CXType_LValueReference] as argument (const catacurses::window &[CXType_LValueReference]),
            -- Creature::has_flag ignored because: unhandled type const m_flag[CXType_Enum] as argument (const m_flag[CXType_Enum]),
            -- Creature::on_hit ignored because: unhandled type const dealt_projectile_attack *const[CXType_Pointer] as argument (const dealt_projectile_attack *const[CXType_Pointer]),
            -- Creature::print_info ignored because: unhandled type const catacurses::window &[CXType_LValueReference] as argument (const catacurses::window &[CXType_LValueReference]),
            -- Creature::resists_effect ignored because: unhandled type effect[CXType_Record] as argument (effect[CXType_Record]),
            -- static Creature::get_attitude_ui_data ignored because: unhandled type Creature::Attitude[CXType_Enum] as argument (Creature::Attitude[CXType_Enum]),
            { name = "add_effect", rval = nil, args = { "efftype_id", "time_duration", "body_part", "bool", "int", "bool" } },
            { name = "add_env_effect", rval = "bool", args = { "efftype_id", "body_part", "int", "time_duration", "body_part", "bool", "int", "bool" } },
            { name = "add_memorial_log", rval = nil, args = { "string", "string" } },
            { name = "add_msg_if_npc", rval = nil, args = { "string" } },
            { name = "add_msg_if_player", rval = nil, args = { "string" } },
            { name = "add_msg_player_or_npc", rval = nil, args = { "string", "string" } },
            { name = "add_msg_player_or_say", rval = nil, args = { "string", "string" } },
            { name = "apply_damage", rval = nil, args = { "Creature", "body_part", "int" } },
            { name = "attitude_to", rval = nil, args = { "Creature" } },
            { name = "avoid_trap", rval = "bool", args = { "tripoint", "trap" } },
            { name = "basic_symbol_color", rval = "nc_color", args = { } },
            { name = "bleed", rval = nil, args = { } },
            { name = "bloodType", rval = "field_id", args = { } },
            { name = "check_dead_state", rval = nil, args = { } },
            { name = "clear_effects", rval = nil, args = { } },
            { name = "deal_melee_attack", rval = "int", args = { "Creature", "int" } },
            { name = "die", rval = nil, args = { "Creature" } },
            { name = "digging", rval = "bool", args = { } },
            { name = "disp_name", rval = "string", args = { "bool" } },
            { name = "dodge_roll", rval = "float", args = { } },
            { name = "extended_description", rval = "string", args = { } },
            { name = "fall_damage_mod", rval = "float", args = { } },
            { name = "get_armor_bash", rval = "int", args = { "body_part" } },
            { name = "get_armor_bash_base", rval = "int", args = { "body_part" } },
            { name = "get_armor_bash_bonus", rval = "int", args = { } },
            { name = "get_armor_cut", rval = "int", args = { "body_part" } },
            { name = "get_armor_cut_base", rval = "int", args = { "body_part" } },
            { name = "get_armor_cut_bonus", rval = "int", args = { } },
            { name = "get_armor_type", rval = "int", args = { "damage_type", "body_part" } },
            { name = "get_bash_bonus", rval = "int", args = { } },
            { name = "get_bash_mult", rval = "float", args = { } },
            { name = "get_block_bonus", rval = "int", args = { } },
            { name = "get_cut_bonus", rval = "int", args = { } },
            { name = "get_cut_mult", rval = "float", args = { } },
            { name = "get_dodge", rval = "float", args = { } },
            { name = "get_dodge_base", rval = "float", args = { } },
            { name = "get_dodge_bonus", rval = "float", args = { } },
            { name = "get_effect", rval = "effect&", args = { "efftype_id", "body_part" } },
            { name = "get_effect_dur", rval = "time_duration", args = { "efftype_id", "body_part" } },
            { name = "get_effect_int", rval = "int", args = { "efftype_id", "body_part" } },
            { name = "get_env_resist", rval = "int", args = { "body_part" } },
            { name = "get_grab_resist", rval = "int", args = { } },
            { name = "get_hit", rval = "float", args = { } },
            { name = "get_hit_base", rval = "float", args = { } },
            { name = "get_hit_bonus", rval = "float", args = { } },
            { name = "get_hp", rval = "int", args = { "hp_part" } },
            { name = "get_hp", rval = "int", args = { } },
            { name = "get_hp_max", rval = "int", args = { "hp_part" } },
            { name = "get_hp_max", rval = "int", args = { } },
            { name = "get_killer", rval = "Creature&", args = { } },
            { name = "get_melee", rval = "float", args = { } },
            { name = "get_melee_quiet", rval = "bool", args = { } },
            { name = "get_moves", rval = "int", args = { } },
            { name = "get_name", rval = "string", args = { } },
            { name = "get_num_blocks", rval = "int", args = { } },
            { name = "get_num_blocks_bonus", rval = "int", args = { } },
            { name = "get_num_dodges", rval = "int", args = { } },
            { name = "get_num_dodges_bonus", rval = "int", args = { } },
            { name = "get_pain", rval = "int", args = { } },
            { name = "get_pathfinding_settings", rval = nil, args = { } },
            { name = "get_perceived_pain", rval = "int", args = { } },
            { name = "get_random_body_part", rval = "body_part", args = { "bool" } },
            { name = "get_size", rval = "m_size", args = { } },
            { name = "get_speed", rval = "int", args = { } },
            { name = "get_speed_base", rval = "int", args = { } },
            { name = "get_speed_bonus", rval = "int", args = { } },
            { name = "get_throw_resist", rval = "int", args = { } },
            { name = "get_value", rval = "string", args = { "string" } },
            { name = "get_weight", rval = "units::mass", args = { } },
            { name = "gibType", rval = "field_id", args = { } },
            { name = "has_effect", rval = "bool", args = { "efftype_id", "body_part" } },
            { name = "has_grab_break_tec", rval = "bool", args = { } },
            { name = "has_trait", rval = "bool", args = { "trait_id" } },
            { name = "has_weapon", rval = "bool", args = { } },
            { name = "hit_roll", rval = "float", args = { } },
            { name = "hp_percentage", rval = "int", args = { } },
            { name = "impact", rval = "int", args = { "int", "tripoint" } },
            { name = "in_sleep_state", rval = "bool", args = { } },
            { name = "is_dangerous_field", rval = "bool", args = { "field_entry" } },
            { name = "is_dangerous_fields", rval = "bool", args = { "field" } },
            { name = "is_dead_state", rval = "bool", args = { } },
            { name = "is_elec_immune", rval = "bool", args = { } },
            { name = "is_fake", rval = "bool", args = { } },
            { name = "is_hallucination", rval = "bool", args = { } },
            { name = "is_immune_damage", rval = "bool", args = { "damage_type" } },
            { name = "is_immune_effect", rval = "bool", args = { "efftype_id" } },
            { name = "is_immune_field", rval = "bool", args = { "field_id" } },
            { name = "is_monster", rval = "bool", args = { } },
            { name = "is_npc", rval = "bool", args = { } },
            { name = "is_on_ground", rval = "bool", args = { } },
            { name = "is_player", rval = "bool", args = { } },
            { name = "is_symbol_highlighted", rval = "bool", args = { } },
            { name = "is_underwater", rval = "bool", args = { } },
            { name = "is_warm", rval = "bool", args = { } },
            { name = "knock_back_from", rval = nil, args = { "tripoint" } },
            { name = "made_of", rval = "bool", args = { "material_id" } },
            { name = "mod_bash_bonus", rval = nil, args = { "int" } },
            { name = "mod_block_bonus", rval = nil, args = { "int" } },
            { name = "mod_cut_bonus", rval = nil, args = { "int" } },
            { name = "mod_dodge_bonus", rval = nil, args = { "float" } },
            { name = "mod_hit_bonus", rval = nil, args = { "float" } },
            { name = "mod_moves", rval = nil, args = { "int" } },
            { name = "mod_pain", rval = nil, args = { "int" } },
            { name = "mod_pain_noresist", rval = nil, args = { "int" } },
            { name = "mod_speed_bonus", rval = nil, args = { "int" } },
            { name = "mod_stat", rval = nil, args = { "string", "float" } },
            { name = "move_effects", rval = "bool", args = { "bool" } },
            { name = "normalize", rval = nil, args = { } },
            { name = "on_dodge", rval = nil, args = { "Creature", "float" } },
            { name = "pos", rval = "tripoint", args = { } },
            { name = "posx", rval = "int", args = { } },
            { name = "posy", rval = "int", args = { } },
            { name = "posz", rval = "int", args = { } },
            { name = "power_rating", rval = "float", args = { } },
            { name = "process_effects", rval = nil, args = { } },
            { name = "process_turn", rval = nil, args = { } },
            { name = "ranged_target_size", rval = "float", args = { } },
            { name = "remove_effect", rval = "bool", args = { "efftype_id", "body_part" } },
            { name = "remove_value", rval = nil, args = { "string" } },
            { name = "reset", rval = nil, args = { } },
            { name = "reset_bonuses", rval = nil, args = { } },
            { name = "reset_stats", rval = nil, args = { } },
            { name = "sees", rval = "bool", args = { "Creature" } },
            { name = "sees", rval = "bool", args = { "tripoint", "bool" } },
            { name = "select_body_part", rval = "body_part", args = { "Creature", "int" } },
            { name = "set_armor_bash_bonus", rval = nil, args = { "int" } },
            { name = "set_armor_cut_bonus", rval = nil, args = { "int" } },
            { name = "set_bash_bonus", rval = nil, args = { "int" } },
            { name = "set_bash_mult", rval = nil, args = { "float" } },
            { name = "set_block_bonus", rval = nil, args = { "int" } },
            { name = "set_cut_bonus", rval = nil, args = { "int" } },
            { name = "set_cut_mult", rval = nil, args = { "float" } },
            { name = "set_dodge_bonus", rval = nil, args = { "float" } },
            { name = "set_fake", rval = nil, args = { "bool" } },
            { name = "set_grab_resist", rval = nil, args = { "int" } },
            { name = "set_hit_bonus", rval = nil, args = { "float" } },
            { name = "set_melee_quiet", rval = nil, args = { "bool" } },
            { name = "set_moves", rval = nil, args = { "int" } },
            { name = "set_num_blocks_bonus", rval = nil, args = { "int" } },
            { name = "set_num_dodges_bonus", rval = nil, args = { "int" } },
            { name = "set_pain", rval = nil, args = { "int" } },
            { name = "set_speed_base", rval = nil, args = { "int" } },
            { name = "set_speed_bonus", rval = nil, args = { "int" } },
            { name = "set_throw_resist", rval = nil, args = { "int" } },
            { name = "set_value", rval = nil, args = { "string", "string" } },
            { name = "setpos", rval = nil, args = { "tripoint" } },
            { name = "sight_range", rval = "int", args = { "int" } },
            { name = "skin_name", rval = "string", args = { } },
            { name = "speed_rating", rval = "float", args = { } },
            { name = "stability_roll", rval = "float", args = { } },
            { name = "symbol", rval = "string", args = { } },
            { name = "symbol_color", rval = "nc_color", args = { } },
            { name = "uncanny_dodge", rval = "bool", args = { } },
            { name = "weight_capacity", rval = "units::mass", args = { } },
        }
    },
    MonsterGroup = {
        headers = { "mongroup.h" },
        string_id = "mongroup_id",
        attributes = {
            defaultMonster = { type = "mtype_id", writable = true },
            is_safe = { type = "bool", writable = true },
            monster_group_time = { type = "time_duration", writable = true },
            name = { type = "mongroup_id", writable = true },
            new_monster_group = { type = "mongroup_id", writable = true },
            replace_monster_group = { type = "bool", writable = true },
        },
        functions = {
            { name = "IsMonsterInGroup", rval = "bool", args = { "mtype_id" } },
        }
    },
    Skill = {
        headers = { "skill.h" },
        string_id = "skill_id",
        attributes = {
        },
        functions = {
        }
    },
    ammunition_type = {
        headers = { "ammo.h", "itype.h" },
        string_id = "ammotype",
        attributes = {
        },
        functions = {
            { name = "default_ammotype", rval = "string", args = { } },
            { name = "name", rval = "string", args = { } },
        }
    },
    calendar = {
        headers = { "calendar.h" },
        new = {
            { "calendar" },
            { "int" },
            { "int", "int", "int", "season_type", "int" },
            { },
        },
        by_value_and_reference = true,
        has_equal = true,
        attributes = {
        },
        functions = {
            -- calendar::operator+ ignored because: operator,
            -- calendar::operator+= ignored because: operator,
            -- calendar::operator- ignored because: operator,
            -- calendar::operator-= ignored because: operator,
            -- calendar::operator= ignored because: operator,
            { name = "current_daylight_level", rval = "float", args = { } },
            { name = "day_of_year", rval = "int", args = { } },
            { name = "eternal_season", static = true, rval = "bool", args = { } },
            { name = "increment", rval = nil, args = { } },
            { name = "is_night", rval = "bool", args = { } },
            { name = "name_season", static = true, rval = "string", args = { "season_type" } },
            { name = "once_every", static = true, rval = "bool", args = { "time_duration" } },
            { name = "season_from_default_ratio", static = true, rval = "float", args = { } },
            { name = "season_length", static = true, rval = "time_duration", args = { } },
            { name = "season_ratio", static = true, rval = "float", args = { } },
            { name = "sunlight", rval = "float", args = { } },
            { name = "sunrise", rval = "calendar", args = { } },
            { name = "sunset", rval = "calendar", args = { } },
            { name = "year_length", static = true, rval = "time_duration", args = { } },
            { name = "years", rval = "int", args = { } },
        }
    },
    effect = {
        headers = { "effect.h" },
        attributes = {
        },
        functions = {
            -- effect::deserialize ignored because: unhandled type JsonIn &[CXType_LValueReference] as argument (JsonIn &[CXType_LValueReference]),
            -- effect::operator= ignored because: operator,
            -- effect::serialize ignored because: unhandled type JsonOut &[CXType_LValueReference] as argument (JsonOut &[CXType_LValueReference]),
            { name = "activated", rval = "bool", args = { "time_point", "string", "int", "bool", "float" } },
            { name = "disp_desc", rval = "string", args = { "bool" } },
            { name = "disp_name", rval = "string", args = { } },
            { name = "get_addict_mod", rval = "float", args = { "string", "int" } },
            { name = "get_amount", rval = "int", args = { "string", "bool" } },
            { name = "get_avg_mod", rval = "int", args = { "string", "bool" } },
            { name = "get_bp", rval = "body_part", args = { } },
            { name = "get_dur_add_perc", rval = "int", args = { } },
            { name = "get_duration", rval = "time_duration", args = { } },
            { name = "get_effect_type", rval = "effect_type&", args = { } },
            { name = "get_harmful_cough", rval = "bool", args = { } },
            { name = "get_id", rval = "efftype_id", args = { } },
            { name = "get_int_add_val", rval = "int", args = { } },
            { name = "get_int_dur_factor", rval = "time_duration", args = { } },
            { name = "get_intensity", rval = "int", args = { } },
            { name = "get_max_duration", rval = "time_duration", args = { } },
            { name = "get_max_intensity", rval = "int", args = { } },
            { name = "get_max_val", rval = "int", args = { "string", "bool" } },
            { name = "get_min_val", rval = "int", args = { "string", "bool" } },
            { name = "get_miss_msgs", rval = nil, args = { } },
            { name = "get_mod", rval = "int", args = { "string", "bool" } },
            { name = "get_percentage", rval = "float", args = { "string", "int", "bool" } },
            { name = "get_sizing", rval = "bool", args = { "string" } },
            { name = "get_speed_name", rval = "string", args = { } },
            { name = "get_start_time", rval = "time_point", args = { } },
            { name = "impairs_movement", rval = "bool", args = { } },
            { name = "is_null", rval = "bool", args = { } },
            { name = "is_permanent", rval = "bool", args = { } },
            { name = "mod_duration", rval = nil, args = { "time_duration", "bool" } },
            { name = "mod_intensity", rval = "int", args = { "int", "bool" } },
            { name = "mult_duration", rval = nil, args = { "float", "bool" } },
            { name = "pause_effect", rval = nil, args = { } },
            { name = "set_bp", rval = nil, args = { "body_part" } },
            { name = "set_duration", rval = nil, args = { "time_duration", "bool" } },
            { name = "set_intensity", rval = "int", args = { "int", "bool" } },
            { name = "unpause_effect", rval = nil, args = { } },
            { name = "use_part_descs", rval = "bool", args = { } },
        }
    },
    effect_type = {
        headers = { "effect.h" },
        string_id = "efftype_id",
        attributes = {
            id = { type = "efftype_id", writable = true },
        },
        functions = {
            -- effect_type::load_decay_msgs ignored because: unhandled type JsonObject &[CXType_LValueReference] as argument (JsonObject &[CXType_LValueReference]),
            -- effect_type::load_miss_msgs ignored because: unhandled type JsonObject &[CXType_LValueReference] as argument (JsonObject &[CXType_LValueReference]),
            -- effect_type::load_mod_data ignored because: unhandled type JsonObject &[CXType_LValueReference] as argument (JsonObject &[CXType_LValueReference]),
            { name = "gain_game_message_type", rval = nil, args = { } },
            { name = "get_apply_memorial_log", rval = "string", args = { } },
            { name = "get_apply_message", rval = "string", args = { } },
            { name = "get_main_parts", rval = "bool", args = { } },
            { name = "get_rating", rval = nil, args = { } },
            { name = "get_remove_memorial_log", rval = "string", args = { } },
            { name = "get_remove_message", rval = "string", args = { } },
            { name = "is_show_in_info", rval = "bool", args = { } },
            { name = "lose_game_message_type", rval = nil, args = { } },
            { name = "register_ma_buff_effect", static = true, rval = nil, args = { "effect_type" } },
            { name = "use_desc_ints", rval = "bool", args = { "bool" } },
            { name = "use_name_ints", rval = "bool", args = { } },
        }
    },
    encumbrance_data = {
        headers = { "character.h" },
        new = {
        },
        by_value = true,
        has_equal = true,
        attributes = {
            -- encumbrance_data::layer_penalty_details ignored because: unhandled type std::array<layer_details, static_cast<size_t>(layer_level::MAX_CLOTHING_LAYER)>[CXType_Elaborated] as member (std::array<layer_details, 5>[CXType_Record]),
            armor_encumbrance = { type = "int", writable = true },
            encumbrance = { type = "int", writable = true },
            layer_penalty = { type = "int", writable = true },
        },
        functions = {
            -- encumbrance_data::layer ignored because: unhandled type const layer_level[CXType_Enum] as argument (const layer_level[CXType_Enum]),
            { name = "reset", rval = nil, args = { } },
        }
    },
    fault = {
        headers = { "fault.h" },
        string_id = "fault_id",
        attributes = {
        },
        functions = {
            -- static fault::check_consistency skipped because it's blocked,
            -- static fault::load_fault ignored because: unhandled type JsonObject &[CXType_LValueReference] as argument (JsonObject &[CXType_LValueReference]),
            -- static fault::reset skipped because it's blocked,
            { name = "all", static = true, rval = nil, args = { } },
            { name = "description", rval = "string", args = { } },
            { name = "id", rval = "fault_id", args = { } },
            { name = "is_null", rval = "bool", args = { } },
            { name = "name", rval = "string", args = { } },
            { name = "requirements", rval = nil, args = { } },
            { name = "skills", rval = nil, args = { } },
            { name = "time", rval = "int", args = { } },
        }
    },
    field = {
        headers = { "field.h" },
        attributes = {
        },
        functions = {
            -- field::removeField ignored because: unhandled type std::map<field_id, field_entry>::iterator[CXType_Elaborated] as argument (std::_Rb_tree_iterator<std::pair<const field_id, field_entry> >[CXType_Record]),
            { name = "addField", rval = "bool", args = { "field_id", "int", "time_duration" } },
            { name = "cppbegin", rval = nil, cpp_name = "begin", args = { } },
            { name = "cppend", rval = nil, cpp_name = "end", args = { } },
            { name = "fieldCount", rval = "int", args = { } },
            { name = "fieldSymbol", rval = "field_id", args = { } },
            { name = "findField", rval = "field_entry&", args = { "field_id" } },
            { name = "findFieldc", rval = "field_entry&", args = { "field_id" } },
            { name = "move_cost", rval = "int", args = { } },
            { name = "removeField", rval = "bool", args = { "field_id" } },
        }
    },
    field_entry = {
        headers = { "field.h" },
        attributes = {
        },
        functions = {
            { name = "color", rval = "nc_color", args = { } },
            { name = "decays_on_actualize", rval = "bool", args = { } },
            { name = "getFieldAge", rval = "time_duration", args = { } },
            { name = "getFieldDensity", rval = "int", args = { } },
            { name = "getFieldType", rval = "field_id", args = { } },
            { name = "isAlive", rval = "bool", args = { } },
            { name = "is_dangerous", rval = "bool", args = { } },
            { name = "mod_age", rval = "time_duration", args = { "time_duration" } },
            { name = "move_cost", rval = "int", args = { } },
            { name = "name", rval = "string", args = { } },
            { name = "setFieldAge", rval = "time_duration", args = { "time_duration" } },
            { name = "setFieldDensity", rval = "int", args = { "int" } },
            { name = "setFieldType", rval = "field_id", args = { "field_id" } },
            { name = "symbol", rval = "int", args = { } },
        }
    },
    furn_t = {
        headers = { "mapdata.h" },
        string_id = "furn_str_id",
        int_id = "furn_id",
        attributes = {
            -- furn_t::was_loaded skipped because it's blocked,
            -- map_data_common_t::bash ignored because: unhandled type map_bash_info[CXType_Record] as member (map_bash_info[CXType_Record]),
            -- map_data_common_t::color_ ignored because: unhandled type std::array<nc_color, SEASONS_PER_YEAR>[CXType_Elaborated] as member (std::array<nc_color, 4>[CXType_Record]),
            -- map_data_common_t::deconstruct ignored because: unhandled type map_deconstruct_info[CXType_Record] as member (map_deconstruct_info[CXType_Record]),
            -- map_data_common_t::examine ignored because: unhandled type void (*)(player &, const tripoint &)[CXType_Pointer] as member (void (*)(player &, const tripoint &)[CXType_Pointer]),
            -- map_data_common_t::harvest_by_season ignored because: unhandled type std::array<harvest_id, SEASONS_PER_YEAR>[CXType_Elaborated] as member (std::array<string_id<harvest_list>, 4>[CXType_Record]),
            -- map_data_common_t::symbol_ ignored because: unhandled type std::array<long, SEASONS_PER_YEAR>[CXType_Elaborated] as member (std::array<long, 4>[CXType_Record]),
            close = { type = "furn_str_id", writable = true },
            connect_group = { type = "int", writable = true },
            crafting_pseudo_item = { type = "string", writable = true },
            deployed_item = { type = "string", writable = true },
            description = { type = "string", writable = true },
            id = { type = "furn_str_id", writable = true },
            max_volume = { type = "units::volume", writable = true },
            move_str_req = { type = "int", writable = true },
            movecost = { type = "int", writable = true },
            open = { type = "furn_str_id", writable = true },
            transparent = { type = "bool", writable = true },
        },
        functions = {
            -- furn_t::load ignored because: unhandled type JsonObject &[CXType_LValueReference] as argument (JsonObject &[CXType_LValueReference]),
            -- map_data_common_t::connects ignored because: unhandled type int &[CXType_LValueReference] as argument (int &[CXType_LValueReference]),
            -- map_data_common_t::has_flag ignored because: unhandled type const ter_bitflags[CXType_Enum] as argument (const ter_bitflags[CXType_Enum]),
            -- map_data_common_t::load ignored because: unhandled type JsonObject &[CXType_LValueReference] as argument (JsonObject &[CXType_LValueReference]),
            -- map_data_common_t::load_symbol ignored because: unhandled type JsonObject &[CXType_LValueReference] as argument (JsonObject &[CXType_LValueReference]),
            { name = "check", rval = nil, args = { } },
            { name = "color", rval = "nc_color", args = { } },
            { name = "connects_to", rval = "bool", args = { "int" } },
            { name = "count", static = true, rval = "int", args = { } },
            { name = "crafting_ammo_item_type", rval = "itype&", args = { } },
            { name = "crafting_pseudo_item_type", rval = "itype&", args = { } },
            { name = "extended_description", rval = "string", args = { } },
            { name = "get_harvest", rval = nil, args = { } },
            { name = "has_flag", rval = "bool", args = { "string" } },
            { name = "name", rval = "string", args = { } },
            { name = "set_connects", rval = nil, args = { "string" } },
            { name = "set_flag", rval = nil, args = { "string" } },
            { name = "symbol", rval = "int", args = { } },
        }
    },
    game = {
        headers = { "game.h", "item.h", "color.h" },
        attributes = {
            -- game::critter_tracker ignored because: unhandled type pimpl<Creature_tracker>[CXType_Unexposed] as member (pimpl<Creature_tracker>[CXType_Record]),
            -- game::events ignored because: unhandled type event_manager &[CXType_LValueReference] as member (event_manager &[CXType_LValueReference]),
            -- game::faction_manager_ptr ignored because: unhandled type pimpl<faction_manager>[CXType_Unexposed] as member (pimpl<faction_manager>[CXType_Record]),
            -- game::lua_engine_ptr ignored because: unhandled type pimpl<lua_engine>[CXType_Unexposed] as member (pimpl<lua_engine>[CXType_Record]),
            -- game::m skipped because it's blocked,
            -- game::scen ignored because: unhandled type const scenario *[CXType_Pointer] as member (const scenario *[CXType_Pointer]),
            -- game::scent ignored because: unhandled type scent_map &[CXType_LValueReference] as member (scent_map &[CXType_LValueReference]),
            -- game::u skipped because it's blocked,
            -- game::uquit ignored because: unhandled type quit_status[CXType_Enum] as member (quit_status[CXType_Enum]),
            -- game::w_HP ignored because: unhandled type catacurses::window[CXType_Elaborated] as member (catacurses::window[CXType_Record]),
            -- game::w_blackspace ignored because: unhandled type catacurses::window[CXType_Elaborated] as member (catacurses::window[CXType_Record]),
            -- game::w_location ignored because: unhandled type catacurses::window[CXType_Elaborated] as member (catacurses::window[CXType_Record]),
            -- game::w_messages ignored because: unhandled type catacurses::window[CXType_Elaborated] as member (catacurses::window[CXType_Record]),
            -- game::w_messages_long ignored because: unhandled type catacurses::window[CXType_Elaborated] as member (catacurses::window[CXType_Record]),
            -- game::w_messages_short ignored because: unhandled type catacurses::window[CXType_Elaborated] as member (catacurses::window[CXType_Record]),
            -- game::w_minimap ignored because: unhandled type catacurses::window[CXType_Elaborated] as member (catacurses::window[CXType_Record]),
            -- game::w_omlegend ignored because: unhandled type catacurses::window[CXType_Elaborated] as member (catacurses::window[CXType_Record]),
            -- game::w_overmap ignored because: unhandled type catacurses::window[CXType_Elaborated] as member (catacurses::window[CXType_Record]),
            -- game::w_pixel_minimap ignored because: unhandled type catacurses::window[CXType_Elaborated] as member (catacurses::window[CXType_Record]),
            -- game::w_status ignored because: unhandled type catacurses::window[CXType_Elaborated] as member (catacurses::window[CXType_Record]),
            -- game::w_status2 ignored because: unhandled type catacurses::window[CXType_Elaborated] as member (catacurses::window[CXType_Record]),
            -- game::w_terrain ignored because: unhandled type catacurses::window[CXType_Elaborated] as member (catacurses::window[CXType_Record]),
            -- game::weather ignored because: unhandled type weather_type[CXType_Enum] as member (weather_type[CXType_Enum]),
            -- game::weather_precise ignored because: unhandled type pimpl<w_point>[CXType_Unexposed] as member (pimpl<w_point>[CXType_Record]),
            driving_view_offset = { type = "point", writable = true },
            fullscreen = { type = "bool", writable = true },
            lightning_active = { type = "bool", writable = true },
            monstairz = { type = "int", writable = true },
            narrow_sidebar = { type = "bool", writable = true },
            new_game = { type = "bool", writable = true },
            pixel_minimap_option = { type = "int", writable = true },
            right_sidebar = { type = "bool", writable = true },
            temperature = { type = "int", writable = true },
            ter_view_x = { type = "int", writable = true },
            ter_view_y = { type = "int", writable = true },
            ter_view_z = { type = "int", writable = true },
            was_fullscreen = { type = "bool", writable = true },
        },
        functions = {
            -- game::check_zone ignored because: unhandled type const zone_type_id &[CXType_LValueReference] as argument (const string_id<zone_type> &[CXType_LValueReference]),
            -- game::draw_custom_explosion ignored because: unhandled type const std::map<tripoint, nc_color> &[CXType_LValueReference] as argument (const std::map<tripoint, nc_color, std::less<tripoint>, std::allocator<std::pair<const tripoint, nc_color> > > &[CXType_LValueReference]),
            -- game::draw_weather ignored because: unhandled type const weather_printable &[CXType_LValueReference] as argument (const weather_printable &[CXType_LValueReference]),
            -- game::dump_stats ignored because: unhandled type dump_mode[CXType_Enum] as argument (dump_mode[CXType_Enum]),
            -- game::explosion ignored because: unhandled type const explosion_data &[CXType_LValueReference] as argument (const explosion_data &[CXType_LValueReference]),
            -- game::explosion ignored because: unhandled type std::unordered_map<tripoint, std::pair<int, int> >[CXType_Elaborated] as result (std::unordered_map<tripoint, std::pair<int, int>, std::hash<tripoint>, std::equal_to<tripoint>, std::allocator<std::pair<const tripoint, std::pair<int, int> > > >[CXType_Record]),
            -- game::find_or_make_stairs ignored because: unhandled type bool &[CXType_LValueReference] as argument (bool &[CXType_LValueReference]),
            -- game::get_creature_if ignored because: unhandled type const std::function<bool (const Creature &)> &[CXType_LValueReference] as argument (const std::function<bool (const Creature &)> &[CXType_LValueReference]),
            -- game::get_creatures_if ignored because: unhandled type const std::function<bool (const Creature &)> &[CXType_LValueReference] as argument (const std::function<bool (const Creature &)> &[CXType_LValueReference]),
            -- game::get_npcs_if ignored because: unhandled type const std::function<bool (const npc &)> &[CXType_LValueReference] as argument (const std::function<bool (const npc &)> &[CXType_LValueReference]),
            -- game::handle_liquid ignored because: unhandled type const tripoint *[CXType_Pointer] as argument (const tripoint *[CXType_Pointer]),
            -- game::inv_for_filter ignored because: unhandled type std::function<bool (const item &)>[CXType_Elaborated] as argument (std::function<bool (const item &)>[CXType_Record]),
            -- game::inv_map_splice ignored because: unhandled type std::function<bool (const item &)>[CXType_Elaborated] as argument (std::function<bool (const item &)>[CXType_Record]),
            -- game::inventory_item_menu ignored because: unhandled type game::inventory_item_menu_positon[CXType_Enum] as argument (game::inventory_item_menu_positon[CXType_Enum]),
            -- game::kill_count ignored because: unhandled type const species_id &[CXType_LValueReference] as argument (const string_id<species_type> &[CXType_LValueReference]),
            -- game::load_core_data ignored because: unhandled type loading_ui &[CXType_LValueReference] as argument (loading_ui &[CXType_LValueReference]),
            -- game::load_world_modfiles ignored because: unhandled type loading_ui &[CXType_LValueReference] as argument (loading_ui &[CXType_LValueReference]),
            -- game::look_around ignored because: unhandled type catacurses::window[CXType_Elaborated] as argument (catacurses::window[CXType_Record]),
            -- game::plfire_check ignored because: unhandled type const targeting_data &[CXType_LValueReference] as argument (const targeting_data &[CXType_LValueReference]),
            -- game::print_all_tile_info ignored because: unhandled type const catacurses::window &[CXType_LValueReference] as argument (const catacurses::window &[CXType_LValueReference]),
            -- game::serialize ignored because: unhandled type std::ostream &[CXType_LValueReference] as argument (std::basic_ostream<char> &[CXType_LValueReference]),
            -- game::set_safe_mode ignored because: unhandled type safe_mode_type[CXType_Enum] as argument (safe_mode_type[CXType_Enum]),
            -- game::unserialize ignored because: unhandled type std::istream &[CXType_LValueReference] as argument (std::basic_istream<char, std::char_traits<char> > &[CXType_LValueReference]),
            -- game::unserialize_legacy ignored because: unhandled type std::istream &[CXType_LValueReference] as argument (std::basic_istream<char, std::char_traits<char> > &[CXType_LValueReference]),
            -- game::unserialize_master ignored because: unhandled type std::istream &[CXType_LValueReference] as argument (std::basic_istream<char, std::char_traits<char> > &[CXType_LValueReference]),
            -- game::unserialize_master_legacy ignored because: unhandled type std::istream &[CXType_LValueReference] as argument (std::basic_istream<char, std::char_traits<char> > &[CXType_LValueReference]),
            -- game::update_map ignored because: unhandled type int &[CXType_LValueReference] as argument (int &[CXType_LValueReference]),
            -- game::zones_manager_draw_borders ignored because: unhandled type const catacurses::window &[CXType_LValueReference] as argument (const catacurses::window &[CXType_LValueReference]),
            -- game::zones_manager_shortcuts ignored because: unhandled type const catacurses::window &[CXType_LValueReference] as argument (const catacurses::window &[CXType_LValueReference]),
            { name = "add_zombie", rval = "bool", args = { "monster" } },
            { name = "add_zombie", rval = "bool", args = { "monster", "bool" } },
            { name = "all_creatures", rval = nil, args = { } },
            { name = "all_monsters", rval = nil, args = { } },
            { name = "all_npcs", rval = nil, args = { } },
            { name = "allies", rval = nil, args = { } },
            { name = "assign_mission_id", rval = "int", args = { } },
            { name = "assign_npc_id", rval = "int", args = { } },
            { name = "calc_driving_offset", rval = nil, args = { "vehicle" } },
            { name = "cancel_activity", rval = nil, args = { } },
            { name = "cancel_activity_or_ignore_query", rval = "bool", args = { "string" } },
            { name = "cancel_activity_query", rval = "bool", args = { "string" } },
            { name = "check_safe_mode_allowed", rval = "bool", args = { "bool" } },
            { name = "cleanup_at_end", rval = "bool", args = { } },
            { name = "clear_zombies", rval = nil, args = { } },
            { name = "consume_liquid", rval = "bool", args = { "item", "int" } },
            { name = "do_blast", rval = nil, args = { "tripoint", "float", "float", "bool" } },
            { name = "do_turn", rval = "bool", args = { } },
            { name = "draw", rval = nil, args = { } },
            { name = "draw_critter", rval = nil, args = { "Creature", "tripoint" } },
            { name = "draw_explosion", rval = nil, args = { "tripoint", "int", "nc_color" } },
            { name = "draw_hit_mon", rval = nil, args = { "tripoint", "monster", "bool" } },
            { name = "draw_hit_player", rval = nil, args = { "player", "int" } },
            { name = "draw_sct", rval = nil, args = { } },
            { name = "draw_ter", rval = nil, args = { "bool" } },
            { name = "draw_ter", rval = nil, args = { "tripoint", "bool", "bool" } },
            { name = "draw_trail_to_square", rval = nil, args = { "tripoint", "bool" } },
            { name = "draw_veh_dir_indicator", rval = nil, args = { "bool" } },
            { name = "draw_zones", rval = nil, args = { "tripoint", "tripoint", "tripoint" } },
            { name = "emp_blast", rval = nil, args = { "tripoint" } },
            { name = "exam_vehicle", rval = nil, args = { "vehicle", "int", "int" } },
            { name = "extended_description", rval = nil, args = { "tripoint" } },
            { name = "find_npc", rval = "npc&", args = { "int" } },
            { name = "flashbang", rval = nil, args = { "tripoint", "bool" } },
            { name = "fling_creature", rval = nil, args = { "Creature", "int", "float", "bool" } },
            { name = "forced_door_closing", rval = "bool", args = { "tripoint", "ter_id", "int" } },
            { name = "gametype", rval = nil, args = { } },
            { name = "get_cur_om", rval = "overmap&", args = { } },
            { name = "get_cur_weather_gen", rval = nil, args = { } },
            { name = "get_fishable", rval = nil, args = { "int" } },
            { name = "get_levx", rval = "int", args = { } },
            { name = "get_levy", rval = "int", args = { } },
            { name = "get_levz", rval = "int", args = { } },
            { name = "get_player_base_save_path", rval = "string", args = { } },
            { name = "get_seed", rval = "int", args = { } },
            { name = "get_temperature", rval = "int", args = { } },
            { name = "get_user_action_counter", rval = "int", args = { } },
            { name = "get_veh_dir_indicator_location", rval = "tripoint", args = { "bool" } },
            { name = "get_world_base_save_path", rval = "string", args = { } },
            { name = "handle_all_liquid", rval = nil, args = { "item", "int" } },
            { name = "handle_liquid_from_container", rval = "bool", args = { "item", "int" } },
            { name = "has_gametype", rval = "bool", args = { } },
            { name = "increase_kill_count", rval = nil, args = { "mtype_id" } },
            { name = "init_ui", rval = nil, args = { } },
            { name = "inv_for_all", rval = "int", args = { "string", "string" } },
            { name = "inv_for_flag", rval = "int", args = { "string", "string" } },
            { name = "inv_for_id", rval = "int", args = { "string", "string" } },
            { name = "is_core_data_loaded", rval = "bool", args = { } },
            { name = "is_empty", rval = "bool", args = { "tripoint" } },
            { name = "is_hostile_nearby", rval = "Creature&", args = { } },
            { name = "is_hostile_very_close", rval = "Creature&", args = { } },
            { name = "is_in_sunlight", rval = "bool", args = { "tripoint" } },
            { name = "is_in_viewport", rval = "bool", args = { "tripoint", "int" } },
            { name = "is_sheltered", rval = "bool", args = { "tripoint" } },
            { name = "kill_count", rval = "int", args = { "mtype_id" } },
            { name = "knockback", rval = nil, args = { "tripoint", "tripoint", "int", "int", "int" } },
            { name = "light_level", rval = "int", args = { "int" } },
            { name = "load", rval = "bool", args = { "string" } },
            { name = "load_map", rval = nil, args = { "tripoint" } },
            { name = "load_npcs", rval = nil, args = { } },
            { name = "load_static_data", rval = nil, args = { } },
            { name = "look_around", rval = "tripoint", args = { } },
            { name = "look_debug", rval = "tripoint", args = { } },
            { name = "moving_vehicle_dismount", rval = nil, args = { "tripoint" } },
            { name = "natural_light_level", rval = "float", args = { "int" } },
            { name = "nuke", rval = nil, args = { "tripoint" } },
            { name = "num_creatures", rval = "int", args = { } },
            { name = "open_gate", rval = nil, args = { "tripoint" } },
            { name = "peek", rval = nil, args = { "tripoint" } },
            { name = "peek", rval = nil, args = { } },
            { name = "place_player", rval = nil, args = { "tripoint" } },
            { name = "place_player_overmap", rval = nil, args = { "tripoint" } },
            { name = "plfire", rval = "bool", args = { "item", "int" } },
            { name = "plfire", rval = "bool", args = { } },
            { name = "plswim", rval = nil, args = { "tripoint" } },
            { name = "process_artifact", rval = nil, args = { "item", "player" } },
            { name = "record_npc_kill", rval = nil, args = { "npc" } },
            { name = "reenter_fullscreen", rval = nil, args = { } },
            { name = "refresh_all", rval = nil, args = { } },
            { name = "reload_npcs", rval = nil, args = { } },
            { name = "remoteveh", rval = "vehicle&", args = { } },
            { name = "remove_zombie", rval = nil, args = { "monster" } },
            { name = "reset_light_level", rval = nil, args = { } },
            { name = "reset_zoom", rval = nil, args = { } },
            { name = "resonance_cascade", rval = nil, args = { "tripoint" } },
            { name = "revive_corpse", rval = "bool", args = { "tripoint", "item" } },
            { name = "save", rval = "bool", args = { } },
            { name = "scrambler_blast", rval = nil, args = { "tripoint" } },
            { name = "set_critter_died", rval = nil, args = { } },
            { name = "set_driving_view_offset", rval = nil, args = { "point" } },
            { name = "set_npcs_dirty", rval = nil, args = { } },
            { name = "setremoteveh", rval = nil, args = { "vehicle" } },
            { name = "setup", rval = nil, args = { } },
            { name = "shockwave", rval = nil, args = { "tripoint", "int", "int", "int", "int", "bool" } },
            { name = "shrapnel", rval = nil, args = { "tripoint", "int", "int", "int", "int" } },
            { name = "spawn_hallucination", rval = "bool", args = { } },
            { name = "start_calendar", rval = nil, args = { } },
            { name = "summon_mon", rval = "monster&", args = { "mtype_id", "tripoint" } },
            { name = "swap_critters", rval = "bool", args = { "Creature", "Creature" } },
            { name = "teleport", rval = nil, args = { "player", "bool" } },
            { name = "temp_exit_fullscreen", rval = nil, args = { } },
            { name = "toggle_fullscreen", rval = nil, args = { } },
            { name = "toggle_pixel_minimap", rval = nil, args = { } },
            { name = "toggle_sidebar_style", rval = nil, args = { } },
            { name = "unload", rval = "bool", args = { "item" } },
            { name = "unload", rval = nil, args = { "int" } },
            { name = "unload_npcs", rval = nil, args = { } },
            { name = "update_map", rval = nil, args = { "player" } },
            { name = "update_overmap_seen", rval = nil, args = { } },
            { name = "update_zombie_pos", rval = "bool", args = { "monster", "tripoint" } },
            { name = "use_computer", rval = nil, args = { "tripoint" } },
            { name = "vertical_move", rval = nil, args = { "int", "bool" } },
            { name = "vertical_notes", rval = nil, args = { "int", "int" } },
            { name = "vertical_shift", rval = nil, args = { "int" } },
            { name = "write_memorial_file", rval = nil, args = { "string" } },
            { name = "zones_manager", rval = nil, args = { } },
            { name = "zoom_in", rval = nil, args = { } },
            { name = "zoom_out", rval = nil, args = { } },
        }
    },
    item = {
        headers = { "item.h", "color.h", "units.h", "gun_mode.h", "ret_val.h", "damage.h", "itype.h", "bodypart.h" },
        new = {
            -- item::item ignored because: unhandled type item &&[CXType_RValueReference] as argument (item &&[CXType_RValueReference]),
            -- item::item ignored because: unhandled type item::default_charges_tag[CXType_Record] as argument (item::default_charges_tag[CXType_Record]),
            -- item::item ignored because: unhandled type item::solitary_tag[CXType_Record] as argument (item::solitary_tag[CXType_Record]),
            { "item" },
            { "itype", "time_point", "int" },
            { "string", "time_point", "int" },
            { },
        },
        by_value_and_reference = true,
        attributes = {
            active = { type = "bool", writable = true },
            burnt = { type = "int", writable = true },
            charges = { type = "int", writable = true },
            frequency = { type = "int", writable = true },
            fridge = { type = "time_point", writable = true },
            invlet = { type = "int", writable = true },
            irridation = { type = "int", writable = true },
            item_counter = { type = "int", writable = true },
            mission_id = { type = "int", writable = true },
            note = { type = "int", writable = true },
            player_id = { type = "int", writable = true },
            poison = { type = "int", writable = true },
            type = { type = "itype", writable = true },
        },
        functions = {
            -- item::burn ignored because: unhandled type fire_data &[CXType_LValueReference] as argument (fire_data &[CXType_LValueReference]),
            -- item::casings_handle ignored because: unhandled type const std::function<bool (item &)> &[CXType_LValueReference] as argument (const std::function<bool (item &)> &[CXType_LValueReference]),
            -- item::deserialize ignored because: unhandled type JsonIn &[CXType_LValueReference] as argument (JsonIn &[CXType_LValueReference]),
            -- item::get_free_mod_locations ignored because: unhandled type const gunmod_location &[CXType_LValueReference] as argument (const gunmod_location &[CXType_LValueReference]),
            -- item::get_remaining_capacity_for_liquid ignored because: unhandled type std::string *[CXType_Pointer] as argument (std::__cxx11::basic_string<char> *[CXType_Pointer]),
            -- item::getlight ignored because: unhandled type float &[CXType_LValueReference] as argument (float &[CXType_LValueReference]),
            -- item::gun_get_mode ignored because: unhandled type const gun_mode_id &[CXType_LValueReference] as argument (const string_id<gun_mode> &[CXType_LValueReference]),
            -- item::gun_set_mode ignored because: unhandled type const gun_mode_id &[CXType_LValueReference] as argument (const string_id<gun_mode> &[CXType_LValueReference]),
            -- item::has_effect_when_carried ignored because: unhandled type art_effect_passive[CXType_Enum] as argument (art_effect_passive[CXType_Enum]),
            -- item::has_effect_when_wielded ignored because: unhandled type art_effect_passive[CXType_Enum] as argument (art_effect_passive[CXType_Enum]),
            -- item::has_effect_when_worn ignored because: unhandled type art_effect_passive[CXType_Enum] as argument (art_effect_passive[CXType_Enum]),
            -- item::mitigate_damage ignored because: unhandled type damage_unit &[CXType_LValueReference] as argument (damage_unit &[CXType_LValueReference]),
            -- item::operator< ignored because: operator,
            -- item::operator= ignored because: operator,
            -- item::operator= ignored because: unhandled type item &&[CXType_RValueReference] as argument (item &&[CXType_RValueReference]),
            -- item::reload ignored because: unhandled type item_location[CXType_Record] as argument (item_location[CXType_Record]),
            -- item::serialize ignored because: unhandled type JsonOut &[CXType_LValueReference] as argument (JsonOut &[CXType_LValueReference]),
            -- item::use_amount ignored because: unhandled type long &[CXType_LValueReference] as argument (long &[CXType_LValueReference]),
            -- item::use_charges ignored because: unhandled type long &[CXType_LValueReference] as argument (long &[CXType_LValueReference]),
            { name = "acid_resist", rval = "int", args = { "bool" } },
            { name = "activate", rval = "item&", args = { } },
            { name = "add_rain_to_container", rval = nil, args = { "bool", "int" } },
            { name = "add_technique", rval = nil, args = { "matec_id" } },
            { name = "age", rval = "time_duration", args = { } },
            { name = "allow_crafting_component", rval = "bool", args = { } },
            { name = "already_used_by_player", rval = "bool", args = { "player" } },
            { name = "ammo_capacity", rval = "int", args = { } },
            { name = "ammo_consume", rval = "int", args = { "int", "tripoint" } },
            { name = "ammo_current", rval = "string", args = { } },
            { name = "ammo_data", rval = "itype&", args = { } },
            { name = "ammo_default", rval = "string", args = { "bool" } },
            { name = "ammo_remaining", rval = "int", args = { } },
            { name = "ammo_required", rval = "int", args = { } },
            { name = "ammo_set", rval = "item&", args = { "string", "int" } },
            { name = "ammo_sufficient", rval = "bool", args = { "int" } },
            { name = "ammo_type", rval = "ammotype", args = { "bool" } },
            { name = "ammo_unset", rval = "item&", args = { } },
            { name = "attack_time", rval = "int", args = { } },
            { name = "base_damage_melee", rval = nil, args = { } },
            { name = "base_damage_thrown", rval = nil, args = { } },
            { name = "base_volume", rval = "units::volume", args = { } },
            { name = "bash_resist", rval = "int", args = { "bool" } },
            { name = "birthday", rval = "time_point", args = { } },
            { name = "brewing_results", rval = nil, args = { } },
            { name = "brewing_time", rval = "time_duration", args = { } },
            { name = "calc_rot", rval = nil, args = { "tripoint" } },
            { name = "can_contain", rval = "bool", args = { "item" } },
            { name = "can_contain", rval = "bool", args = { "itype" } },
            { name = "can_holster", rval = "bool", args = { "item", "bool" } },
            { name = "can_reload_with", rval = "bool", args = { "string" } },
            { name = "can_revive", rval = "bool", args = { } },
            { name = "casings_count", rval = "int", args = { } },
            { name = "charges_per_volume", rval = "int", args = { "units::volume" } },
            { name = "chip_resistance", rval = "int", args = { "bool" } },
            { name = "clear_vars", rval = nil, args = { } },
            { name = "color", rval = "nc_color", args = { } },
            { name = "color_in_inventory", rval = "nc_color", args = { } },
            { name = "components_to_string", rval = "string", args = { } },
            { name = "conductive", rval = "bool", args = { } },
            { name = "contextualize_skill", rval = "skill_id", args = { "skill_id" } },
            { name = "convert", rval = "item&", args = { "string" } },
            { name = "count_by_charges", rval = "bool", args = { } },
            { name = "count_by_charges", static = true, rval = "bool", args = { "string" } },
            { name = "covers", rval = "bool", args = { "body_part" } },
            { name = "craft_has_charges", rval = "bool", args = { } },
            { name = "cut_resist", rval = "int", args = { "bool" } },
            { name = "damage", rval = "int", args = { } },
            { name = "damage_color", rval = "nc_color", args = { } },
            { name = "damage_melee", rval = "int", args = { "damage_type" } },
            { name = "damage_resist", rval = "int", args = { "damage_type", "bool" } },
            { name = "damage_symbol", rval = "string", args = { } },
            { name = "deactivate", rval = "item&", args = { "Character", "bool" } },
            { name = "destroyed_at_zero_charges", rval = "bool", args = { } },
            { name = "display_name", rval = "string", args = { "int" } },
            { name = "engine_displacement", rval = "int", args = { } },
            { name = "erase_var", rval = nil, args = { "string" } },
            { name = "fill_with", rval = nil, args = { "item", "int" } },
            { name = "find_armor_data", rval = nil, args = { } },
            { name = "find_type", static = true, rval = "itype&", args = { "string" } },
            { name = "fire_resist", rval = "int", args = { "bool" } },
            { name = "flammable", rval = "bool", args = { "int" } },
            { name = "fuel_energy", rval = "float", args = { } },
            { name = "get_base_material", rval = "material_type&", args = { } },
            { name = "get_cable_target", rval = "tripoint", args = { } },
            { name = "get_category", rval = nil, args = { } },
            { name = "get_chapters", rval = "int", args = { } },
            { name = "get_contained", rval = "item", args = { } },
            { name = "get_container_capacity", rval = "units::volume", args = { } },
            { name = "get_coverage", rval = "int", args = { } },
            { name = "get_covered_body_parts", rval = nil, args = { "side" } },
            { name = "get_covered_body_parts", rval = nil, args = { } },
            { name = "get_encumber", rval = "int", args = { } },
            { name = "get_env_resist", rval = "int", args = { } },
            { name = "get_gun_ups_drain", rval = "int", args = { } },
            { name = "get_layer", rval = "int", args = { } },
            { name = "get_mtype", rval = "mtype&", args = { } },
            { name = "get_plant_epoch", rval = "time_duration", args = { } },
            { name = "get_plant_name", rval = "string", args = { } },
            { name = "get_property_long", rval = "int", args = { "string", "int" } },
            { name = "get_property_string", rval = "string", args = { "string", "string" } },
            { name = "get_quality", rval = "int", args = { "quality_id" } },
            { name = "get_random_material", rval = "material_type&", args = { } },
            { name = "get_relative_rot", rval = "float", args = { } },
            { name = "get_remaining_chapters", rval = "int", args = { "player" } },
            { name = "get_rot", rval = "time_duration", args = { } },
            { name = "get_side", rval = "side", args = { } },
            { name = "get_storage", rval = "units::volume", args = { } },
            { name = "get_thickness", rval = "int", args = { } },
            { name = "get_usable_item", rval = "item&", args = { "string" } },
            { name = "get_use", rval = nil, args = { "string" } },
            { name = "get_var", rval = "float", args = { "string", "float" } },
            { name = "get_var", rval = "string", args = { "string" } },
            { name = "get_var", rval = "string", args = { "string", "string" } },
            { name = "get_warmth", rval = "int", args = { } },
            { name = "getlight_emit", rval = "int", args = { } },
            { name = "goes_bad", rval = "bool", args = { } },
            { name = "gun_all_modes", rval = nil, args = { } },
            { name = "gun_current_mode", rval = nil, args = { } },
            { name = "gun_cycle_mode", rval = nil, args = { } },
            { name = "gun_damage", rval = nil, args = { "bool" } },
            { name = "gun_dispersion", rval = "int", args = { "bool" } },
            { name = "gun_get_mode_id", rval = nil, args = { } },
            { name = "gun_noise", rval = nil, args = { "bool" } },
            { name = "gun_range", rval = "int", args = { "bool" } },
            { name = "gun_range", rval = "int", args = { "player" } },
            { name = "gun_recoil", rval = "int", args = { "player", "bool" } },
            { name = "gun_skill", rval = "skill_id", args = { } },
            { name = "gun_type", rval = nil, args = { } },
            { name = "gunmod_find", rval = "item&", args = { "string" } },
            { name = "gunmods", rval = nil, args = { } },
            { name = "has_flag", rval = "bool", args = { "string" } },
            { name = "has_infinite_charges", rval = "bool", args = { } },
            { name = "has_label", rval = "bool", args = { } },
            { name = "has_property", rval = "bool", args = { "string" } },
            { name = "has_rotten_away", rval = "bool", args = { } },
            { name = "has_technique", rval = "bool", args = { "matec_id" } },
            { name = "has_var", rval = "bool", args = { "string" } },
            { name = "in_container", rval = "item", args = { "string" } },
            { name = "in_its_container", rval = "item", args = { } },
            { name = "inc_damage", rval = "bool", args = { "damage_type" } },
            { name = "inc_damage", rval = "bool", args = { } },
            { name = "info", rval = "string", args = { "bool" } },
            { name = "is_ammo", rval = "bool", args = { } },
            { name = "is_ammo_belt", rval = "bool", args = { } },
            { name = "is_ammo_container", rval = "bool", args = { } },
            { name = "is_armor", rval = "bool", args = { } },
            { name = "is_artifact", rval = "bool", args = { } },
            { name = "is_bandolier", rval = "bool", args = { } },
            { name = "is_bionic", rval = "bool", args = { } },
            { name = "is_book", rval = "bool", args = { } },
            { name = "is_brewable", rval = "bool", args = { } },
            { name = "is_bucket", rval = "bool", args = { } },
            { name = "is_bucket_nonempty", rval = "bool", args = { } },
            { name = "is_comestible", rval = "bool", args = { } },
            { name = "is_container", rval = "bool", args = { } },
            { name = "is_container_empty", rval = "bool", args = { } },
            { name = "is_container_full", rval = "bool", args = { "bool" } },
            { name = "is_corpse", rval = "bool", args = { } },
            { name = "is_dangerous", rval = "bool", args = { } },
            { name = "is_emissive", rval = "bool", args = { } },
            { name = "is_engine", rval = "bool", args = { } },
            { name = "is_faulty", rval = "bool", args = { } },
            { name = "is_filthy", rval = "bool", args = { } },
            { name = "is_firearm", rval = "bool", args = { } },
            { name = "is_food", rval = "bool", args = { } },
            { name = "is_food_container", rval = "bool", args = { } },
            { name = "is_fresh", rval = "bool", args = { } },
            { name = "is_fuel", rval = "bool", args = { } },
            { name = "is_funnel_container", rval = "bool", args = { "units::volume" } },
            { name = "is_going_bad", rval = "bool", args = { } },
            { name = "is_gun", rval = "bool", args = { } },
            { name = "is_gunmod", rval = "bool", args = { } },
            { name = "is_gunmod_compatible", rval = nil, args = { "item" } },
            { name = "is_irremovable", rval = "bool", args = { } },
            { name = "is_magazine", rval = "bool", args = { } },
            { name = "is_medication", rval = "bool", args = { } },
            { name = "is_melee", rval = "bool", args = { "damage_type" } },
            { name = "is_melee", rval = "bool", args = { } },
            { name = "is_non_resealable_container", rval = "bool", args = { } },
            { name = "is_null", rval = "bool", args = { } },
            { name = "is_power_armor", rval = "bool", args = { } },
            { name = "is_reloadable", rval = "bool", args = { } },
            { name = "is_reloadable_with", rval = "bool", args = { "string" } },
            { name = "is_salvageable", rval = "bool", args = { } },
            { name = "is_seed", rval = "bool", args = { } },
            { name = "is_sided", rval = "bool", args = { } },
            { name = "is_silent", rval = "bool", args = { } },
            { name = "is_soft", rval = "bool", args = { } },
            { name = "is_tainted", rval = "bool", args = { } },
            { name = "is_tool", rval = "bool", args = { } },
            { name = "is_tool_reversible", rval = "bool", args = { } },
            { name = "is_toolmod", rval = "bool", args = { } },
            { name = "is_two_handed", rval = "bool", args = { "player" } },
            { name = "is_unarmed_weapon", rval = "bool", args = { } },
            { name = "is_var_veh_part", rval = "bool", args = { } },
            { name = "is_watertight_container", rval = "bool", args = { } },
            { name = "is_wheel", rval = "bool", args = { } },
            { name = "is_worn_only_with", rval = "bool", args = { "item" } },
            { name = "label", rval = "string", args = { "int" } },
            { name = "lift_strength", rval = "int", args = { } },
            { name = "load_info", rval = nil, args = { "string" } },
            { name = "made_of", rval = "bool", args = { "material_id" } },
            { name = "made_of", rval = "bool", args = { "phase_id" } },
            { name = "made_of_types", rval = nil, args = { } },
            { name = "magazine_compatible", rval = nil, args = { "bool" } },
            { name = "magazine_current", rval = "item&", args = { } },
            { name = "magazine_default", rval = "string", args = { "bool" } },
            { name = "magazine_integral", rval = "bool", args = { } },
            { name = "make_corpse", static = true, rval = "item", args = { "mtype_id", "time_point", "string" } },
            { name = "mark_as_used_by_player", rval = nil, args = { "player" } },
            { name = "mark_chapter_as_read", rval = nil, args = { "player" } },
            { name = "max_damage", rval = "int", args = { } },
            { name = "melee_skill", rval = "skill_id", args = { } },
            { name = "merge_charges", rval = "bool", args = { "item" } },
            { name = "min_damage", rval = "int", args = { } },
            { name = "mod_charges", rval = nil, args = { "int" } },
            { name = "mod_damage", rval = "bool", args = { "float" } },
            { name = "mod_damage", rval = "bool", args = { "float", "damage_type" } },
            { name = "needs_processing", rval = "bool", args = { } },
            { name = "nname", static = true, rval = "string", args = { "string", "int" } },
            { name = "on_contents_changed", rval = nil, args = { } },
            { name = "on_damage", rval = nil, args = { "float", "damage_type" } },
            { name = "on_drop", rval = "bool", args = { "tripoint" } },
            { name = "on_pickup", rval = nil, args = { "Character" } },
            { name = "on_takeoff", rval = nil, args = { "Character" } },
            { name = "on_wear", rval = nil, args = { "Character" } },
            { name = "on_wield", rval = nil, args = { "player", "int" } },
            { name = "precise_damage", rval = "float", args = { } },
            { name = "price", rval = "int", args = { "bool" } },
            { name = "process", rval = "bool", args = { "player", "tripoint", "bool" } },
            { name = "process_artifact", rval = nil, args = { "player", "tripoint" } },
            { name = "processing_speed", rval = "int", args = { } },
            { name = "put_in", rval = nil, args = { "item" } },
            { name = "reach_range", rval = "int", args = { "player" } },
            { name = "ready_to_revive", rval = "bool", args = { "tripoint" } },
            { name = "repaired_with", rval = nil, args = { } },
            { name = "reset_cable", rval = nil, args = { "player" } },
            { name = "rotten", rval = "bool", args = { } },
            { name = "set_age", rval = nil, args = { "time_duration" } },
            { name = "set_birthday", rval = nil, args = { "time_point" } },
            { name = "set_countdown", rval = nil, args = { "int" } },
            { name = "set_damage", rval = "item&", args = { "float" } },
            { name = "set_flag", rval = "item&", args = { "string" } },
            { name = "set_mtype", rval = nil, args = { "mtype" } },
            { name = "set_relative_rot", rval = nil, args = { "float" } },
            { name = "set_side", rval = "bool", args = { "side" } },
            { name = "set_snippet", rval = nil, args = { "string" } },
            { name = "set_var", rval = nil, args = { "string", "float" } },
            { name = "set_var", rval = nil, args = { "string", "int" } },
            { name = "set_var", rval = nil, args = { "string", "string" } },
            { name = "sight_dispersion", rval = "int", args = { } },
            { name = "spill_contents", rval = "bool", args = { "Character" } },
            { name = "spill_contents", rval = "bool", args = { "tripoint" } },
            { name = "split", rval = "item", args = { "int" } },
            { name = "spoilage_sort_order", rval = "int", args = { } },
            { name = "stab_resist", rval = "int", args = { "bool" } },
            { name = "stacks_with", rval = "bool", args = { "item" } },
            { name = "swap_side", rval = "bool", args = { } },
            { name = "symbol", rval = "string", args = { } },
            { name = "tname", rval = "string", args = { "int", "bool" } },
            { name = "toolmods", rval = nil, args = { } },
            { name = "typeId", rval = "string", args = { } },
            { name = "type_is_defined", static = true, rval = "bool", args = { "string" } },
            { name = "type_name", rval = "string", args = { "int" } },
            { name = "units_remaining", rval = "int", args = { "Character", "int" } },
            { name = "units_sufficient", rval = "bool", args = { "Character", "int" } },
            { name = "unset_flag", rval = "item&", args = { "string" } },
            { name = "unset_flags", rval = nil, args = { } },
            { name = "volume", rval = "units::volume", args = { "bool" } },
            { name = "weight", rval = "units::mass", args = { "bool" } },
            { name = "wheel_area", rval = "int", args = { } },
            { name = "will_explode_in_fire", rval = "bool", args = { } },
        }
    },
    itype = {
        headers = { "itype.h" },
        attributes = {
            -- itype::ammo ignored because: unhandled type cata::optional<islot_ammo>[CXType_Elaborated] as member (cata::optional<islot_ammo>[CXType_Record]),
            -- itype::armor ignored because: unhandled type cata::optional<islot_armor>[CXType_Elaborated] as member (cata::optional<islot_armor>[CXType_Record]),
            -- itype::artifact ignored because: unhandled type cata::optional<islot_artifact>[CXType_Elaborated] as member (cata::optional<islot_artifact>[CXType_Record]),
            -- itype::bionic ignored because: unhandled type cata::optional<islot_bionic>[CXType_Elaborated] as member (cata::optional<islot_bionic>[CXType_Record]),
            -- itype::book ignored because: unhandled type cata::optional<islot_book>[CXType_Elaborated] as member (cata::optional<islot_book>[CXType_Record]),
            -- itype::brewable ignored because: unhandled type cata::optional<islot_brewable>[CXType_Elaborated] as member (cata::optional<islot_brewable>[CXType_Record]),
            -- itype::category ignored because: unhandled type const item_category *[CXType_Pointer] as member (const item_category *[CXType_Pointer]),
            -- itype::comestible ignored because: unhandled type cata::optional<islot_comestible>[CXType_Elaborated] as member (cata::optional<islot_comestible>[CXType_Record]),
            -- itype::container ignored because: unhandled type cata::optional<islot_container>[CXType_Elaborated] as member (cata::optional<islot_container>[CXType_Record]),
            -- itype::countdown_action ignored because: unhandled type use_function[CXType_Record] as member (use_function[CXType_Record]),
            -- itype::drop_action ignored because: unhandled type use_function[CXType_Record] as member (use_function[CXType_Record]),
            -- itype::engine ignored because: unhandled type cata::optional<islot_engine>[CXType_Elaborated] as member (cata::optional<islot_engine>[CXType_Record]),
            -- itype::explosion ignored because: unhandled type explosion_data[CXType_Record] as member (explosion_data[CXType_Record]),
            -- itype::fuel ignored because: unhandled type cata::optional<islot_fuel>[CXType_Elaborated] as member (cata::optional<islot_fuel>[CXType_Record]),
            -- itype::gun ignored because: unhandled type cata::optional<islot_gun>[CXType_Elaborated] as member (cata::optional<islot_gun>[CXType_Record]),
            -- itype::gunmod ignored because: unhandled type cata::optional<islot_gunmod>[CXType_Elaborated] as member (cata::optional<islot_gunmod>[CXType_Record]),
            -- itype::magazine ignored because: unhandled type cata::optional<islot_magazine>[CXType_Elaborated] as member (cata::optional<islot_magazine>[CXType_Record]),
            -- itype::magazine_default ignored because: unhandled type std::map<ammotype, itype_id>[CXType_Elaborated] as member (std::map<string_id<ammunition_type>, std::__cxx11::basic_string<char>, std::less<string_id<ammunition_type> >, std::allocator<std::pair<const string_id<ammunition_type>, std::__cxx11::basic_string<char> > > >[CXType_Record]),
            -- itype::melee ignored because: unhandled type std::array<int, NUM_DT>[CXType_Elaborated] as member (std::array<int, 10>[CXType_Record]),
            -- itype::min_skills ignored because: unhandled type std::map<skill_id, int>[CXType_Elaborated] as member (std::map<string_id<Skill>, int, std::less<string_id<Skill> >, std::allocator<std::pair<const string_id<Skill>, int> > >[CXType_Record]),
            -- itype::mod ignored because: unhandled type cata::optional<islot_mod>[CXType_Elaborated] as member (cata::optional<islot_mod>[CXType_Record]),
            -- itype::properties ignored because: unhandled type std::map<std::string, std::string>[CXType_Elaborated] as member (std::map<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char>, std::less<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > > >[CXType_Record]),
            -- itype::qualities ignored because: unhandled type std::map<quality_id, int>[CXType_Elaborated] as member (std::map<string_id<quality>, int, std::less<string_id<quality> >, std::allocator<std::pair<const string_id<quality>, int> > >[CXType_Record]),
            -- itype::seed ignored because: unhandled type cata::optional<islot_seed>[CXType_Elaborated] as member (cata::optional<islot_seed>[CXType_Record]),
            -- itype::thrown_damage ignored because: unhandled type damage_instance[CXType_Record] as member (damage_instance[CXType_Record]),
            -- itype::tool ignored because: unhandled type cata::optional<islot_tool>[CXType_Elaborated] as member (cata::optional<islot_tool>[CXType_Record]),
            -- itype::use_methods ignored because: unhandled type std::map<std::string, use_function>[CXType_Elaborated] as member (std::map<std::__cxx11::basic_string<char>, use_function, std::less<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, use_function> > >[CXType_Record]),
            -- itype::wheel ignored because: unhandled type cata::optional<islot_wheel>[CXType_Elaborated] as member (cata::optional<islot_wheel>[CXType_Record]),
            color = { type = "nc_color", writable = true },
            countdown_destroy = { type = "bool", writable = true },
            countdown_interval = { type = "int", writable = true },
            damage_max = { type = "int", writable = true },
            damage_min = { type = "int", writable = true },
            default_container = { type = "string", writable = true },
            description = { type = "string", writable = true },
            explode_in_fire = { type = "bool", writable = true },
            integral_volume = { type = "units::volume", writable = true },
            light_emission = { type = "int", writable = true },
            m_to_hit = { type = "int", writable = true },
            magazine_well = { type = "units::volume", writable = true },
            min_dex = { type = "int", writable = true },
            min_int = { type = "int", writable = true },
            min_per = { type = "int", writable = true },
            min_str = { type = "int", writable = true },
            phase = { type = "phase_id", writable = true },
            price = { type = "int", writable = true },
            price_post = { type = "int", writable = true },
            rigid = { type = "bool", writable = true },
            snippet_category = { type = "string", writable = true },
            stack_size = { type = "int", writable = true },
            stackable = { type = "bool", writable = true },
            sym = { type = "string", writable = true },
            volume = { type = "units::volume", writable = true },
            weight = { type = "units::mass", writable = true },
        },
        functions = {
            { name = "can_use", rval = "bool", args = { "string" } },
            { name = "charges_default", rval = "int", args = { } },
            { name = "charges_to_use", rval = "int", args = { } },
            { name = "count_by_charges", rval = "bool", args = { } },
            { name = "get_id", rval = "string", args = { } },
            { name = "get_item_type_string", rval = "string", args = { } },
            { name = "get_use", rval = nil, args = { "string" } },
            { name = "has_use", rval = "bool", args = { } },
            { name = "invoke", rval = "int", args = { "player", "item", "tripoint" } },
            { name = "invoke", rval = "int", args = { "player", "item", "tripoint", "string" } },
            { name = "maximum_charges", rval = "int", args = { } },
            { name = "nname", rval = "string", args = { "int" } },
            { name = "tick", rval = "int", args = { "player", "item", "tripoint" } },
        }
    },
    ma_buff = {
        headers = { "martialarts.h" },
        string_id = "mabuff_id",
        attributes = {
            -- ma_buff::bonuses ignored because: unhandled type bonus_container[CXType_Record] as member (bonus_container[CXType_Record]),
            -- ma_buff::reqs ignored because: unhandled type ma_requirements[CXType_Record] as member (ma_requirements[CXType_Record]),
            -- ma_buff::was_loaded skipped because it's blocked,
            blocks_bonus = { type = "int", writable = true },
            buff_duration = { type = "time_duration", writable = true },
            description = { type = "string", writable = true },
            dodges_bonus = { type = "int", writable = true },
            id = { type = "mabuff_id", writable = true },
            max_stacks = { type = "int", writable = true },
            melee_allowed = { type = "bool", writable = true },
            name = { type = "string", writable = true },
            quiet = { type = "bool", writable = true },
            strictly_unarmed = { type = "bool", writable = true },
            throw_immune = { type = "bool", writable = true },
        },
        functions = {
            -- ma_buff::load ignored because: unhandled type JsonObject &[CXType_LValueReference] as argument (JsonObject &[CXType_LValueReference]),
            { name = "apply_buff", rval = nil, args = { "player" } },
            { name = "apply_player", rval = nil, args = { "player" } },
            { name = "armor_bonus", rval = "int", args = { "player", "damage_type" } },
            { name = "block_bonus", rval = "int", args = { "player" } },
            { name = "can_melee", rval = "bool", args = { } },
            { name = "can_unarmed_weapon", rval = "bool", args = { } },
            { name = "damage_bonus", rval = "float", args = { "player", "damage_type" } },
            { name = "damage_mult", rval = "float", args = { "player", "damage_type" } },
            { name = "dodge_bonus", rval = "int", args = { "player" } },
            { name = "from_effect", static = true, rval = "ma_buff&", args = { "effect" } },
            { name = "get_effect_id", rval = "efftype_id", args = { } },
            { name = "hit_bonus", rval = "int", args = { "player" } },
            { name = "is_quiet", rval = "bool", args = { } },
            { name = "is_throw_immune", rval = "bool", args = { } },
            { name = "is_valid_player", rval = "bool", args = { "player" } },
            { name = "speed_bonus", rval = "int", args = { "player" } },
            { name = "stamina_mult", rval = "float", args = { } },
        }
    },
    ma_technique = {
        headers = { "martialarts.h" },
        string_id = "matec_id",
        attributes = {
            -- ma_technique::bonuses ignored because: unhandled type bonus_container[CXType_Record] as member (bonus_container[CXType_Record]),
            -- ma_technique::reqs ignored because: unhandled type ma_requirements[CXType_Record] as member (ma_requirements[CXType_Record]),
            -- ma_technique::was_loaded skipped because it's blocked,
            aoe = { type = "string", writable = true },
            block_counter = { type = "bool", writable = true },
            crit_tec = { type = "bool", writable = true },
            defensive = { type = "bool", writable = true },
            description = { type = "string", writable = true },
            disarms = { type = "bool", writable = true },
            dodge_counter = { type = "bool", writable = true },
            down_dur = { type = "int", writable = true },
            dummy = { type = "bool", writable = true },
            goal = { type = "string", writable = true },
            grab_break = { type = "bool", writable = true },
            id = { type = "matec_id", writable = true },
            knockback_dist = { type = "int", writable = true },
            knockback_spread = { type = "float", writable = true },
            miss_recovery = { type = "bool", writable = true },
            name = { type = "string", writable = true },
            npc_message = { type = "string", writable = true },
            player_message = { type = "string", writable = true },
            stun_dur = { type = "int", writable = true },
            weighting = { type = "int", writable = true },
        },
        functions = {
            -- ma_technique::load ignored because: unhandled type JsonObject &[CXType_LValueReference] as argument (JsonObject &[CXType_LValueReference]),
            { name = "armor_penetration", rval = "float", args = { "player", "damage_type" } },
            { name = "damage_bonus", rval = "float", args = { "player", "damage_type" } },
            { name = "damage_multiplier", rval = "float", args = { "player", "damage_type" } },
            { name = "is_valid_player", rval = "bool", args = { "player" } },
            { name = "move_cost_multiplier", rval = "float", args = { "player" } },
            { name = "move_cost_penalty", rval = "float", args = { "player" } },
        }
    },
    map = {
        headers = { "map.h", "units.h", "item.h", "vpart_position.h", "map_iterator.h", "submap.h" },
        attributes = {
        },
        functions = {
            -- map::add_vehicle ignored because: unhandled type const vgroup_id &[CXType_LValueReference] as argument (const string_id<VehicleGroup> &[CXType_LValueReference]),
            -- map::add_vehicle ignored because: unhandled type const vproto_id &[CXType_LValueReference] as argument (const string_id<vehicle_prototype> &[CXType_LValueReference]),
            -- map::apparent_light_at ignored because: unhandled type const visibility_variables &[CXType_LValueReference] as argument (const visibility_variables &[CXType_LValueReference]),
            -- map::apply_vision_effects ignored because: unhandled type const catacurses::window &[CXType_LValueReference] as argument (const catacurses::window &[CXType_LValueReference]),
            -- map::clip_to_bounds ignored because: unhandled type int &[CXType_LValueReference] as argument (int &[CXType_LValueReference]),
            -- map::create_anomaly ignored because: unhandled type artifact_natural_property[CXType_Enum] as argument (artifact_natural_property[CXType_Enum]),
            -- map::draw ignored because: unhandled type const catacurses::window &[CXType_LValueReference] as argument (const catacurses::window &[CXType_LValueReference]),
            -- map::draw_fill_background ignored because: unhandled type const weighted_int_list<ter_id> &[CXType_LValueReference] as argument (const weighted_int_list<int_id<ter_t> > &[CXType_LValueReference]),
            -- map::draw_fill_background ignored because: unhandled type ter_id (*)()[CXType_Pointer] as argument (int_id<ter_t> (*)()[CXType_Pointer]),
            -- map::draw_square_ter ignored because: unhandled type const weighted_int_list<ter_id> &[CXType_LValueReference] as argument (const weighted_int_list<int_id<ter_t> > &[CXType_LValueReference]),
            -- map::draw_square_ter ignored because: unhandled type ter_id (*)()[CXType_Pointer] as argument (int_id<ter_t> (*)()[CXType_Pointer]),
            -- map::drawsq ignored because: unhandled type const catacurses::window &[CXType_LValueReference] as argument (const catacurses::window &[CXType_LValueReference]),
            -- map::emit_field ignored because: unhandled type const emit_id &[CXType_LValueReference] as argument (const string_id<emit> &[CXType_LValueReference]),
            -- map::get_visibility ignored because: unhandled type const lit_level[CXType_Enum] as argument (const lit_level[CXType_Enum]),
            -- map::has_flag ignored because: unhandled type const ter_bitflags[CXType_Enum] as argument (const ter_bitflags[CXType_Enum]),
            -- map::has_flag_furn ignored because: unhandled type const ter_bitflags[CXType_Enum] as argument (const ter_bitflags[CXType_Enum]),
            -- map::has_flag_ter ignored because: unhandled type const ter_bitflags[CXType_Enum] as argument (const ter_bitflags[CXType_Enum]),
            -- map::has_flag_ter_or_furn ignored because: unhandled type const ter_bitflags[CXType_Enum] as argument (const ter_bitflags[CXType_Enum]),
            -- map::is_last_ter_wall ignored because: unhandled type const direction[CXType_Enum] as argument (const direction[CXType_Enum]),
            -- map::make_active ignored because: unhandled type item_location &[CXType_LValueReference] as argument (item_location &[CXType_LValueReference]),
            -- map::move_vehicle ignored because: unhandled type const tileray &[CXType_LValueReference] as argument (const tileray &[CXType_LValueReference]),
            -- map::operator= ignored because: unhandled type map &&[CXType_RValueReference] as argument (map &&[CXType_RValueReference]),
            -- map::place_npc ignored because: unhandled type const string_id<npc_template> &[CXType_LValueReference] as argument (const string_id<npc_template> &[CXType_LValueReference]),
            -- map::process_fields_in_submap ignored because: unhandled type submap *const[CXType_Pointer] as argument (submap *const[CXType_Pointer]),
            -- map::route ignored because: unhandled type const pathfinding_settings &[CXType_LValueReference] as argument (const pathfinding_settings &[CXType_LValueReference]),
            -- map::scent_blockers ignored because: unhandled type std::array<std::array<bool, 12 * 11>, 12 * 11> &[CXType_LValueReference] as argument (std::array<std::array<bool, 132>, 132> &[CXType_LValueReference]),
            -- map::shoot ignored because: unhandled type projectile &[CXType_LValueReference] as argument (projectile &[CXType_LValueReference]),
            -- map::spawn_natural_artifact ignored because: unhandled type const artifact_natural_property[CXType_Enum] as argument (const artifact_natural_property[CXType_Enum]),
            -- map::update_vehicle_list ignored because: unhandled type submap *const[CXType_Pointer] as argument (submap *const[CXType_Pointer]),
            -- map::use_amount ignored because: unhandled type long &[CXType_LValueReference] as argument (long &[CXType_LValueReference]),
            -- map::use_amount_square ignored because: unhandled type long &[CXType_LValueReference] as argument (long &[CXType_LValueReference]),
            -- map::use_charges ignored because: unhandled type long &[CXType_LValueReference] as argument (long &[CXType_LValueReference]),
            -- map::veh_at_internal ignored because: unhandled type int &[CXType_LValueReference] as argument (int &[CXType_LValueReference]),
            { name = "access_cache", rval = nil, args = { "int" } },
            { name = "accessible_items", rval = "bool", args = { "tripoint" } },
            { name = "add_camp", rval = nil, args = { "tripoint", "string" } },
            { name = "add_computer", rval = nil, args = { "tripoint", "string", "int" } },
            { name = "add_corpse", rval = nil, args = { "tripoint" } },
            { name = "add_field", rval = "bool", args = { "tripoint", "field_id", "int", "time_duration" } },
            { name = "add_item", rval = "item&", args = { "tripoint", "item" } },
            { name = "add_item", rval = nil, args = { "int", "int", "item" } },
            { name = "add_item_or_charges", rval = "item&", args = { "int", "int", "item", "bool" } },
            { name = "add_item_or_charges", rval = "item&", args = { "tripoint", "item", "bool" } },
            { name = "add_spawn", rval = nil, args = { "mtype_id", "int", "int", "int", "bool", "int", "int", "string" } },
            { name = "add_splash", rval = nil, args = { "field_id", "tripoint", "int", "int" } },
            { name = "add_splatter", rval = nil, args = { "field_id", "tripoint", "int" } },
            { name = "add_splatter_trail", rval = nil, args = { "field_id", "tripoint", "tripoint" } },
            { name = "add_vehicle_to_cache", rval = nil, args = { "vehicle" } },
            { name = "adjust_field_age", rval = "time_duration", args = { "tripoint", "field_id", "time_duration" } },
            { name = "adjust_field_strength", rval = "int", args = { "tripoint", "field_id", "int" } },
            { name = "adjust_radiation", rval = nil, args = { "int", "int", "int" } },
            { name = "adjust_radiation", rval = nil, args = { "tripoint", "int" } },
            { name = "allow_camp", rval = "bool", args = { "tripoint", "int" } },
            { name = "ambient_light_at", rval = "float", args = { "tripoint" } },
            { name = "bash", rval = nil, args = { "tripoint", "int", "bool", "bool", "bool", "vehicle" } },
            { name = "bash_rating", rval = "int", args = { "int", "int", "int" } },
            { name = "bash_rating", rval = "int", args = { "int", "tripoint", "bool" } },
            { name = "bash_resistance", rval = "int", args = { "int", "int" } },
            { name = "bash_resistance", rval = "int", args = { "tripoint", "bool" } },
            { name = "bash_strength", rval = "int", args = { "int", "int" } },
            { name = "bash_strength", rval = "int", args = { "tripoint", "bool" } },
            { name = "board_vehicle", rval = nil, args = { "tripoint", "player" } },
            { name = "build_floor_cache", rval = nil, args = { "int" } },
            { name = "build_floor_caches", rval = nil, args = { } },
            { name = "build_map_cache", rval = nil, args = { "int", "bool" } },
            { name = "build_outside_cache", rval = nil, args = { "int" } },
            { name = "camp_at", rval = nil, args = { "tripoint", "int" } },
            { name = "can_move_furniture", rval = "bool", args = { "tripoint", "player" } },
            { name = "can_put_items", rval = "bool", args = { "tripoint" } },
            { name = "can_put_items_ter_furn", rval = "bool", args = { "int", "int" } },
            { name = "can_put_items_ter_furn", rval = "bool", args = { "tripoint" } },
            { name = "clear_path", rval = "bool", args = { "tripoint", "tripoint", "int", "int", "int" } },
            { name = "clear_spawns", rval = nil, args = { } },
            { name = "clear_traps", rval = nil, args = { } },
            { name = "clear_vehicle_cache", rval = nil, args = { "int" } },
            { name = "clear_vehicle_list", rval = nil, args = { "int" } },
            { name = "climb_difficulty", rval = "int", args = { "tripoint" } },
            { name = "clip_to_bounds", rval = nil, args = { "tripoint" } },
            { name = "close_door", rval = "bool", args = { "tripoint", "bool", "bool" } },
            { name = "collapse_at", rval = nil, args = { "tripoint", "bool" } },
            { name = "collapse_check", rval = "int", args = { "tripoint" } },
            { name = "combined_movecost", rval = "int", args = { "tripoint", "tripoint", "vehicle", "int", "bool" } },
            { name = "computer_at", rval = nil, args = { "tripoint" } },
            { name = "coord_to_angle", rval = "int", args = { "int", "int", "int", "int" } },
            { name = "could_see_items", rval = "bool", args = { "tripoint", "Creature" } },
            { name = "create_burnproducts", rval = nil, args = { "tripoint", "item", "units::mass" } },
            { name = "creature_in_field", rval = nil, args = { "Creature" } },
            { name = "creature_on_trap", rval = nil, args = { "Creature", "bool" } },
            { name = "crush", rval = nil, args = { "tripoint" } },
            { name = "decay_fields_and_scent", rval = nil, args = { "time_duration" } },
            { name = "delete_graffiti", rval = nil, args = { "tripoint" } },
            { name = "delete_signage", rval = nil, args = { "tripoint" } },
            { name = "destroy", rval = nil, args = { "tripoint", "bool" } },
            { name = "destroy_furn", rval = nil, args = { "tripoint", "bool" } },
            { name = "destroy_vehicle", rval = nil, args = { "vehicle" } },
            { name = "disarm_trap", rval = nil, args = { "tripoint" } },
            { name = "disp_name", rval = "string", args = { "tripoint" } },
            { name = "displace_vehicle", rval = "vehicle&", args = { "tripoint", "tripoint" } },
            { name = "displace_water", rval = "bool", args = { "tripoint" } },
            { name = "draw_circle_furn", rval = nil, args = { "furn_id", "int", "int", "int" } },
            { name = "draw_circle_ter", rval = nil, args = { "ter_id", "float", "float", "float" } },
            { name = "draw_circle_ter", rval = nil, args = { "ter_id", "int", "int", "int" } },
            { name = "draw_fill_background", rval = nil, args = { "ter_id" } },
            { name = "draw_line_furn", rval = nil, args = { "furn_id", "int", "int", "int", "int" } },
            { name = "draw_line_ter", rval = nil, args = { "ter_id", "int", "int", "int", "int" } },
            { name = "draw_rough_circle_furn", rval = nil, args = { "furn_id", "int", "int", "int" } },
            { name = "draw_rough_circle_ter", rval = nil, args = { "ter_id", "int", "int", "int" } },
            { name = "draw_square_furn", rval = nil, args = { "furn_id", "int", "int", "int", "int" } },
            { name = "draw_square_ter", rval = nil, args = { "ter_id", "int", "int", "int", "int" } },
            { name = "drop_everything", rval = nil, args = { "tripoint" } },
            { name = "drop_fields", rval = nil, args = { "tripoint" } },
            { name = "drop_furniture", rval = nil, args = { "tripoint" } },
            { name = "drop_items", rval = nil, args = { "tripoint" } },
            { name = "drop_vehicle", rval = nil, args = { "tripoint" } },
            { name = "examine", rval = nil, args = { "Character", "tripoint" } },
            { name = "features", rval = "string", args = { "int", "int" } },
            { name = "features", rval = "string", args = { "tripoint" } },
            { name = "field_at", rval = "field&", args = { "tripoint" } },
            { name = "flammable_items_at", rval = "bool", args = { "tripoint", "int" } },
            { name = "free_volume", rval = "units::volume", args = { "tripoint" } },
            { name = "furn", rval = "furn_id", args = { "int", "int" } },
            { name = "furn", rval = "furn_id", args = { "tripoint" } },
            { name = "furn_set", rval = nil, args = { "int", "int", "furn_id" } },
            { name = "furn_set", rval = nil, args = { "tripoint", "furn_id" } },
            { name = "furnname", rval = "string", args = { "int", "int" } },
            { name = "furnname", rval = "string", args = { "tripoint" } },
            { name = "generate", rval = nil, args = { "int", "int", "int", "time_point" } },
            { name = "get_abs_sub", rval = "tripoint", args = { } },
            { name = "get_active_items_in_radius", rval = nil, args = { "tripoint", "int" } },
            { name = "get_cache_ref", rval = nil, args = { "int" } },
            { name = "get_field", rval = "field_entry&", args = { "tripoint", "field_id" } },
            { name = "get_field_age", rval = "time_duration", args = { "tripoint", "field_id" } },
            { name = "get_field_strength", rval = "int", args = { "tripoint", "field_id" } },
            { name = "get_harvest", rval = nil, args = { "tripoint" } },
            { name = "get_pathfinding_cache_ref", rval = nil, args = { "int" } },
            { name = "get_radiation", rval = "int", args = { "tripoint" } },
            { name = "get_rc_items", rval = nil, args = { "int", "int", "int" } },
            { name = "get_signage", rval = "string", args = { "tripoint" } },
            { name = "get_ter_transforms_into", rval = "ter_id", args = { "tripoint" } },
            { name = "get_vehicles", rval = nil, args = { "tripoint", "tripoint" } },
            { name = "get_vehicles", rval = nil, args = { } },
            { name = "get_visibility_variables_cache", rval = nil, args = { } },
            { name = "getabs", rval = "point", args = { "int", "int" } },
            { name = "getabs", rval = "point", args = { "point" } },
            { name = "getabs", rval = "tripoint", args = { "tripoint" } },
            { name = "getlocal", rval = "point", args = { "int", "int" } },
            { name = "getlocal", rval = "point", args = { "point" } },
            { name = "getlocal", rval = "tripoint", args = { "tripoint" } },
            { name = "getmapsize", rval = "int", args = { } },
            { name = "graffiti_at", rval = "string", args = { "tripoint" } },
            { name = "has_adjacent_furniture", rval = "bool", args = { "tripoint" } },
            { name = "has_flag", rval = "bool", args = { "string", "int", "int" } },
            { name = "has_flag", rval = "bool", args = { "string", "tripoint" } },
            { name = "has_flag_furn", rval = "bool", args = { "string", "int", "int" } },
            { name = "has_flag_furn", rval = "bool", args = { "string", "tripoint" } },
            { name = "has_flag_ter", rval = "bool", args = { "string", "int", "int" } },
            { name = "has_flag_ter", rval = "bool", args = { "string", "tripoint" } },
            { name = "has_flag_ter_or_furn", rval = "bool", args = { "string", "int", "int" } },
            { name = "has_flag_ter_or_furn", rval = "bool", args = { "string", "tripoint" } },
            { name = "has_floor", rval = "bool", args = { "tripoint" } },
            { name = "has_floor_or_support", rval = "bool", args = { "tripoint" } },
            { name = "has_furn", rval = "bool", args = { "int", "int" } },
            { name = "has_furn", rval = "bool", args = { "tripoint" } },
            { name = "has_graffiti_at", rval = "bool", args = { "tripoint" } },
            { name = "has_items", rval = "bool", args = { "tripoint" } },
            { name = "has_nearby_fire", rval = "bool", args = { "tripoint", "int" } },
            { name = "has_zlevels", rval = "bool", args = { } },
            { name = "hit_with_acid", rval = "bool", args = { "tripoint" } },
            { name = "hit_with_fire", rval = "bool", args = { "tripoint" } },
            { name = "i_at", rval = "map_stack", args = { "int", "int" } },
            { name = "i_at", rval = "map_stack", args = { "tripoint" } },
            { name = "i_clear", rval = nil, args = { "int", "int" } },
            { name = "i_clear", rval = nil, args = { "tripoint" } },
            { name = "i_rem", rval = "int", args = { "int", "int", "int" } },
            { name = "i_rem", rval = "int", args = { "tripoint", "int" } },
            { name = "i_rem", rval = nil, args = { "int", "int", "item" } },
            { name = "i_rem", rval = nil, args = { "tripoint", "item" } },
            { name = "impassable", rval = "bool", args = { "int", "int" } },
            { name = "impassable", rval = "bool", args = { "tripoint" } },
            { name = "impassable_ter_furn", rval = "bool", args = { "tripoint" } },
            { name = "inbounds", rval = "bool", args = { "int", "int" } },
            { name = "inbounds", rval = "bool", args = { "int", "int", "int" } },
            { name = "inbounds", rval = "bool", args = { "tripoint" } },
            { name = "inbounds_z", rval = "bool", args = { "int" } },
            { name = "is_bashable", rval = "bool", args = { "int", "int" } },
            { name = "is_bashable", rval = "bool", args = { "tripoint", "bool" } },
            { name = "is_bashable_furn", rval = "bool", args = { "int", "int" } },
            { name = "is_bashable_furn", rval = "bool", args = { "tripoint" } },
            { name = "is_bashable_ter", rval = "bool", args = { "int", "int" } },
            { name = "is_bashable_ter", rval = "bool", args = { "tripoint", "bool" } },
            { name = "is_bashable_ter_furn", rval = "bool", args = { "int", "int" } },
            { name = "is_bashable_ter_furn", rval = "bool", args = { "tripoint", "bool" } },
            { name = "is_divable", rval = "bool", args = { "int", "int" } },
            { name = "is_divable", rval = "bool", args = { "tripoint" } },
            { name = "is_harvestable", rval = "bool", args = { "tripoint" } },
            { name = "is_outside", rval = "bool", args = { "int", "int" } },
            { name = "is_outside", rval = "bool", args = { "tripoint" } },
            { name = "item_from", rval = "item&", args = { "tripoint", "int" } },
            { name = "item_from", rval = "item&", args = { "vehicle", "int", "int" } },
            { name = "light_at", rval = nil, args = { "tripoint" } },
            { name = "light_transparency", rval = "float", args = { "tripoint" } },
            { name = "load", rval = nil, args = { "int", "int", "int", "bool" } },
            { name = "make_rubble", rval = nil, args = { "tripoint" } },
            { name = "make_rubble", rval = nil, args = { "tripoint", "furn_id", "bool" } },
            { name = "make_rubble", rval = nil, args = { "tripoint", "furn_id", "bool", "ter_id", "bool" } },
            { name = "maptile_at", rval = nil, args = { "tripoint" } },
            { name = "max_volume", rval = "units::volume", args = { "tripoint" } },
            { name = "mop_spills", rval = "bool", args = { "tripoint" } },
            { name = "move_cost", rval = "int", args = { "int", "int", "vehicle" } },
            { name = "move_cost", rval = "int", args = { "tripoint", "vehicle" } },
            { name = "move_cost_ter_furn", rval = "int", args = { "int", "int" } },
            { name = "move_cost_ter_furn", rval = "int", args = { "tripoint" } },
            { name = "name", rval = "string", args = { "int", "int" } },
            { name = "name", rval = "string", args = { "tripoint" } },
            { name = "need_draw_lower_floor", rval = "bool", args = { "tripoint" } },
            { name = "obstacle_name", rval = "string", args = { "tripoint" } },
            { name = "on_vehicle_moved", rval = nil, args = { "int" } },
            { name = "open_door", rval = "bool", args = { "tripoint", "bool", "bool" } },
            { name = "passable", rval = "bool", args = { "int", "int" } },
            { name = "passable", rval = "bool", args = { "tripoint" } },
            { name = "passable_ter_furn", rval = "bool", args = { "tripoint" } },
            { name = "pl_line_of_sight", rval = "bool", args = { "tripoint", "int" } },
            { name = "pl_sees", rval = "bool", args = { "tripoint", "int" } },
            { name = "place_gas_pump", rval = nil, args = { "int", "int", "int" } },
            { name = "place_gas_pump", rval = nil, args = { "int", "int", "int", "string" } },
            { name = "place_items", rval = nil, args = { "string", "int", "int", "int", "int", "int", "bool", "time_point", "int", "int" } },
            { name = "place_items", rval = nil, args = { "string", "int", "tripoint", "tripoint", "bool", "time_point", "int", "int" } },
            { name = "place_spawns", rval = nil, args = { "mongroup_id", "int", "int", "int", "int", "int", "float" } },
            { name = "place_toilet", rval = nil, args = { "int", "int", "int" } },
            { name = "place_vending", rval = nil, args = { "int", "int", "string", "bool" } },
            { name = "points_in_radius", rval = nil, args = { "tripoint", "int", "int" } },
            { name = "points_in_rectangle", rval = nil, args = { "tripoint", "tripoint" } },
            { name = "process_active_items", rval = nil, args = { } },
            { name = "process_falling", rval = nil, args = { } },
            { name = "process_fields", rval = "bool", args = { } },
            { name = "propagate_field", rval = nil, args = { "tripoint", "field_id", "int", "int" } },
            { name = "random_outdoor_tile", rval = "point", args = { } },
            { name = "ranged_target_size", rval = "float", args = { "tripoint" } },
            { name = "remove_field", rval = nil, args = { "tripoint", "field_id" } },
            { name = "remove_trap", rval = nil, args = { "tripoint" } },
            { name = "reset_vehicle_cache", rval = nil, args = { "int" } },
            { name = "rotate", rval = nil, args = { "int" } },
            { name = "save", rval = nil, args = { } },
            { name = "sees", rval = "bool", args = { "tripoint", "tripoint", "int" } },
            { name = "sees_some_items", rval = "bool", args = { "tripoint", "Creature" } },
            { name = "set", rval = nil, args = { "int", "int", "ter_id", "furn_id" } },
            { name = "set", rval = nil, args = { "tripoint", "ter_id", "furn_id" } },
            { name = "set_field_age", rval = "time_duration", args = { "tripoint", "field_id", "time_duration", "bool" } },
            { name = "set_field_strength", rval = "int", args = { "tripoint", "field_id", "int", "bool" } },
            { name = "set_floor_cache_dirty", rval = nil, args = { "int" } },
            { name = "set_graffiti", rval = nil, args = { "tripoint", "string" } },
            { name = "set_outside_cache_dirty", rval = nil, args = { "int" } },
            { name = "set_pathfinding_cache_dirty", rval = nil, args = { "int" } },
            { name = "set_radiation", rval = nil, args = { "int", "int", "int" } },
            { name = "set_radiation", rval = nil, args = { "tripoint", "int" } },
            { name = "set_signage", rval = nil, args = { "tripoint", "string" } },
            { name = "set_temperature", rval = nil, args = { "int", "int", "int" } },
            { name = "set_temperature", rval = nil, args = { "tripoint", "int" } },
            { name = "set_transparency_cache_dirty", rval = nil, args = { "int" } },
            { name = "shake_vehicle", rval = "int", args = { "vehicle", "int", "int" } },
            { name = "shift", rval = nil, args = { "int", "int" } },
            { name = "smash_items", rval = nil, args = { "tripoint", "int" } },
            { name = "spawn_an_item", rval = "item&", args = { "tripoint", "item", "int", "int" } },
            { name = "spawn_an_item", rval = nil, args = { "int", "int", "item", "int", "int" } },
            { name = "spawn_artifact", rval = nil, args = { "tripoint" } },
            { name = "spawn_item", rval = nil, args = { "int", "int", "string", "int", "int", "time_point", "int" } },
            { name = "spawn_item", rval = nil, args = { "tripoint", "string", "int", "int", "time_point", "int" } },
            { name = "spawn_monsters", rval = nil, args = { "bool" } },
            { name = "stored_volume", rval = "units::volume", args = { "tripoint" } },
            { name = "supports_above", rval = "bool", args = { "tripoint" } },
            { name = "temperature", rval = nil, args = { "tripoint" } },
            { name = "ter", rval = "ter_id", args = { "int", "int" } },
            { name = "ter", rval = "ter_id", args = { "tripoint" } },
            { name = "ter_set", rval = nil, args = { "int", "int", "ter_id" } },
            { name = "ter_set", rval = nil, args = { "tripoint", "ter_id" } },
            { name = "tername", rval = "string", args = { "int", "int" } },
            { name = "tername", rval = "string", args = { "tripoint" } },
            { name = "tr_at", rval = "trap&", args = { "tripoint" } },
            { name = "trans", rval = "bool", args = { "tripoint" } },
            { name = "translate", rval = nil, args = { "ter_id", "ter_id" } },
            { name = "translate_radius", rval = nil, args = { "ter_id", "ter_id", "float", "tripoint" } },
            { name = "trap_set", rval = nil, args = { "tripoint", "trap_id" } },
            { name = "trigger_rc_items", rval = nil, args = { "string" } },
            { name = "unboard_vehicle", rval = nil, args = { "tripoint" } },
            { name = "update_pathfinding_cache", rval = nil, args = { "int" } },
            { name = "update_vehicle_cache", rval = nil, args = { "vehicle", "int" } },
            { name = "update_visibility_cache", rval = nil, args = { "int" } },
            { name = "valid_move", rval = "bool", args = { "tripoint", "tripoint", "bool", "bool" } },
            { name = "veh_at", rval = nil, args = { "tripoint" } },
            { name = "vehact", rval = "bool", args = { "vehicle" } },
            { name = "vehicle_buoyancy", rval = "float", args = { "vehicle" } },
            { name = "vehicle_falling", rval = "bool", args = { "vehicle" } },
            { name = "vehicle_wheel_traction", rval = "float", args = { "vehicle" } },
            { name = "vehmove", rval = nil, args = { } },
            { name = "vehproceed", rval = "bool", args = { } },
            { name = "vertical_shift", rval = nil, args = { "int" } },
            { name = "water_from", rval = "item", args = { "tripoint" } },
        }
    },
    map_stack = {
        headers = { "map.h", "units.h" },
        new = {
            -- map_stack::map_stack skipped because it's blocked,
        },
        by_value = true,
        attributes = {
        },
        functions = {
            -- item_stack::operator[] ignored because: operator,
            { name = "amount_can_fit", rval = "int", args = { "item" } },
            { name = "count_limit", rval = "int", args = { } },
            { name = "cppbegin", rval = nil, cpp_name = "begin", args = { } },
            { name = "cppend", rval = nil, cpp_name = "end", args = { } },
            { name = "empty", rval = "bool", args = { } },
            { name = "free_volume", rval = "units::volume", args = { } },
            { name = "front", rval = "item&", args = { } },
            { name = "max_volume", rval = "units::volume", args = { } },
            { name = "push_back", rval = nil, args = { "item" } },
            { name = "rbegin", rval = nil, args = { } },
            { name = "rend", rval = nil, args = { } },
            { name = "size", rval = "int", args = { } },
            { name = "stacks_with", rval = "item&", args = { "item" } },
            { name = "stored_volume", rval = "units::volume", args = { } },
        }
    },
    martialart = {
        headers = { "martialarts.h" },
        string_id = "matype_id",
        attributes = {
            -- martialart::was_loaded skipped because it's blocked,
            arm_block = { type = "int", writable = true },
            arm_block_with_bio_armor_arms = { type = "bool", writable = true },
            description = { type = "string", writable = true },
            force_unarmed = { type = "bool", writable = true },
            id = { type = "matype_id", writable = true },
            leg_block = { type = "int", writable = true },
            leg_block_with_bio_armor_legs = { type = "bool", writable = true },
            name = { type = "string", writable = true },
            strictly_unarmed = { type = "bool", writable = true },
        },
        functions = {
            -- martialart::load ignored because: unhandled type JsonObject &[CXType_LValueReference] as argument (JsonObject &[CXType_LValueReference]),
            { name = "apply_onattack_buffs", rval = nil, args = { "player" } },
            { name = "apply_onblock_buffs", rval = nil, args = { "player" } },
            { name = "apply_ondodge_buffs", rval = nil, args = { "player" } },
            { name = "apply_ongethit_buffs", rval = nil, args = { "player" } },
            { name = "apply_onhit_buffs", rval = nil, args = { "player" } },
            { name = "apply_onmove_buffs", rval = nil, args = { "player" } },
            { name = "apply_static_buffs", rval = nil, args = { "player" } },
            { name = "has_technique", rval = "bool", args = { "player", "matec_id" } },
            { name = "has_weapon", rval = "bool", args = { "string" } },
            { name = "weapon_valid", rval = "bool", args = { "item" } },
        }
    },
    material_type = {
        headers = { "material.h" },
        string_id = "material_id",
        attributes = {
            -- material_type::was_loaded skipped because it's blocked,
            id = { type = "material_id", writable = true },
        },
        functions = {
            -- material_type::load ignored because: unhandled type JsonObject &[CXType_LValueReference] as argument (JsonObject &[CXType_LValueReference]),
            { name = "acid_resist", rval = "int", args = { } },
            { name = "bash_dmg_verb", rval = "string", args = { } },
            { name = "bash_resist", rval = "int", args = { } },
            { name = "burn_data", rval = nil, args = { "int" } },
            { name = "burn_products", rval = nil, args = { } },
            { name = "check", rval = nil, args = { } },
            { name = "chip_resist", rval = "int", args = { } },
            { name = "cut_dmg_verb", rval = "string", args = { } },
            { name = "cut_resist", rval = "int", args = { } },
            { name = "dam_resist", rval = "int", args = { "damage_type" } },
            { name = "density", rval = "int", args = { } },
            { name = "dmg_adj", rval = "string", args = { "int" } },
            { name = "edible", rval = "bool", args = { } },
            { name = "elec_resist", rval = "int", args = { } },
            { name = "fire_resist", rval = "int", args = { } },
            { name = "ident", rval = "material_id", args = { } },
            { name = "name", rval = "string", args = { } },
            { name = "repaired_with", rval = "string", args = { } },
            { name = "salvaged_into", rval = "string", args = { } },
            { name = "soft", rval = "bool", args = { } },
            { name = "vitamin", rval = "float", args = { "vitamin_id" } },
        }
    },
    mongroup = {
        headers = { "mongroup.h" },
        attributes = {
            diffuse = { type = "bool", writable = true },
            dying = { type = "bool", writable = true },
            horde = { type = "bool", writable = true },
            horde_behaviour = { type = "string", writable = true },
            interest = { type = "int", writable = true },
            population = { type = "int", writable = true },
            pos = { type = "tripoint", writable = true },
            radius = { type = "int", writable = true },
            target = { type = "tripoint", writable = true },
            type = { type = "mongroup_id", writable = true },
        },
        functions = {
            -- mongroup::deserialize ignored because: unhandled type JsonIn &[CXType_LValueReference] as argument (JsonIn &[CXType_LValueReference]),
            -- mongroup::deserialize_legacy ignored because: unhandled type JsonIn &[CXType_LValueReference] as argument (JsonIn &[CXType_LValueReference]),
            -- mongroup::serialize ignored because: unhandled type JsonOut &[CXType_LValueReference] as argument (JsonOut &[CXType_LValueReference]),
            { name = "clear", rval = nil, args = { } },
            { name = "dec_interest", rval = nil, args = { "int" } },
            { name = "empty", rval = "bool", args = { } },
            { name = "inc_interest", rval = nil, args = { "int" } },
            { name = "is_safe", rval = "bool", args = { } },
            { name = "set_interest", rval = nil, args = { "int" } },
            { name = "set_target", rval = nil, args = { "int", "int" } },
            { name = "wander", rval = nil, args = { "overmap" } },
        }
    },
    monster = {
        headers = { "monster.h", "units.h", "color.h", "item.h" },
        parent = "Creature",
        attributes = {
            -- monster::ammo ignored because: unhandled type std::map<std::string, int>[CXType_Elaborated] as member (std::map<std::__cxx11::basic_string<char>, int, std::less<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, int> > >[CXType_Record]),
            -- monster::faction ignored because: unhandled type int_id<monfaction>[CXType_Unexposed] as member (int_id<monfaction>[CXType_Record]),
            anger = { type = "int", writable = true },
            friendly = { type = "int", writable = true },
            hallucination = { type = "bool", writable = true },
            ignoring = { type = "int", writable = true },
            last_updated = { type = "time_point", writable = true },
            made_footstep = { type = "bool", writable = true },
            mission_id = { type = "int", writable = true },
            morale = { type = "int", writable = true },
            no_corpse_quiet = { type = "bool", writable = true },
            no_extra_death_drops = { type = "bool", writable = true },
            staircount = { type = "int", writable = true },
            type = { type = "mtype", writable = true },
            unique_name = { type = "string", writable = true },
            wander_pos = { type = "tripoint", writable = true },
            wandf = { type = "int", writable = true },
        },
        functions = {
            -- monster::absorb_hit ignored because: unhandled type damage_instance &[CXType_LValueReference] as argument (damage_instance &[CXType_LValueReference]),
            -- monster::add_msg_if_npc ignored because: unhandled type game_message_type[CXType_Enum] as argument (game_message_type[CXType_Enum]),
            -- monster::add_msg_player_or_npc ignored because: unhandled type game_message_type[CXType_Enum] as argument (game_message_type[CXType_Enum]),
            -- monster::block_hit ignored because: unhandled type damage_instance &[CXType_LValueReference] as argument (damage_instance &[CXType_LValueReference]),
            -- monster::deal_damage_handle_type ignored because: unhandled type const damage_unit &[CXType_LValueReference] as argument (const damage_unit &[CXType_LValueReference]),
            -- monster::deal_projectile_attack ignored because: unhandled type dealt_projectile_attack &[CXType_LValueReference] as argument (dealt_projectile_attack &[CXType_LValueReference]),
            -- monster::deserialize ignored because: unhandled type JsonIn &[CXType_LValueReference] as argument (JsonIn &[CXType_LValueReference]),
            -- monster::get_HP_Bar ignored because: unhandled type std::string &[CXType_LValueReference] as argument (std::__cxx11::basic_string<char> &[CXType_LValueReference]),
            -- monster::has_flag ignored because: unhandled type const m_flag[CXType_Enum] as argument (const m_flag[CXType_Enum]),
            -- monster::on_hit ignored because: unhandled type const dealt_projectile_attack *const[CXType_Pointer] as argument (const dealt_projectile_attack *const[CXType_Pointer]),
            -- monster::operator= ignored because: operator,
            -- monster::operator= ignored because: unhandled type monster &&[CXType_RValueReference] as argument (monster &&[CXType_RValueReference]),
            -- monster::print_info ignored because: unhandled type const catacurses::window &[CXType_LValueReference] as argument (const catacurses::window &[CXType_LValueReference]),
            -- monster::process_trigger ignored because: unhandled type monster_trigger[CXType_Enum] as argument (monster_trigger[CXType_Enum]),
            -- monster::serialize ignored because: unhandled type JsonOut &[CXType_LValueReference] as argument (JsonOut &[CXType_LValueReference]),
            { name = "add_item", rval = nil, args = { "item" } },
            { name = "attack_at", rval = "bool", args = { "tripoint" } },
            { name = "attack_target", rval = "Creature&", args = { } },
            { name = "attitude", rval = nil, args = { "Character" } },
            { name = "bash_at", rval = "bool", args = { "tripoint" } },
            { name = "bash_estimate", rval = "int", args = { } },
            { name = "bash_skill", rval = "int", args = { } },
            { name = "calc_climb_cost", rval = "int", args = { "tripoint", "tripoint" } },
            { name = "calc_movecost", rval = "int", args = { "tripoint", "tripoint" } },
            { name = "can_act", rval = "bool", args = { } },
            { name = "can_drown", rval = "bool", args = { } },
            { name = "can_hear", rval = "bool", args = { } },
            { name = "can_move_to", rval = "bool", args = { "tripoint" } },
            { name = "can_see", rval = "bool", args = { } },
            { name = "can_submerge", rval = "bool", args = { } },
            { name = "can_upgrade", rval = "bool", args = { } },
            { name = "color_with_effects", rval = "nc_color", args = { } },
            { name = "die_in_explosion", rval = nil, args = { "Creature" } },
            { name = "disable_special", rval = nil, args = { "string" } },
            { name = "drop_items_on_death", rval = nil, args = { } },
            { name = "explode", rval = nil, args = { } },
            { name = "footsteps", rval = nil, args = { "tripoint" } },
            { name = "get_attitude", rval = nil, args = { } },
            { name = "get_effect_status", rval = "string", args = { } },
            { name = "group_bash_skill", rval = "int", args = { "tripoint" } },
            { name = "hasten_upgrade", rval = nil, args = { } },
            { name = "heal", rval = "int", args = { "int", "bool" } },
            { name = "hear_sound", rval = nil, args = { "tripoint", "int", "int" } },
            { name = "init_from_item", rval = nil, args = { "item" } },
            { name = "is_dead", rval = "bool", args = { } },
            { name = "is_fleeing", rval = "bool", args = { "player" } },
            { name = "make_ally", rval = nil, args = { "monster" } },
            { name = "make_friendly", rval = nil, args = { } },
            { name = "make_fungus", rval = "bool", args = { } },
            { name = "melee_attack", rval = nil, args = { "Creature" } },
            { name = "melee_attack", rval = nil, args = { "Creature", "float" } },
            { name = "move", rval = nil, args = { } },
            { name = "move_target", rval = "tripoint", args = { } },
            { name = "move_to", rval = "bool", args = { "tripoint", "bool", "float" } },
            { name = "name", rval = "string", args = { "int" } },
            { name = "name_with_armor", rval = "string", args = { } },
            { name = "on_load", rval = nil, args = { } },
            { name = "on_unload", rval = nil, args = { } },
            { name = "poly", rval = nil, args = { "mtype_id" } },
            { name = "process_triggers", rval = nil, args = { } },
            { name = "push_to", rval = "bool", args = { "tripoint", "int", "int" } },
            { name = "rate_target", rval = "float", args = { "Creature", "float", "bool" } },
            { name = "reset_special", rval = nil, args = { "string" } },
            { name = "reset_special_rng", rval = nil, args = { "string" } },
            { name = "scent_move", rval = "tripoint", args = { } },
            { name = "set_dest", rval = nil, args = { "tripoint" } },
            { name = "set_hp", rval = nil, args = { "int" } },
            { name = "set_special", rval = nil, args = { "string", "int" } },
            { name = "shift", rval = nil, args = { "int", "int" } },
            { name = "spawn", rval = nil, args = { "tripoint" } },
            { name = "stumble", rval = nil, args = { } },
            { name = "to_item", rval = "item", args = { } },
            { name = "try_upgrade", rval = nil, args = { "bool" } },
            { name = "turns_to_reach", rval = "int", args = { "int", "int" } },
            { name = "unset_dest", rval = nil, args = { } },
            { name = "wander", rval = "bool", args = { } },
            { name = "wander_to", rval = nil, args = { "tripoint", "int" } },
            { name = "will_reach", rval = "bool", args = { "int", "int" } },
        }
    },
    mtype = {
        headers = { "mtype.h" },
        string_id = "mtype_id",
        attributes = {
            -- mtype::bitanger ignored because: unhandled type std::bitset<N_MONSTER_TRIGGERS>[CXType_Elaborated] as member (std::bitset<10>[CXType_Record]),
            -- mtype::bitfear ignored because: unhandled type std::bitset<N_MONSTER_TRIGGERS>[CXType_Elaborated] as member (std::bitset<10>[CXType_Record]),
            -- mtype::bitflags ignored because: unhandled type std::bitset<MF_MAX>[CXType_Elaborated] as member (std::bitset<88>[CXType_Record]),
            -- mtype::bitplacate ignored because: unhandled type std::bitset<N_MONSTER_TRIGGERS>[CXType_Elaborated] as member (std::bitset<10>[CXType_Record]),
            -- mtype::default_faction ignored because: unhandled type int_id<monfaction>[CXType_Unexposed] as member (int_id<monfaction>[CXType_Record]),
            -- mtype::harvest ignored because: unhandled type string_id<harvest_list>[CXType_Unexposed] as member (string_id<harvest_list>[CXType_Record]),
            -- mtype::melee_damage ignored because: unhandled type damage_instance[CXType_Record] as member (damage_instance[CXType_Record]),
            -- mtype::path_settings ignored because: unhandled type pathfinding_settings[CXType_Record] as member (pathfinding_settings[CXType_Record]),
            -- mtype::sp_defense ignored because: unhandled type void (*)(monster &, Creature *, const dealt_projectile_attack *)[CXType_Pointer] as member (void (*)(monster &, Creature *, const dealt_projectile_attack *)[CXType_Pointer]),
            -- mtype::special_attacks ignored because: unhandled type std::map<std::string, mtype_special_attack>[CXType_Elaborated] as member (std::map<std::__cxx11::basic_string<char>, mtype_special_attack, std::less<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, mtype_special_attack> > >[CXType_Record]),
            -- mtype::starting_ammo ignored because: unhandled type std::map<std::string, int>[CXType_Elaborated] as member (std::map<std::__cxx11::basic_string<char>, int, std::less<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, int> > >[CXType_Record]),
            -- mtype::was_loaded skipped because it's blocked,
            agro = { type = "int", writable = true },
            armor_acid = { type = "int", writable = true },
            armor_bash = { type = "int", writable = true },
            armor_cut = { type = "int", writable = true },
            armor_fire = { type = "int", writable = true },
            armor_stab = { type = "int", writable = true },
            attack_cost = { type = "int", writable = true },
            bash_skill = { type = "int", writable = true },
            burn_into = { type = "mtype_id", writable = true },
            color = { type = "nc_color", writable = true },
            death_drops = { type = "string", writable = true },
            def_chance = { type = "int", writable = true },
            difficulty = { type = "int", writable = true },
            half_life = { type = "int", writable = true },
            hp = { type = "int", writable = true },
            id = { type = "mtype_id", writable = true },
            luminance = { type = "float", writable = true },
            melee_dice = { type = "int", writable = true },
            melee_sides = { type = "int", writable = true },
            melee_skill = { type = "int", writable = true },
            morale = { type = "int", writable = true },
            phase = { type = "phase_id", writable = true },
            revert_to_itype = { type = "string", writable = true },
            size = { type = "m_size", writable = true },
            sk_dodge = { type = "int", writable = true },
            speed = { type = "int", writable = true },
            sym = { type = "string", writable = true },
            upgrade_group = { type = "mongroup_id", writable = true },
            upgrade_into = { type = "mtype_id", writable = true },
            upgrades = { type = "bool", writable = true },
            vision_day = { type = "int", writable = true },
            vision_night = { type = "int", writable = true },
        },
        functions = {
            -- mtype::has_anger_trigger ignored because: unhandled type monster_trigger[CXType_Enum] as argument (monster_trigger[CXType_Enum]),
            -- mtype::has_fear_trigger ignored because: unhandled type monster_trigger[CXType_Enum] as argument (monster_trigger[CXType_Enum]),
            -- mtype::has_flag ignored because: unhandled type m_flag[CXType_Enum] as argument (m_flag[CXType_Enum]),
            -- mtype::has_placate_trigger ignored because: unhandled type monster_trigger[CXType_Enum] as argument (monster_trigger[CXType_Enum]),
            -- mtype::in_species ignored because: unhandled type const species_id &[CXType_LValueReference] as argument (const string_id<species_type> &[CXType_LValueReference]),
            -- mtype::in_species ignored because: unhandled type const species_type &[CXType_LValueReference] as argument (const species_type &[CXType_LValueReference]),
            -- mtype::load ignored because: unhandled type JsonObject &[CXType_LValueReference] as argument (JsonObject &[CXType_LValueReference]),
            { name = "bloodType", rval = "field_id", args = { } },
            { name = "get_description", rval = "string", args = { } },
            { name = "get_meat_chunks_count", rval = "int", args = { } },
            { name = "get_meat_itype", rval = "string", args = { } },
            { name = "gibType", rval = "field_id", args = { } },
            { name = "has_flag", rval = "bool", args = { "string" } },
            { name = "has_special_attack", rval = "bool", args = { "string" } },
            { name = "in_category", rval = "bool", args = { "string" } },
            { name = "made_of", rval = "bool", args = { "material_id" } },
            { name = "nname", rval = "string", args = { "int" } },
            { name = "same_species", rval = "bool", args = { "mtype" } },
            { name = "set_flag", rval = nil, args = { "string", "bool" } },
        }
    },
    mutation_branch = {
        headers = { "mutation.h", "color.h" },
        string_id = "trait_id",
        attributes = {
            -- mutation_branch::armor ignored because: unhandled type std::map<body_part, resistances>[CXType_Elaborated] as member (std::map<body_part, resistances, std::less<body_part>, std::allocator<std::pair<const body_part, resistances> > >[CXType_Record]),
            -- mutation_branch::encumbrance_always ignored because: unhandled type std::map<body_part, int>[CXType_Elaborated] as member (std::map<body_part, int, std::less<body_part>, std::allocator<std::pair<const body_part, int> > >[CXType_Record]),
            -- mutation_branch::encumbrance_covered ignored because: unhandled type std::map<body_part, int>[CXType_Elaborated] as member (std::map<body_part, int, std::less<body_part>, std::allocator<std::pair<const body_part, int> > >[CXType_Record]),
            -- mutation_branch::mods ignored because: unhandled type std::unordered_map<std::pair<bool, std::string>, int>[CXType_Elaborated] as member (std::unordered_map<std::pair<bool, std::__cxx11::basic_string<char> >, int, std::hash<std::pair<bool, std::__cxx11::basic_string<char> > >, std::equal_to<std::pair<bool, std::__cxx11::basic_string<char> > >, std::allocator<std::pair<const std::pair<bool, std::__cxx11::basic_string<char> >, int> > >[CXType_Record]),
            -- mutation_branch::protection ignored because: unhandled type std::map<body_part, tripoint>[CXType_Elaborated] as member (std::map<body_part, tripoint, std::less<body_part>, std::allocator<std::pair<const body_part, tripoint> > >[CXType_Record]),
            -- mutation_branch::vitamin_rates ignored because: unhandled type std::map<vitamin_id, time_duration>[CXType_Elaborated] as member (std::map<string_id<vitamin>, time_duration, std::less<string_id<vitamin> >, std::allocator<std::pair<const string_id<vitamin>, time_duration> > >[CXType_Record]),
            activated = { type = "bool", writable = true },
            allow_soft_gear = { type = "bool", writable = true },
            bodytemp_max = { type = "int", writable = true },
            bodytemp_min = { type = "int", writable = true },
            bodytemp_sleep = { type = "int", writable = true },
            cooldown = { type = "int", writable = true },
            cost = { type = "int", writable = true },
            description = { type = "string", writable = true },
            destroys_gear = { type = "bool", writable = true },
            fatigue = { type = "bool", writable = true },
            fatigue_modifier = { type = "float", writable = true },
            fatigue_regen_modifier = { type = "float", writable = true },
            healing_awake = { type = "float", writable = true },
            healing_resting = { type = "float", writable = true },
            hp_adjustment = { type = "float", writable = true },
            hp_modifier = { type = "float", writable = true },
            hp_modifier_secondary = { type = "float", writable = true },
            hunger = { type = "bool", writable = true },
            metabolism_modifier = { type = "float", writable = true },
            mixed_effect = { type = "bool", writable = true },
            name = { type = "string", writable = true },
            points = { type = "int", writable = true },
            profession = { type = "bool", writable = true },
            purifiable = { type = "bool", writable = true },
            spawn_item = { type = "string", writable = true },
            spawn_item_message = { type = "string", writable = true },
            stamina_regen_modifier = { type = "float", writable = true },
            startingtrait = { type = "bool", writable = true },
            starts_active = { type = "bool", writable = true },
            thirst = { type = "bool", writable = true },
            thirst_modifier = { type = "float", writable = true },
            threshold = { type = "bool", writable = true },
            ugliness = { type = "int", writable = true },
            valid = { type = "bool", writable = true },
            visibility = { type = "int", writable = true },
        },
        functions = {
            -- static mutation_branch::add_entry ignored because: unhandled type Trait_group &[CXType_LValueReference] as argument (Trait_group &[CXType_LValueReference]),
            -- static mutation_branch::check_consistency skipped because it's blocked,
            -- static mutation_branch::finalize skipped because it's blocked,
            -- static mutation_branch::get_group ignored because: unhandled type const trait_group::Trait_group_tag &[CXType_LValueReference] as argument (const string_id<Trait_group> &[CXType_LValueReference]),
            -- static mutation_branch::load ignored because: unhandled type JsonObject &[CXType_LValueReference] as argument (JsonObject &[CXType_LValueReference]),
            -- static mutation_branch::load_trait_blacklist ignored because: unhandled type JsonObject &[CXType_LValueReference] as argument (JsonObject &[CXType_LValueReference]),
            -- static mutation_branch::load_trait_group ignored because: unhandled type JsonArray &[CXType_LValueReference] as argument (JsonArray &[CXType_LValueReference]),
            -- static mutation_branch::load_trait_group ignored because: unhandled type JsonObject &[CXType_LValueReference] as argument (JsonObject &[CXType_LValueReference]),
            { name = "conflicts_with_item", rval = "bool", args = { "item" } },
            { name = "damage_resistance", rval = nil, args = { "body_part" } },
            { name = "finalize_trait_blacklist", static = true, rval = nil, args = { } },
            { name = "get_all", static = true, rval = nil, args = { } },
            { name = "get_all_group_names", static = true, rval = nil, args = { } },
            { name = "get_display_color", rval = "nc_color", args = { } },
            { name = "get_name", static = true, rval = "string", args = { "trait_id" } },
            { name = "reset_all", static = true, rval = nil, args = { } },
            { name = "trait_is_blacklisted", static = true, rval = "bool", args = { "trait_id" } },
        }
    },
    nc_color = {
        headers = { "color.h" },
        new = {
            { },
        },
        by_value = true,
        attributes = {
        },
        functions = {
            -- nc_color::deserialize ignored because: unhandled type JsonIn &[CXType_LValueReference] as argument (JsonIn &[CXType_LValueReference]),
            -- nc_color::serialize ignored because: unhandled type JsonOut &[CXType_LValueReference] as argument (JsonOut &[CXType_LValueReference]),
            { name = "blink", rval = "nc_color", args = { } },
            { name = "bold", rval = "nc_color", args = { } },
            { name = "from_color_pair_index", static = true, rval = "nc_color", args = { "int" } },
            { name = "is_blink", rval = "bool", args = { } },
            { name = "is_bold", rval = "bool", args = { } },
            { name = "is_italic", rval = "bool", args = { } },
            { name = "is_underline", rval = "bool", args = { } },
            { name = "italic", rval = "nc_color", args = { } },
            { name = "to_color_pair_index", rval = "int", args = { } },
            { name = "underline", rval = "nc_color", args = { } },
        }
    },
    npc = {
        headers = { "npc.h", "units.h", "color.h", "projectile.h", "dispersion.h" },
        parent = "player",
        attributes = {
            -- npc::chatbin ignored because: unhandled type npc_chatbin[CXType_Record] as member (npc_chatbin[CXType_Record]),
            -- npc::fac_id ignored because: unhandled type string_id<faction>[CXType_Unexposed] as member (string_id<faction>[CXType_Record]),
            -- npc::miss_id ignored because: unhandled type string_id<mission_type>[CXType_Unexposed] as member (string_id<mission_type>[CXType_Record]),
            -- npc::mission ignored because: unhandled type npc_mission[CXType_Enum] as member (npc_mission[CXType_Enum]),
            -- npc::my_fac ignored because: unhandled type faction *[CXType_Pointer] as member (faction *[CXType_Pointer]),
            -- npc::myclass ignored because: unhandled type string_id<npc_class>[CXType_Unexposed] as member (string_id<npc_class>[CXType_Record]),
            -- npc::op_of_u ignored because: unhandled type npc_opinion[CXType_Record] as member (npc_opinion[CXType_Record]),
            -- npc::personality ignored because: unhandled type npc_personality[CXType_Record] as member (npc_personality[CXType_Record]),
            -- npc::rules ignored because: unhandled type npc_follower_rules[CXType_Record] as member (npc_follower_rules[CXType_Record]),
            companion_mission_time = { type = "time_point", writable = true },
            fetching_item = { type = "bool", writable = true },
            goal = { type = "tripoint", writable = true },
            guard_pos = { type = "tripoint", writable = true },
            has_new_items = { type = "bool", writable = true },
            hit_by_player = { type = "bool", writable = true },
            idz = { type = "string", writable = true },
            last_player_seen_pos = { type = "tripoint", writable = true },
            last_seen_player_turn = { type = "int", writable = true },
            last_updated = { type = "time_point", writable = true },
            marked_for_death = { type = "bool", writable = true },
            patience = { type = "int", writable = true },
            pulp_location = { type = "tripoint", writable = true },
            restock = { type = "time_point", writable = true },
            wander_pos = { type = "tripoint", writable = true },
            wander_time = { type = "int", writable = true },
            wanted_item_pos = { type = "tripoint", writable = true },
            worst_item_value = { type = "int", writable = true },
        },
        functions = {
            -- npc::add_msg_if_npc ignored because: unhandled type game_message_type[CXType_Enum] as argument (game_message_type[CXType_Enum]),
            -- npc::add_msg_if_player ignored because: unhandled type game_message_type[CXType_Enum] as argument (game_message_type[CXType_Enum]),
            -- npc::add_msg_player_or_npc ignored because: unhandled type game_message_type[CXType_Enum] as argument (game_message_type[CXType_Enum]),
            -- npc::add_msg_player_or_say ignored because: unhandled type game_message_type[CXType_Enum] as argument (game_message_type[CXType_Enum]),
            -- npc::add_new_mission ignored because: unhandled type mission *[CXType_Pointer] as argument (mission *[CXType_Pointer]),
            -- npc::confident_gun_mode_range ignored because: unhandled type const gun_mode &[CXType_LValueReference] as argument (const gun_mode &[CXType_LValueReference]),
            -- npc::deserialize ignored because: unhandled type JsonIn &[CXType_LValueReference] as argument (JsonIn &[CXType_LValueReference]),
            -- npc::dispose_item ignored because: unhandled type item_location &&[CXType_RValueReference] as argument (item_location &&[CXType_RValueReference]),
            -- npc::execute_action ignored because: unhandled type npc_action[CXType_Enum] as argument (npc_action[CXType_Enum]),
            -- npc::fac_has_job ignored because: unhandled type faction_job[CXType_Enum] as argument (faction_job[CXType_Enum]),
            -- npc::fac_has_value ignored because: unhandled type faction_value[CXType_Enum] as argument (faction_value[CXType_Enum]),
            -- npc::load_npc_template ignored because: unhandled type const string_id<npc_template> &[CXType_LValueReference] as argument (const string_id<npc_template> &[CXType_LValueReference]),
            -- npc::operator= ignored because: operator,
            -- npc::operator= ignored because: unhandled type npc &&[CXType_RValueReference] as argument (npc &&[CXType_RValueReference]),
            -- npc::print_info ignored because: unhandled type const catacurses::window &[CXType_LValueReference] as argument (const catacurses::window &[CXType_LValueReference]),
            -- npc::randomize ignored because: unhandled type const npc_class_id &[CXType_LValueReference] as argument (const string_id<npc_class> &[CXType_LValueReference]),
            -- npc::randomize_from_faction ignored because: unhandled type faction *[CXType_Pointer] as argument (faction *[CXType_Pointer]),
            -- npc::serialize ignored because: unhandled type JsonOut &[CXType_LValueReference] as argument (JsonOut &[CXType_LValueReference]),
            -- npc::set_attitude ignored because: unhandled type npc_attitude[CXType_Enum] as argument (npc_attitude[CXType_Enum]),
            -- npc::set_fac ignored because: unhandled type const string_id<faction> &[CXType_LValueReference] as argument (const string_id<faction> &[CXType_LValueReference]),
            -- npc::starting_weapon ignored because: unhandled type const npc_class_id &[CXType_LValueReference] as argument (const string_id<npc_class> &[CXType_LValueReference]),
            -- static npc::get_location_for ignored because: unhandled type const npc_need &[CXType_LValueReference] as argument (const npc_need &[CXType_LValueReference]),
            -- static npc::get_need_str_id ignored because: unhandled type const npc_need &[CXType_LValueReference] as argument (const npc_need &[CXType_LValueReference]),
            { name = "activate_item", rval = nil, args = { "int" } },
            { name = "address_needs", rval = nil, args = { "float" } },
            { name = "address_needs", rval = nil, args = { } },
            { name = "address_player", rval = nil, args = { } },
            { name = "adjust_worn", rval = "bool", args = { } },
            { name = "aim", rval = nil, args = { } },
            { name = "alt_attack", rval = "bool", args = { } },
            { name = "assess_danger", rval = nil, args = { } },
            { name = "assigned_missions_value", rval = "int", args = { } },
            { name = "average_damage_dealt", rval = "float", args = { } },
            { name = "avoid_friendly_fire", rval = nil, args = { } },
            { name = "best_skill", rval = "skill_id", args = { } },
            { name = "bravery_check", rval = "bool", args = { "int" } },
            { name = "can_move_to", rval = "bool", args = { "tripoint", "bool" } },
            { name = "can_reload_current", rval = "bool", args = { } },
            { name = "character_danger", rval = "float", args = { "Character" } },
            { name = "choose_target", rval = nil, args = { } },
            { name = "complain", rval = "bool", args = { } },
            { name = "confidence_mult", rval = "float", args = { } },
            { name = "confident_shoot_range", rval = "int", args = { "item", "int" } },
            { name = "confident_throw_range", rval = "int", args = { "item", "Creature" } },
            { name = "consume_food", rval = "bool", args = { } },
            { name = "current_target", rval = "Creature&", args = { } },
            { name = "danger_assessment", rval = "float", args = { } },
            { name = "decide_needs", rval = nil, args = { } },
            { name = "do_pulp", rval = "bool", args = { } },
            { name = "do_reload", rval = nil, args = { "item" } },
            { name = "drop_items", rval = nil, args = { "int", "int" } },
            { name = "emergency", rval = "bool", args = { "float" } },
            { name = "emergency", rval = "bool", args = { } },
            { name = "enough_time_to_reload", rval = "bool", args = { "item" } },
            { name = "escape_explosion", rval = nil, args = { } },
            { name = "evaluate_enemy", rval = "float", args = { "Creature" } },
            { name = "find_corpse_to_pulp", rval = "bool", args = { } },
            { name = "find_item", rval = nil, args = { } },
            { name = "find_reloadable", rval = "item", args = { } },
            { name = "find_reloadable", rval = "item&", args = { } },
            { name = "find_usable_ammo", rval = nil, args = { "item" } },
            { name = "follow_distance", rval = "int", args = { } },
            { name = "form_opinion", rval = nil, args = { "player" } },
            { name = "get_attitude", rval = nil, args = { } },
            { name = "get_companion_mission", rval = "string", args = { } },
            { name = "get_healing_item", rval = "item&", args = { "bool", "bool", "bool", "bool" } },
            { name = "get_monster_faction", rval = nil, args = { } },
            { name = "go_to_destination", rval = nil, args = { } },
            { name = "guaranteed_hostile", rval = "bool", args = { } },
            { name = "guard_current_pos", rval = nil, args = { } },
            { name = "has_companion_mission", rval = "bool", args = { } },
            { name = "has_destination", rval = "bool", args = { } },
            { name = "has_healing_item", rval = "bool", args = { "bool", "bool", "bool" } },
            { name = "has_item_whitelist", rval = "bool", args = { } },
            { name = "has_painkiller", rval = "bool", args = { } },
            { name = "heal_player", rval = nil, args = { "player" } },
            { name = "heal_self", rval = nil, args = { } },
            { name = "hostile_anger_level", rval = "int", args = { } },
            { name = "is_active", rval = "bool", args = { } },
            { name = "is_dead", rval = "bool", args = { } },
            { name = "is_enemy", rval = "bool", args = { } },
            { name = "is_following", rval = "bool", args = { } },
            { name = "is_friend", rval = "bool", args = { } },
            { name = "is_guarding", rval = "bool", args = { } },
            { name = "is_leader", rval = "bool", args = { } },
            { name = "is_minion", rval = "bool", args = { } },
            { name = "item_name_whitelisted", rval = "bool", args = { "string" } },
            { name = "item_whitelisted", rval = "bool", args = { "item" } },
            { name = "long_term_goal_action", rval = nil, args = { } },
            { name = "look_for_player", rval = nil, args = { "player" } },
            { name = "make_angry", rval = nil, args = { } },
            { name = "method_of_attack", rval = nil, args = { } },
            { name = "method_of_fleeing", rval = nil, args = { } },
            { name = "minimum_item_value", rval = "int", args = { } },
            { name = "move", rval = nil, args = { } },
            { name = "move_away_from", rval = nil, args = { "tripoint", "bool" } },
            { name = "move_pause", rval = nil, args = { } },
            { name = "move_to", rval = nil, args = { "tripoint", "bool" } },
            { name = "move_to_next", rval = nil, args = { } },
            { name = "mug_player", rval = nil, args = { "player" } },
            { name = "on_attacked", rval = nil, args = { "Creature" } },
            { name = "on_load", rval = nil, args = { } },
            { name = "on_unload", rval = nil, args = { } },
            { name = "opinion_text", rval = "string", args = { } },
            { name = "pick_long_term_goal", rval = nil, args = { } },
            { name = "pick_talk_topic", rval = "string", args = { "player" } },
            { name = "pick_up_item", rval = nil, args = { } },
            { name = "place_on_map", rval = nil, args = { } },
            { name = "reach_destination", rval = nil, args = { } },
            { name = "regen_ai_cache", rval = nil, args = { } },
            { name = "reset_companion_mission", rval = nil, args = { } },
            { name = "saw_player_recently", rval = "bool", args = { } },
            { name = "say", rval = nil, args = { "string" } },
            { name = "scan_new_items", rval = "bool", args = { } },
            { name = "set_companion_mission", rval = nil, args = { "npc", "string" } },
            { name = "set_destination", rval = nil, args = { } },
            { name = "shift", rval = nil, args = { "int", "int" } },
            { name = "shop_restock", rval = nil, args = { } },
            { name = "short_description", rval = "string", args = { } },
            { name = "smash_ability", rval = "int", args = { } },
            { name = "spawn_at_precise", rval = nil, args = { "point", "tripoint" } },
            { name = "spawn_at_sm", rval = nil, args = { "int", "int", "int" } },
            { name = "take_painkiller", rval = nil, args = { } },
            { name = "talk_to_u", rval = nil, args = { } },
            { name = "took_painkiller", rval = "bool", args = { } },
            { name = "turned_hostile", rval = "bool", args = { } },
            { name = "update_path", rval = "bool", args = { "tripoint", "bool", "bool" } },
            { name = "update_worst_item_value", rval = nil, args = { } },
            { name = "use_painkiller", rval = nil, args = { } },
            { name = "value", rval = "int", args = { "item" } },
            { name = "value", rval = "int", args = { "item", "int" } },
            { name = "vehicle_danger", rval = "float", args = { "int" } },
            { name = "wants_to_buy", rval = "bool", args = { "item" } },
            { name = "wants_to_buy", rval = "bool", args = { "item", "int", "int" } },
            { name = "wants_to_sell", rval = "bool", args = { "item" } },
            { name = "wants_to_sell", rval = "bool", args = { "item", "int", "int" } },
            { name = "wear_if_wanted", rval = "bool", args = { "item" } },
            { name = "wield_best_melee", rval = nil, args = { } },
            { name = "wield_better_weapon", rval = "bool", args = { } },
            { name = "will_accept_from_player", rval = "bool", args = { "item" } },
            { name = "wont_hit_friend", rval = "bool", args = { "tripoint", "item", "bool" } },
        }
    },
    overmap = {
        headers = { "overmap.h" },
        attributes = {
            -- overmap::vehicles ignored because: unhandled type std::map<int, om_vehicle>[CXType_Elaborated] as member (std::map<int, om_vehicle, std::less<int>, std::allocator<std::pair<const int, om_vehicle> > >[CXType_Record]),
        },
        functions = {
            -- overmap::for_each_npc ignored because: unhandled type std::function<void (const npc &)>[CXType_Elaborated] as argument (std::function<void (const npc &)>[CXType_Record]),
            -- overmap::for_each_npc ignored because: unhandled type std::function<void (npc &)>[CXType_Elaborated] as argument (std::function<void (npc &)>[CXType_Record]),
            -- overmap::get_npcs ignored because: unhandled type const std::function<bool (const npc &)> &[CXType_LValueReference] as argument (const std::function<bool (const npc &)> &[CXType_LValueReference]),
            -- overmap::insert_npc ignored because: unhandled type std::shared_ptr<npc>[CXType_Elaborated] as argument (std::shared_ptr<npc>[CXType_Record]),
            -- overmap::monster_check ignored because: unhandled type const std::pair<tripoint, monster> &[CXType_LValueReference] as argument (const std::pair<tripoint, monster> &[CXType_LValueReference]),
            -- overmap::operator= ignored because: operator,
            -- overmap::populate ignored because: unhandled type overmap_special_batch &[CXType_LValueReference] as argument (overmap_special_batch &[CXType_LValueReference]),
            -- overmap::serialize ignored because: unhandled type std::ostream &[CXType_LValueReference] as argument (std::basic_ostream<char> &[CXType_LValueReference]),
            -- overmap::serialize_view ignored because: unhandled type std::ostream &[CXType_LValueReference] as argument (std::basic_ostream<char> &[CXType_LValueReference]),
            -- overmap::set_scent ignored because: unhandled type scent_trace &[CXType_LValueReference] as argument (scent_trace &[CXType_LValueReference]),
            -- overmap::unserialize ignored because: unhandled type std::istream &[CXType_LValueReference] as argument (std::basic_istream<char, std::char_traits<char> > &[CXType_LValueReference]),
            -- overmap::unserialize_legacy ignored because: unhandled type std::istream &[CXType_LValueReference] as argument (std::basic_istream<char, std::char_traits<char> > &[CXType_LValueReference]),
            -- overmap::unserialize_view ignored because: unhandled type std::istream &[CXType_LValueReference] as argument (std::basic_istream<char, std::char_traits<char> > &[CXType_LValueReference]),
            -- overmap::unserialize_view_legacy ignored because: unhandled type std::istream &[CXType_LValueReference] as argument (std::basic_istream<char, std::char_traits<char> > &[CXType_LValueReference]),
            { name = "add_note", rval = nil, args = { "int", "int", "int", "string" } },
            { name = "clear_mon_groups", rval = nil, args = { } },
            { name = "delete_note", rval = nil, args = { "int", "int", "int" } },
            { name = "display_notes", static = true, rval = "point", args = { "int" } },
            { name = "draw_editor", static = true, rval = "tripoint", args = { } },
            { name = "draw_hordes", static = true, rval = "tripoint", args = { } },
            { name = "draw_overmap", static = true, rval = "tripoint", args = { "int" } },
            { name = "draw_overmap", static = true, rval = "tripoint", args = { } },
            { name = "draw_scents", static = true, rval = "tripoint", args = { } },
            { name = "draw_weather", static = true, rval = "tripoint", args = { } },
            { name = "draw_zones", static = true, rval = "tripoint", args = { "tripoint", "tripoint", "int" } },
            { name = "erase_npc", rval = nil, args = { "int" } },
            { name = "explored", rval = nil, args = { "int", "int", "int" } },
            { name = "find_npc", rval = nil, args = { "int" } },
            { name = "find_random_omt", rval = "tripoint", args = { "string" } },
            { name = "get_enabled_specials", rval = nil, args = { } },
            { name = "get_npcs", rval = nil, args = { } },
            { name = "get_settings", rval = nil, args = { } },
            { name = "get_ter", rval = nil, args = { "int", "int", "int" } },
            { name = "get_ter", rval = nil, args = { "tripoint" } },
            { name = "global_base_point", rval = "point", args = { } },
            { name = "has_note", rval = "bool", args = { "int", "int", "int" } },
            { name = "inbounds", static = true, rval = "bool", args = { "int", "int", "int", "int" } },
            { name = "inbounds", static = true, rval = "bool", args = { "tripoint", "int" } },
            { name = "is_explored", rval = "bool", args = { "int", "int", "int" } },
            { name = "mongroup_check", rval = "bool", args = { "mongroup" } },
            { name = "note", rval = "string", args = { "int", "int", "int" } },
            { name = "populate", rval = nil, args = { } },
            { name = "pos", rval = "point", args = { } },
            { name = "save", rval = nil, args = { } },
            { name = "scent_at", rval = nil, args = { "tripoint" } },
            { name = "seen", rval = nil, args = { "int", "int", "int" } },
            { name = "ter", rval = nil, args = { "int", "int", "int" } },
            { name = "ter", rval = nil, args = { "tripoint" } },
        }
    },
    player = {
        headers = { "player.h", "color.h", "projectile.h", "units.h", "npc.h", "dispersion.h" },
        parent = "Character",
        attributes = {
            -- player::activity ignored because: unhandled type player_activity[CXType_Record] as member (player_activity[CXType_Record]),
            -- player::body_wetness ignored because: unhandled type std::array<int, num_bp>[CXType_Elaborated] as member (std::array<int, 12>[CXType_Record]),
            -- player::drench_capacity ignored because: unhandled type std::array<int, num_bp>[CXType_Elaborated] as member (std::array<int, 12>[CXType_Record]),
            -- player::frostbite_timer ignored because: unhandled type std::array<int, num_bp>[CXType_Elaborated] as member (std::array<int, 12>[CXType_Record]),
            -- player::grab_type ignored because: unhandled type object_type[CXType_Enum] as member (object_type[CXType_Enum]),
            -- player::last_craft ignored because: unhandled type pimpl<craft_command>[CXType_Unexposed] as member (pimpl<craft_command>[CXType_Record]),
            -- player::lastrecipe ignored because: unhandled type string_id<recipe>[CXType_Unexposed] as member (string_id<recipe>[CXType_Record]),
            -- player::mut_drench ignored because: unhandled type std::array<std::array<int, NUM_WATER_TOLERANCE>, num_bp>[CXType_Elaborated] as member (std::array<std::array<int, 3>, 12>[CXType_Record]),
            -- player::mutation_category_level ignored because: unhandled type std::map<std::string, int>[CXType_Elaborated] as member (std::map<std::__cxx11::basic_string<char>, int, std::less<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, int> > >[CXType_Record]),
            -- player::prof ignored because: unhandled type const profession *[CXType_Pointer] as member (const profession *[CXType_Pointer]),
            -- player::temp_conv ignored because: unhandled type std::array<int, num_bp>[CXType_Elaborated] as member (std::array<int, 12>[CXType_Record]),
            -- player::temp_cur ignored because: unhandled type std::array<int, num_bp>[CXType_Elaborated] as member (std::array<int, 12>[CXType_Record]),
            blocks_left = { type = "int", writable = true },
            cash = { type = "int", writable = true },
            controlling_vehicle = { type = "bool", writable = true },
            dodges_left = { type = "int", writable = true },
            focus_pool = { type = "int", writable = true },
            grab_point = { type = "tripoint", writable = true },
            in_vehicle = { type = "bool", writable = true },
            keep_hands_free = { type = "bool", writable = true },
            last_batch = { type = "int", writable = true },
            last_climate_control_ret = { type = "bool", writable = true },
            lastconsumed = { type = "string", writable = true },
            lifetime_stats = { type = "stats", writable = true },
            max_power_level = { type = "int", writable = true },
            move_mode = { type = "string", writable = true },
            movecounter = { type = "int", writable = true },
            next_climate_control_check = { type = "time_point", writable = true },
            oxygen = { type = "int", writable = true },
            power_level = { type = "int", writable = true },
            radiation = { type = "int", writable = true },
            reactor_plut = { type = "int", writable = true },
            recoil = { type = "float", writable = true },
            scent = { type = "int", writable = true },
            slow_rad = { type = "int", writable = true },
            stamina = { type = "int", writable = true },
            stim = { type = "int", writable = true },
            style_selected = { type = "matype_id", writable = true },
            tank_plut = { type = "int", writable = true },
            view_offset = { type = "tripoint", writable = true },
            volume = { type = "int", writable = true },
        },
        functions = {
            -- player::absorb_hit ignored because: unhandled type damage_instance &[CXType_LValueReference] as argument (damage_instance &[CXType_LValueReference]),
            -- player::add_bionic ignored because: unhandled type const bionic_id &[CXType_LValueReference] as argument (const string_id<bionic_data> &[CXType_LValueReference]),
            -- player::add_morale ignored because: unhandled type string_id<morale_type_data>[CXType_Unexposed] as argument (string_id<morale_type_data>[CXType_Record]),
            -- player::add_msg_if_player ignored because: unhandled type game_message_type[CXType_Enum] as argument (game_message_type[CXType_Enum]),
            -- player::add_msg_player_or_npc ignored because: unhandled type game_message_type[CXType_Enum] as argument (game_message_type[CXType_Enum]),
            -- player::add_msg_player_or_say ignored because: unhandled type game_message_type[CXType_Enum] as argument (game_message_type[CXType_Enum]),
            -- player::armor_absorb ignored because: unhandled type damage_unit &[CXType_LValueReference] as argument (damage_unit &[CXType_LValueReference]),
            -- player::assign_activity ignored because: unhandled type const player_activity &[CXType_LValueReference] as argument (const player_activity &[CXType_LValueReference]),
            -- player::assign_activity ignored because: unhandled type string_id<activity_type>[CXType_Unexposed] as argument (string_id<activity_type>[CXType_Record]),
            -- player::base_time_to_craft ignored because: unhandled type const recipe &[CXType_LValueReference] as argument (const recipe &[CXType_LValueReference]),
            -- player::bionic_installation_issues ignored because: unhandled type const bionic_id &[CXType_LValueReference] as argument (const string_id<bionic_data> &[CXType_LValueReference]),
            -- player::block_hit ignored because: unhandled type damage_instance &[CXType_LValueReference] as argument (damage_instance &[CXType_LValueReference]),
            -- player::can_decomp_learn ignored because: unhandled type const recipe &[CXType_LValueReference] as argument (const recipe &[CXType_LValueReference]),
            -- player::can_disassemble ignored because: unhandled type const inventory &[CXType_LValueReference] as argument (const inventory &[CXType_LValueReference]),
            -- player::can_make ignored because: unhandled type const recipe *[CXType_Pointer] as argument (const recipe *[CXType_Pointer]),
            -- player::check_eligible_containers_for_crafting ignored because: unhandled type const recipe &[CXType_LValueReference] as argument (const recipe &[CXType_LValueReference]),
            -- player::complete_disassemble ignored because: unhandled type const recipe &[CXType_LValueReference] as argument (const recipe &[CXType_LValueReference]),
            -- player::consume_components_for_craft ignored because: unhandled type const recipe *[CXType_Pointer] as argument (const recipe *[CXType_Pointer]),
            -- player::consume_items ignored because: unhandled type const comp_selection<item_comp> &[CXType_LValueReference] as argument (const comp_selection<item_comp> &[CXType_LValueReference]),
            -- player::consume_tools ignored because: unhandled type const comp_selection<tool_comp> &[CXType_LValueReference] as argument (const comp_selection<tool_comp> &[CXType_LValueReference]),
            -- player::covered_with_flag ignored because: unhandled type const body_part_set &[CXType_LValueReference] as argument (const body_part_set &[CXType_LValueReference]),
            -- player::crafting_speed_multiplier ignored because: unhandled type const recipe &[CXType_LValueReference] as argument (const recipe &[CXType_LValueReference]),
            -- player::create ignored because: unhandled type character_type[CXType_Enum] as argument (character_type[CXType_Enum]),
            -- player::deal_damage ignored because: unhandled type const damage_instance &[CXType_LValueReference] as argument (const damage_instance &[CXType_LValueReference]),
            -- player::deserialize ignored because: unhandled type JsonIn &[CXType_LValueReference] as argument (JsonIn &[CXType_LValueReference]),
            -- player::disp_status ignored because: unhandled type const catacurses::window &[CXType_LValueReference] as argument (const catacurses::window &[CXType_LValueReference]),
            -- player::dispose_item ignored because: unhandled type item_location &&[CXType_RValueReference] as argument (item_location &&[CXType_RValueReference]),
            -- player::drench ignored because: unhandled type const body_part_set &[CXType_LValueReference] as argument (const body_part_set &[CXType_LValueReference]),
            -- player::exceeds_recipe_requirements ignored because: unhandled type const recipe &[CXType_LValueReference] as argument (const recipe &[CXType_LValueReference]),
            -- player::expected_time_to_craft ignored because: unhandled type const recipe &[CXType_LValueReference] as argument (const recipe &[CXType_LValueReference]),
            -- player::get_acquirable_energy ignored because: unhandled type rechargeable_cbm[CXType_Enum] as argument (rechargeable_cbm[CXType_Enum]),
            -- player::get_available_recipes ignored because: unhandled type const inventory &[CXType_LValueReference] as argument (const inventory &[CXType_LValueReference]),
            -- player::get_books_for_recipe ignored because: unhandled type const inventory &[CXType_LValueReference] as argument (const inventory &[CXType_LValueReference]),
            -- player::get_recipes_from_books ignored because: unhandled type const inventory &[CXType_LValueReference] as argument (const inventory &[CXType_LValueReference]),
            -- player::has_activity ignored because: unhandled type string_id<activity_type>[CXType_Unexposed] as argument (string_id<activity_type>[CXType_Record]),
            -- player::has_morale ignored because: unhandled type string_id<morale_type_data>[CXType_Unexposed] as argument (string_id<morale_type_data>[CXType_Record]),
            -- player::has_recipe ignored because: unhandled type const recipe *[CXType_Pointer] as argument (const recipe *[CXType_Pointer]),
            -- player::has_recipe_requirements ignored because: unhandled type const recipe &[CXType_LValueReference] as argument (const recipe &[CXType_LValueReference]),
            -- player::immune_to ignored because: unhandled type damage_unit[CXType_Record] as argument (damage_unit[CXType_Record]),
            -- player::is_waterproof ignored because: unhandled type const body_part_set &[CXType_LValueReference] as argument (const body_part_set &[CXType_LValueReference]),
            -- player::is_wearing_power_armor ignored because: unhandled type bool *[CXType_Pointer] as argument (bool *[CXType_Pointer]),
            -- player::knows_recipe ignored because: unhandled type const recipe *[CXType_Pointer] as argument (const recipe *[CXType_Pointer]),
            -- player::learn_recipe ignored because: unhandled type const recipe *[CXType_Pointer] as argument (const recipe *[CXType_Pointer]),
            -- player::lighting_craft_speed_multiplier ignored because: unhandled type const recipe &[CXType_LValueReference] as argument (const recipe &[CXType_LValueReference]),
            -- player::load_memorial_file ignored because: unhandled type std::istream &[CXType_LValueReference] as argument (std::basic_istream<char> &[CXType_LValueReference]),
            -- player::make_all_craft ignored because: unhandled type const recipe_id &[CXType_LValueReference] as argument (const string_id<recipe> &[CXType_LValueReference]),
            -- player::make_craft ignored because: unhandled type const recipe_id &[CXType_LValueReference] as argument (const string_id<recipe> &[CXType_LValueReference]),
            -- player::make_craft_with_command ignored because: unhandled type const recipe_id &[CXType_LValueReference] as argument (const string_id<recipe> &[CXType_LValueReference]),
            -- player::making_would_work ignored because: unhandled type const recipe_id &[CXType_LValueReference] as argument (const string_id<recipe> &[CXType_LValueReference]),
            -- player::melee_special_effects ignored because: unhandled type damage_instance &[CXType_LValueReference] as argument (damage_instance &[CXType_LValueReference]),
            -- player::memorial ignored because: unhandled type std::ostream &[CXType_LValueReference] as argument (std::basic_ostream<char> &[CXType_LValueReference]),
            -- player::mend_item ignored because: unhandled type item_location &&[CXType_RValueReference] as argument (item_location &&[CXType_RValueReference]),
            -- player::morale_crafting_speed_multiplier ignored because: unhandled type const recipe &[CXType_LValueReference] as argument (const recipe &[CXType_LValueReference]),
            -- player::on_hit ignored because: unhandled type const dealt_projectile_attack *const[CXType_Pointer] as argument (const dealt_projectile_attack *const[CXType_Pointer]),
            -- player::on_mission_assignment ignored because: unhandled type mission &[CXType_LValueReference] as argument (mission &[CXType_LValueReference]),
            -- player::on_mission_finished ignored because: unhandled type mission &[CXType_LValueReference] as argument (mission &[CXType_LValueReference]),
            -- player::operator= ignored because: operator,
            -- player::operator= ignored because: unhandled type player &&[CXType_RValueReference] as argument (player &&[CXType_RValueReference]),
            -- player::passive_absorb_hit ignored because: unhandled type damage_unit &[CXType_LValueReference] as argument (damage_unit &[CXType_LValueReference]),
            -- player::perform_technique ignored because: unhandled type damage_instance &[CXType_LValueReference] as argument (damage_instance &[CXType_LValueReference]),
            -- player::print_encumbrance ignored because: unhandled type const catacurses::window &[CXType_LValueReference] as argument (const catacurses::window &[CXType_LValueReference]),
            -- player::print_info ignored because: unhandled type const catacurses::window &[CXType_LValueReference] as argument (const catacurses::window &[CXType_LValueReference]),
            -- player::randomize ignored because: unhandled type points_left &[CXType_LValueReference] as argument (points_left &[CXType_LValueReference]),
            -- player::rem_morale ignored because: unhandled type string_id<morale_type_data>[CXType_Unexposed] as argument (string_id<morale_type_data>[CXType_Record]),
            -- player::remove_bionic ignored because: unhandled type const bionic_id &[CXType_LValueReference] as argument (const string_id<bionic_data> &[CXType_LValueReference]),
            -- player::roll_all_damage ignored because: unhandled type damage_instance &[CXType_LValueReference] as argument (damage_instance &[CXType_LValueReference]),
            -- player::roll_bash_damage ignored because: unhandled type damage_instance &[CXType_LValueReference] as argument (damage_instance &[CXType_LValueReference]),
            -- player::roll_cut_damage ignored because: unhandled type damage_instance &[CXType_LValueReference] as argument (damage_instance &[CXType_LValueReference]),
            -- player::roll_stab_damage ignored because: unhandled type damage_instance &[CXType_LValueReference] as argument (damage_instance &[CXType_LValueReference]),
            -- player::serialize ignored because: unhandled type JsonOut &[CXType_LValueReference] as argument (JsonOut &[CXType_LValueReference]),
            -- player::set_active_mission ignored because: unhandled type mission &[CXType_LValueReference] as argument (mission &[CXType_LValueReference]),
            -- player::set_targeting_data ignored because: unhandled type const targeting_data &[CXType_LValueReference] as argument (const targeting_data &[CXType_LValueReference]),
            -- player::toolmod_add ignored because: unhandled type item_location[CXType_Record] as argument (item_location[CXType_Record]),
            -- player::uninstall_bionic ignored because: unhandled type const bionic_id &[CXType_LValueReference] as argument (const string_id<bionic_data> &[CXType_LValueReference]),
            { name = "action_taken", rval = nil, args = { } },
            { name = "activate_bionic", rval = "bool", args = { "int", "bool" } },
            { name = "active_light", rval = "float", args = { } },
            { name = "add_addiction", rval = nil, args = { "add_type", "int" } },
            { name = "add_known_trap", rval = nil, args = { "tripoint", "trap" } },
            { name = "add_martialart", rval = nil, args = { "matype_id" } },
            { name = "add_miss_reason", rval = nil, args = { "string", "int" } },
            { name = "add_pain_msg", rval = nil, args = { "int", "body_part" } },
            { name = "addiction_level", rval = "int", args = { "add_type" } },
            { name = "adjacent_tile", rval = "tripoint", args = { } },
            { name = "adjust_for_focus", rval = "int", args = { "int" } },
            { name = "all_items_with_flag", rval = nil, args = { "string" } },
            { name = "allergy_type", rval = nil, args = { "item" } },
            { name = "amount_of_storage_bionics", rval = nil, args = { } },
            { name = "amount_worn", rval = "int", args = { "string" } },
            { name = "apply_persistent_morale", rval = nil, args = { } },
            { name = "apply_wetness_morale", rval = nil, args = { "int" } },
            { name = "attack_speed", rval = "int", args = { "item" } },
            { name = "best_shield", rval = "item&", args = { } },
            { name = "bionic_armor_bonus", rval = "float", args = { "body_part", "damage_type" } },
            { name = "bionic_at_index", rval = nil, args = { "int" } },
            { name = "bionic_by_invlet", rval = nil, args = { "int" } },
            { name = "blossoms", rval = nil, args = { } },
            { name = "bodytemp_color", rval = "nc_color", args = { "int" } },
            { name = "bonus_damage", rval = "float", args = { "bool" } },
            { name = "bonus_item_warmth", rval = "int", args = { "body_part" } },
            { name = "burn_move_stamina", rval = nil, args = { "int" } },
            { name = "calc_focus_equilibrium", rval = "int", args = { } },
            { name = "can_arm_block", rval = "bool", args = { } },
            { name = "can_consume", rval = "bool", args = { "item" } },
            { name = "can_eat", rval = nil, args = { "item" } },
            { name = "can_hear", rval = "bool", args = { "tripoint", "int" } },
            { name = "can_interface_armor", rval = "bool", args = { } },
            { name = "can_leg_block", rval = "bool", args = { } },
            { name = "can_limb_block", rval = "bool", args = { } },
            { name = "can_melee", rval = "bool", args = { } },
            { name = "can_reload", rval = "bool", args = { "item", "string" } },
            { name = "can_sleep", rval = "bool", args = { } },
            { name = "can_unwield", rval = nil, args = { "item" } },
            { name = "can_wear", rval = nil, args = { "item" } },
            { name = "can_wield", rval = nil, args = { "item" } },
            { name = "cancel_activity", rval = nil, args = { } },
            { name = "change_side", rval = "bool", args = { "int", "bool" } },
            { name = "change_side", rval = "bool", args = { "item", "bool" } },
            { name = "charge_power", rval = nil, args = { "int" } },
            { name = "check_and_recover_morale", rval = nil, args = { } },
            { name = "check_needs_extremes", rval = nil, args = { } },
            { name = "clairvoyance", rval = "int", args = { } },
            { name = "clear_destination", rval = nil, args = { } },
            { name = "clear_miss_reasons", rval = nil, args = { } },
            { name = "climbing_cost", rval = "int", args = { "tripoint", "tripoint" } },
            { name = "complete_craft", rval = nil, args = { } },
            { name = "complete_disassemble", rval = nil, args = { } },
            { name = "consume", rval = "bool", args = { "int" } },
            { name = "consume_charges", rval = "bool", args = { "item", "int" } },
            { name = "consume_effects", rval = nil, args = { "item" } },
            { name = "consume_item", rval = "bool", args = { "item" } },
            { name = "cough", rval = nil, args = { "bool", "int" } },
            { name = "craft", rval = nil, args = { } },
            { name = "crafting_inventory", rval = nil, args = { } },
            { name = "crit_chance", rval = "float", args = { "float", "float", "item" } },
            { name = "crossed_threshold", rval = "bool", args = { } },
            { name = "deactivate_bionic", rval = "bool", args = { "int", "bool" } },
            { name = "disarm", rval = nil, args = { "npc" } },
            { name = "disassemble", rval = "bool", args = { "int" } },
            { name = "disassemble", rval = "bool", args = { "item", "int", "bool", "bool" } },
            { name = "disassemble", rval = "bool", args = { } },
            { name = "disassemble_all", rval = nil, args = { "bool" } },
            { name = "disp_info", rval = nil, args = { } },
            { name = "disp_morale", rval = nil, args = { } },
            { name = "do_read", rval = nil, args = { "item" } },
            { name = "do_skill_rust", rval = nil, args = { } },
            { name = "drench_mut_calc", rval = nil, args = { } },
            { name = "drink_from_hands", rval = "int", args = { "item" } },
            { name = "drop", rval = nil, args = { "int", "tripoint" } },
            { name = "dump_memorial", rval = "string", args = { } },
            { name = "eat", rval = "bool", args = { "item", "bool" } },
            { name = "environmental_revert_effect", rval = nil, args = { } },
            { name = "fall_asleep", rval = nil, args = { "time_duration" } },
            { name = "fine_detail_vision_mod", rval = "float", args = { } },
            { name = "fire_gun", rval = "int", args = { "tripoint", "int" } },
            { name = "fire_gun", rval = "int", args = { "tripoint", "int", "item" } },
            { name = "footwear_factor", rval = "float", args = { } },
            { name = "fun_for", rval = nil, args = { "item" } },
            { name = "fun_to_read", rval = "bool", args = { "item" } },
            { name = "getID", rval = "int", args = { } },
            { name = "get_acquirable_energy", rval = "int", args = { "item" } },
            { name = "get_active_mission", rval = nil, args = { } },
            { name = "get_active_mission_target", rval = "tripoint", args = { } },
            { name = "get_active_missions", rval = nil, args = { } },
            { name = "get_armor_acid", rval = "int", args = { "body_part" } },
            { name = "get_armor_fire", rval = "int", args = { "body_part" } },
            { name = "get_category_dream", rval = "string", args = { "string", "int" } },
            { name = "get_cbm_rechargeable_with", rval = nil, args = { "item" } },
            { name = "get_combat_style", rval = "martialart&", args = { } },
            { name = "get_comestible_from", rval = "item&", args = { "item" } },
            { name = "get_completed_missions", rval = nil, args = { } },
            { name = "get_crafting_helpers", rval = nil, args = { } },
            { name = "get_dependent_worn_items", rval = nil, args = { "item" } },
            { name = "get_eligible_containers_for_crafting", rval = nil, args = { } },
            { name = "get_failed_missions", rval = nil, args = { } },
            { name = "get_free_bionics_slots", rval = "int", args = { "body_part" } },
            { name = "get_highest_category", rval = "string", args = { } },
            { name = "get_hit_weapon", rval = "float", args = { "item" } },
            { name = "get_hostile_creatures", rval = nil, args = { "int" } },
            { name = "get_learned_recipes", rval = nil, args = { } },
            { name = "get_miss_reason", rval = "string", args = { } },
            { name = "get_morale_level", rval = "int", args = { } },
            { name = "get_next_auto_move_direction", rval = nil, args = { } },
            { name = "get_pain_penalty", rval = nil, args = { } },
            { name = "get_painkiller", rval = "int", args = { } },
            { name = "get_radio_items", rval = nil, args = { } },
            { name = "get_sick", rval = nil, args = { } },
            { name = "get_stamina_max", rval = "int", args = { } },
            { name = "get_targetable_creatures", rval = nil, args = { "int" } },
            { name = "get_targeting_data", rval = nil, args = { } },
            { name = "get_total_bionics_slots", rval = "int", args = { "body_part" } },
            { name = "get_used_bionics_slots", rval = "int", args = { "body_part" } },
            { name = "get_visible_creatures", rval = nil, args = { "int" } },
            { name = "get_weapon_dispersion", rval = nil, args = { "item" } },
            { name = "get_wind_resistance", rval = "int", args = { "body_part" } },
            { name = "global_omt_location", rval = "tripoint", args = { } },
            { name = "global_sm_location", rval = "tripoint", args = { } },
            { name = "global_square_location", rval = "tripoint", args = { } },
            { name = "gun_engagement_moves", rval = "int", args = { "item", "int", "int" } },
            { name = "gun_value", rval = "float", args = { "item", "int" } },
            { name = "gunmod_add", rval = nil, args = { "item", "item" } },
            { name = "gunmod_installation_odds", rval = nil, args = { "item", "item" } },
            { name = "gunmod_remove", rval = "bool", args = { "item", "item" } },
            { name = "handle_gun_damage", rval = "bool", args = { "item" } },
            { name = "handle_melee_wear", rval = "bool", args = { "item", "float" } },
            { name = "hardcoded_effects", rval = nil, args = { "effect" } },
            { name = "has_active_optcloak", rval = "bool", args = { } },
            { name = "has_addiction", rval = "bool", args = { "add_type" } },
            { name = "has_alarm_clock", rval = "bool", args = { } },
            { name = "has_charges", rval = "bool", args = { "string", "int" } },
            { name = "has_child_flag", rval = "bool", args = { "trait_id" } },
            { name = "has_conflicting_trait", rval = "bool", args = { "trait_id" } },
            { name = "has_destination", rval = "bool", args = { } },
            { name = "has_enough_charges", rval = "bool", args = { "item", "bool" } },
            { name = "has_gun_for_ammo", rval = "bool", args = { "ammotype" } },
            { name = "has_higher_trait", rval = "bool", args = { "trait_id" } },
            { name = "has_identified", rval = "bool", args = { "string" } },
            { name = "has_item_with_flag", rval = "bool", args = { "string" } },
            { name = "has_lower_trait", rval = "bool", args = { "trait_id" } },
            { name = "has_mabuff", rval = "bool", args = { "mabuff_id" } },
            { name = "has_magazine_for_ammo", rval = "bool", args = { "ammotype" } },
            { name = "has_martialart", rval = "bool", args = { "matype_id" } },
            { name = "has_miss_recovery_tec", rval = "bool", args = { "item" } },
            { name = "has_mission_item", rval = "bool", args = { "int" } },
            { name = "has_morale_to_craft", rval = "bool", args = { } },
            { name = "has_morale_to_read", rval = "bool", args = { } },
            { name = "has_opposite_trait", rval = "bool", args = { "trait_id" } },
            { name = "has_technique", rval = "bool", args = { "matec_id", "item" } },
            { name = "has_two_arms", rval = "bool", args = { } },
            { name = "has_watch", rval = "bool", args = { } },
            { name = "head_cloth_encumbrance", rval = "int", args = { } },
            { name = "heal", rval = nil, args = { "body_part", "int" } },
            { name = "heal", rval = nil, args = { "hp_part", "int" } },
            { name = "healall", rval = nil, args = { "int" } },
            { name = "hearing_ability", rval = "float", args = { } },
            { name = "hitall", rval = "int", args = { "int", "int", "Creature" } },
            { name = "hunger_speed_penalty", static = true, rval = "int", args = { "int" } },
            { name = "hurtall", rval = nil, args = { "int", "Creature", "bool" } },
            { name = "in_climate_control", rval = "bool", args = { } },
            { name = "install_bionics", rval = "bool", args = { "itype", "int" } },
            { name = "intimidation", rval = "int", args = { } },
            { name = "inv_dump", rval = nil, args = { } },
            { name = "invalidate_crafting_inventory", rval = nil, args = { } },
            { name = "invlet_to_position", rval = "int", args = { "int" } },
            { name = "invoke_item", rval = "bool", args = { "item" } },
            { name = "invoke_item", rval = "bool", args = { "item", "string" } },
            { name = "invoke_item", rval = "bool", args = { "item", "string", "tripoint" } },
            { name = "invoke_item", rval = "bool", args = { "item", "tripoint" } },
            { name = "is_deaf", rval = "bool", args = { } },
            { name = "is_hibernating", rval = "bool", args = { } },
            { name = "is_invisible", rval = "bool", args = { } },
            { name = "is_quiet", rval = "bool", args = { } },
            { name = "is_rad_immune", rval = "bool", args = { } },
            { name = "is_snuggling", rval = "string", args = { } },
            { name = "is_throw_immune", rval = "bool", args = { } },
            { name = "is_wearing_helmet", rval = "bool", args = { } },
            { name = "is_wearing_shoes", rval = "bool", args = { "string" } },
            { name = "is_wielding", rval = "bool", args = { "item" } },
            { name = "item_handling_cost", rval = "int", args = { "item", "bool", "int" } },
            { name = "item_reload_cost", rval = "int", args = { "item", "item", "int" } },
            { name = "item_store_cost", rval = "int", args = { "item", "item", "bool", "int" } },
            { name = "item_wear_cost", rval = "int", args = { "item" } },
            { name = "knows_trap", rval = "bool", args = { "tripoint" } },
            { name = "leak_level", rval = "int", args = { "string" } },
            { name = "load_info", rval = nil, args = { "string" } },
            { name = "load_template", rval = "bool", args = { "string" } },
            { name = "long_craft", rval = nil, args = { } },
            { name = "ma_onattack_effects", rval = nil, args = { } },
            { name = "ma_onblock_effects", rval = nil, args = { } },
            { name = "ma_ondodge_effects", rval = nil, args = { } },
            { name = "ma_ongethit_effects", rval = nil, args = { } },
            { name = "ma_onhit_effects", rval = nil, args = { } },
            { name = "ma_onmove_effects", rval = nil, args = { } },
            { name = "ma_static_effects", rval = nil, args = { } },
            { name = "mabuff_armor_bonus", rval = "int", args = { "damage_type" } },
            { name = "mabuff_attack_cost_mult", rval = "float", args = { } },
            { name = "mabuff_attack_cost_penalty", rval = "int", args = { } },
            { name = "mabuff_block_bonus", rval = "int", args = { } },
            { name = "mabuff_damage_bonus", rval = "int", args = { "damage_type" } },
            { name = "mabuff_damage_mult", rval = "float", args = { "damage_type" } },
            { name = "mabuff_dodge_bonus", rval = "float", args = { } },
            { name = "mabuff_speed_bonus", rval = "int", args = { } },
            { name = "mabuff_tohit_bonus", rval = "float", args = { } },
            { name = "melee_attack", rval = nil, args = { "Creature", "bool" } },
            { name = "melee_attack", rval = nil, args = { "Creature", "bool", "matec_id", "bool" } },
            { name = "melee_value", rval = "float", args = { "item" } },
            { name = "mend", rval = nil, args = { "int" } },
            { name = "metabolic_rate", rval = "float", args = { } },
            { name = "metabolic_rate_base", rval = "float", args = { } },
            { name = "mod_painkiller", rval = nil, args = { "int" } },
            { name = "mutate", rval = nil, args = { } },
            { name = "mutate_category", rval = nil, args = { "string" } },
            { name = "mutate_towards", rval = "bool", args = { "trait_id" } },
            { name = "mutation_attacks", rval = nil, args = { "Creature" } },
            { name = "mutation_ok", rval = "bool", args = { "trait_id", "bool", "bool" } },
            { name = "natural_attack_restricted_on", rval = "bool", args = { "body_part" } },
            { name = "num_bionics", rval = "int", args = { } },
            { name = "nutrition_for", rval = "int", args = { "item" } },
            { name = "on_hurt", rval = nil, args = { "Creature", "bool" } },
            { name = "overmap_los", rval = "bool", args = { "tripoint", "int" } },
            { name = "overmap_sight_range", rval = "int", args = { "int" } },
            { name = "pause", rval = nil, args = { } },
            { name = "perform_special_attacks", rval = nil, args = { "Creature" } },
            { name = "pick_style", rval = "bool", args = { } },
            { name = "pick_technique", rval = "matec_id", args = { "Creature", "item", "bool", "bool", "bool" } },
            { name = "place_corpse", rval = nil, args = { } },
            { name = "power_bionics", rval = nil, args = { } },
            { name = "power_mutations", rval = nil, args = { } },
            { name = "practice", rval = nil, args = { "skill_id", "int", "int" } },
            { name = "print_health", rval = nil, args = { } },
            { name = "process_active_items", rval = nil, args = { } },
            { name = "process_bionic", rval = nil, args = { "int" } },
            { name = "purifiable", rval = "bool", args = { "trait_id" } },
            { name = "rate_action_change_side", rval = nil, args = { "item" } },
            { name = "rate_action_disassemble", rval = nil, args = { "item" } },
            { name = "rate_action_eat", rval = nil, args = { "item" } },
            { name = "rate_action_mend", rval = nil, args = { "item" } },
            { name = "rate_action_read", rval = nil, args = { "item" } },
            { name = "rate_action_reload", rval = nil, args = { "item" } },
            { name = "rate_action_takeoff", rval = nil, args = { "item" } },
            { name = "rate_action_unload", rval = nil, args = { "item" } },
            { name = "rate_action_use", rval = nil, args = { "item" } },
            { name = "rate_action_wear", rval = nil, args = { "item" } },
            { name = "reach_attack", rval = nil, args = { "tripoint" } },
            { name = "read", rval = "bool", args = { "int", "bool" } },
            { name = "read_speed", rval = "int", args = { "bool" } },
            { name = "reassign_item", rval = nil, args = { "item", "int" } },
            { name = "recalc_speed_bonus", rval = nil, args = { } },
            { name = "recoil_total", rval = "float", args = { } },
            { name = "recoil_vehicle", rval = "float", args = { } },
            { name = "recraft", rval = nil, args = { } },
            { name = "reduce_charges", rval = "item", args = { "int", "int" } },
            { name = "reduce_charges", rval = "item", args = { "item", "int" } },
            { name = "regen", rval = nil, args = { "int" } },
            { name = "rem_addiction", rval = nil, args = { "add_type" } },
            { name = "remove_child_flag", rval = nil, args = { "trait_id" } },
            { name = "remove_mutation", rval = nil, args = { "trait_id" } },
            { name = "remove_random_bionic", rval = "bool", args = { } },
            { name = "rooted", rval = nil, args = { } },
            { name = "rooted_message", rval = nil, args = { } },
            { name = "run_cost", rval = "int", args = { "int", "bool" } },
            { name = "rust_rate", rval = "int", args = { "bool" } },
            { name = "save_info", rval = "string", args = { } },
            { name = "scored_crit", rval = "bool", args = { "float", "item" } },
            { name = "search_surroundings", rval = nil, args = { } },
            { name = "sees_with_infrared", rval = "bool", args = { "Creature" } },
            { name = "select_ammo", rval = nil, args = { "item", "bool" } },
            { name = "setID", rval = nil, args = { "int" } },
            { name = "set_highest_cat_level", rval = nil, args = { } },
            { name = "set_painkiller", rval = nil, args = { "int" } },
            { name = "set_underwater", rval = nil, args = { "bool" } },
            { name = "setx", rval = nil, args = { "int" } },
            { name = "sety", rval = nil, args = { "int" } },
            { name = "setz", rval = nil, args = { "int" } },
            { name = "shift_destination", rval = nil, args = { "int", "int" } },
            { name = "shoe_type_count", rval = "int", args = { "string" } },
            { name = "shout", rval = nil, args = { "string" } },
            { name = "sight_impaired", rval = "bool", args = { } },
            { name = "siphon", rval = nil, args = { "vehicle", "string" } },
            { name = "sleep_spot", rval = "int", args = { "tripoint" } },
            { name = "sort_armor", rval = nil, args = { } },
            { name = "spores", rval = nil, args = { } },
            { name = "steal", rval = nil, args = { "npc" } },
            { name = "stomach_capacity", rval = "int", args = { } },
            { name = "store", rval = nil, args = { "item", "item", "bool", "int" } },
            { name = "studied_all_recipes", rval = "bool", args = { "itype" } },
            { name = "suffer", rval = nil, args = { } },
            { name = "swim_speed", rval = "int", args = { } },
            { name = "takeoff", rval = "bool", args = { "int" } },
            { name = "talk_skill", rval = "int", args = { } },
            { name = "temp_equalizer", rval = nil, args = { "body_part", "body_part" } },
            { name = "thirst_speed_penalty", static = true, rval = "int", args = { "int" } },
            { name = "throw_item", rval = nil, args = { "tripoint", "item" } },
            { name = "time_to_read", rval = "int", args = { "item", "player", "player" } },
            { name = "toggle_move_mode", rval = nil, args = { } },
            { name = "try_to_sleep", rval = nil, args = { } },
            { name = "unarmed_attack", rval = "bool", args = { } },
            { name = "unarmed_override", rval = "bool", args = { } },
            { name = "unarmed_value", rval = "float", args = { } },
            { name = "unimpaired_range", rval = "int", args = { } },
            { name = "unwield", rval = "bool", args = { } },
            { name = "update_body", rval = nil, args = { "time_point", "time_point" } },
            { name = "update_body", rval = nil, args = { } },
            { name = "update_body_wetness", rval = nil, args = { "w_point" } },
            { name = "update_bodytemp", rval = nil, args = { } },
            { name = "update_mental_focus", rval = nil, args = { } },
            { name = "update_morale", rval = nil, args = { } },
            { name = "update_needs", rval = nil, args = { "int" } },
            { name = "update_stamina", rval = nil, args = { "int" } },
            { name = "update_vitamins", rval = nil, args = { "vitamin_id" } },
            { name = "use", rval = nil, args = { "int" } },
            { name = "use_charges_if_avail", rval = "bool", args = { "string", "int" } },
            { name = "use_wielded", rval = nil, args = { } },
            { name = "visibility", rval = "int", args = { "bool", "int" } },
            { name = "vitamin_get", rval = "int", args = { "vitamin_id" } },
            { name = "vitamin_mod", rval = "int", args = { "vitamin_id", "int", "bool" } },
            { name = "vitamin_rate", rval = "time_duration", args = { "vitamin_id" } },
            { name = "vitamin_set", rval = "bool", args = { "vitamin_id", "int" } },
            { name = "vitamins_from", rval = nil, args = { "item" } },
            { name = "vitamins_from", rval = nil, args = { "string" } },
            { name = "vomit", rval = nil, args = { } },
            { name = "vomit_mod", rval = "float", args = { } },
            { name = "wake_up", rval = nil, args = { } },
            { name = "warmth", rval = "int", args = { "body_part" } },
            { name = "weapname", rval = "string", args = { } },
            { name = "weapon_value", rval = "float", args = { "item", "int" } },
            { name = "wear", rval = "bool", args = { "int", "bool" } },
            { name = "wear", rval = "bool", args = { "item", "bool" } },
            { name = "wear_item", rval = "bool", args = { "item", "bool" } },
            { name = "wearing_something_on", rval = "bool", args = { "body_part" } },
            { name = "wield", rval = "bool", args = { "item" } },
            { name = "wield_contents", rval = "bool", args = { "item", "int", "bool", "int" } },
            { name = "will_eat", rval = nil, args = { "item", "bool" } },
        }
    },
    point = {
        headers = { "enums.h" },
        new = {
            { "int", "int" },
            { },
        },
        by_value = true,
        attributes = {
            x = { type = "int", writable = true },
            y = { type = "int", writable = true },
        },
        functions = {
            -- point::operator+ ignored because: operator,
            -- point::operator+= ignored because: operator,
            -- point::operator- ignored because: operator,
            -- point::operator-= ignored because: operator,
        }
    },
    quality = {
        headers = { "requirements.h" },
        string_id = "quality_id",
        attributes = {
        },
        functions = {
        }
    },
    stats = {
        headers = { "player.h" },
        attributes = {
            damage_healed = { type = "int", writable = true },
            damage_taken = { type = "int", writable = true },
            headshots = { type = "int", writable = true },
            squares_walked = { type = "int", writable = true },
        },
        functions = {
            -- stats::deserialize ignored because: unhandled type JsonIn &[CXType_LValueReference] as argument (JsonIn &[CXType_LValueReference]),
            -- stats::serialize ignored because: unhandled type JsonOut &[CXType_LValueReference] as argument (JsonOut &[CXType_LValueReference]),
        }
    },
    ter_t = {
        headers = { "mapdata.h" },
        string_id = "ter_str_id",
        int_id = "ter_id",
        attributes = {
            -- map_data_common_t::bash ignored because: unhandled type map_bash_info[CXType_Record] as member (map_bash_info[CXType_Record]),
            -- map_data_common_t::color_ ignored because: unhandled type std::array<nc_color, SEASONS_PER_YEAR>[CXType_Elaborated] as member (std::array<nc_color, 4>[CXType_Record]),
            -- map_data_common_t::deconstruct ignored because: unhandled type map_deconstruct_info[CXType_Record] as member (map_deconstruct_info[CXType_Record]),
            -- map_data_common_t::examine ignored because: unhandled type void (*)(player &, const tripoint &)[CXType_Pointer] as member (void (*)(player &, const tripoint &)[CXType_Pointer]),
            -- map_data_common_t::harvest_by_season ignored because: unhandled type std::array<harvest_id, SEASONS_PER_YEAR>[CXType_Elaborated] as member (std::array<string_id<harvest_list>, 4>[CXType_Record]),
            -- map_data_common_t::symbol_ ignored because: unhandled type std::array<long, SEASONS_PER_YEAR>[CXType_Elaborated] as member (std::array<long, 4>[CXType_Record]),
            -- ter_t::was_loaded skipped because it's blocked,
            close = { type = "ter_str_id", writable = true },
            connect_group = { type = "int", writable = true },
            description = { type = "string", writable = true },
            id = { type = "ter_str_id", writable = true },
            max_volume = { type = "units::volume", writable = true },
            movecost = { type = "int", writable = true },
            open = { type = "ter_str_id", writable = true },
            roof = { type = "ter_str_id", writable = true },
            transforms_into = { type = "ter_str_id", writable = true },
            transparent = { type = "bool", writable = true },
            trap = { type = "trap_id", writable = true },
            trap_id_str = { type = "string", writable = true },
        },
        functions = {
            -- map_data_common_t::connects ignored because: unhandled type int &[CXType_LValueReference] as argument (int &[CXType_LValueReference]),
            -- map_data_common_t::has_flag ignored because: unhandled type const ter_bitflags[CXType_Enum] as argument (const ter_bitflags[CXType_Enum]),
            -- map_data_common_t::load ignored because: unhandled type JsonObject &[CXType_LValueReference] as argument (JsonObject &[CXType_LValueReference]),
            -- map_data_common_t::load_symbol ignored because: unhandled type JsonObject &[CXType_LValueReference] as argument (JsonObject &[CXType_LValueReference]),
            -- ter_t::load ignored because: unhandled type JsonObject &[CXType_LValueReference] as argument (JsonObject &[CXType_LValueReference]),
            { name = "check", rval = nil, args = { } },
            { name = "color", rval = "nc_color", args = { } },
            { name = "connects_to", rval = "bool", args = { "int" } },
            { name = "count", static = true, rval = "int", args = { } },
            { name = "extended_description", rval = "string", args = { } },
            { name = "get_harvest", rval = nil, args = { } },
            { name = "has_flag", rval = "bool", args = { "string" } },
            { name = "name", rval = "string", args = { } },
            { name = "set_connects", rval = nil, args = { "string" } },
            { name = "set_flag", rval = nil, args = { "string" } },
            { name = "symbol", rval = "int", args = { } },
        }
    },
    time_duration = {
        headers = { "calendar.h" },
        new = {
            -- time_duration::time_duration ignored because: unhandled type const std::nullptr_t[CXType_Elaborated] as argument (const nullptr_t[CXType_NullPtr]),
        },
        by_value = true,
        has_equal = true,
        attributes = {
        },
        functions = {
            -- time_duration::deserialize ignored because: unhandled type JsonIn &[CXType_LValueReference] as argument (JsonIn &[CXType_LValueReference]),
            -- time_duration::operator!= ignored because: operator,
            -- time_duration::operator< ignored because: operator,
            -- time_duration::operator<= ignored because: operator,
            -- time_duration::operator> ignored because: operator,
            -- time_duration::operator>= ignored because: operator,
            -- time_duration::serialize ignored because: unhandled type JsonOut &[CXType_LValueReference] as argument (JsonOut &[CXType_LValueReference]),
        }
    },
    time_point = {
        headers = { "calendar.h" },
        new = {
            -- time_point::time_point ignored because: unhandled type const std::nullptr_t[CXType_Elaborated] as argument (const nullptr_t[CXType_NullPtr]),
            { "calendar" },
            { "int" },
        },
        by_value = true,
        attributes = {
        },
        functions = {
            -- time_point::deserialize ignored because: unhandled type JsonIn &[CXType_LValueReference] as argument (JsonIn &[CXType_LValueReference]),
            -- time_point::serialize ignored because: unhandled type JsonOut &[CXType_LValueReference] as argument (JsonOut &[CXType_LValueReference]),
            { name = "from_turn", static = true, rval = "time_point", args = { "int" } },
        }
    },
    trap = {
        headers = { "trap.h" },
        string_id = "trap_str_id",
        int_id = "trap_id",
        attributes = {
            -- trap::was_loaded skipped because it's blocked,
            color = { type = "nc_color", writable = true },
            id = { type = "trap_str_id", writable = true },
            loadid = { type = "trap_id", writable = true },
            sym = { type = "int", writable = true },
        },
        functions = {
            -- static trap::check_consistency skipped because it's blocked,
            -- static trap::finalize skipped because it's blocked,
            -- static trap::load_trap ignored because: unhandled type JsonObject &[CXType_LValueReference] as argument (JsonObject &[CXType_LValueReference]),
            -- static trap::reset skipped because it's blocked,
            -- trap::load ignored because: unhandled type JsonObject &[CXType_LValueReference] as argument (JsonObject &[CXType_LValueReference]),
            { name = "can_see", rval = "bool", args = { "tripoint", "player" } },
            { name = "count", static = true, rval = "int", args = { } },
            { name = "detect_trap", rval = "bool", args = { "tripoint", "player" } },
            { name = "funnel_turns_per_charge", rval = "float", args = { "float" } },
            { name = "get_avoidance", rval = "int", args = { } },
            { name = "get_difficulty", rval = "int", args = { } },
            { name = "get_funnels", static = true, rval = nil, args = { } },
            { name = "get_visibility", rval = "int", args = { } },
            { name = "is_3x3_trap", rval = "bool", args = { } },
            { name = "is_benign", rval = "bool", args = { } },
            { name = "is_funnel", rval = "bool", args = { } },
            { name = "is_null", rval = "bool", args = { } },
            { name = "name", rval = "string", args = { } },
            { name = "on_disarmed", rval = nil, args = { "map", "tripoint" } },
            { name = "trigger", rval = nil, args = { "tripoint", "Creature" } },
            { name = "triggered_by_item", rval = "bool", args = { "item" } },
        }
    },
    tripoint = {
        headers = { "enums.h" },
        new = {
            { "int", "int", "int" },
            { "point", "int" },
            { },
        },
        by_value = true,
        attributes = {
            x = { type = "int", writable = true },
            y = { type = "int", writable = true },
            z = { type = "int", writable = true },
        },
        functions = {
            -- tripoint::deserialize ignored because: unhandled type JsonIn &[CXType_LValueReference] as argument (JsonIn &[CXType_LValueReference]),
            -- tripoint::operator+ ignored because: operator,
            -- tripoint::operator+= ignored because: operator,
            -- tripoint::operator- ignored because: operator,
            -- tripoint::operator-= ignored because: operator,
            -- tripoint::serialize ignored because: unhandled type JsonOut &[CXType_LValueReference] as argument (JsonOut &[CXType_LValueReference]),
        }
    },
    uimenu = {
        headers = { "ui.h" },
        attributes = {
            -- ui_container::window ignored because: unhandled type catacurses::window[CXType_Elaborated] as member (catacurses::window[CXType_Record]),
            -- uimenu::callback ignored because: unhandled type uimenu_callback *[CXType_Pointer] as member (uimenu_callback *[CXType_Pointer]),
            -- uimenu::keymap ignored because: unhandled type std::map<int, int>[CXType_Elaborated] as member (std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int> > >[CXType_Record]),
            border = { type = "bool", writable = true },
            border_color = { type = "nc_color", writable = true },
            centered_scroll = { type = "bool", writable = true },
            desc_enabled = { type = "bool", writable = true },
            desc_lines = { type = "int", writable = true },
            disabled_color = { type = "nc_color", writable = true },
            filter = { type = "string", writable = true },
            filtering = { type = "bool", writable = true },
            filtering_nocase = { type = "bool", writable = true },
            fselected = { type = "int", writable = true },
            hilight_color = { type = "nc_color", writable = true },
            hilight_disabled = { type = "bool", writable = true },
            hilight_full = { type = "bool", writable = true },
            hotkey_color = { type = "nc_color", writable = true },
            input_category = { type = "string", writable = true },
            keypress = { type = "int", writable = true },
            max_desc_len = { type = "int", writable = true },
            max_entry_len = { type = "int", writable = true },
            pad_left = { type = "int", writable = true },
            pad_right = { type = "int", writable = true },
            ret = { type = "int", writable = true },
            return_invalid = { type = "bool", writable = true },
            scrollbar_auto = { type = "bool", writable = true },
            scrollbar_nopage_color = { type = "nc_color", writable = true },
            scrollbar_page_color = { type = "nc_color", writable = true },
            scrollbar_side = { type = "int", writable = true },
            selected = { type = "int", writable = true },
            shift_retval = { type = "int", writable = true },
            text = { type = "string", writable = true },
            text_color = { type = "nc_color", writable = true },
            textalign = { type = "int", writable = true },
            textwidth = { type = "int", writable = true },
            title = { type = "string", writable = true },
            title_color = { type = "nc_color", writable = true },
            vmax = { type = "int", writable = true },
            vshift = { type = "int", writable = true },
            w_height = { type = "int", writable = true },
            w_width = { type = "int", writable = true },
            w_x = { type = "int", writable = true },
            w_y = { type = "int", writable = true },
        },
        functions = {
            { name = "addentry", rval = nil, args = { "int", "bool", "int", "string" } },
            { name = "addentry", rval = nil, args = { "string" } },
            { name = "addentry_desc", rval = nil, args = { "int", "bool", "int", "string", "string" } },
            { name = "addentry_desc", rval = nil, args = { "string", "string" } },
            { name = "apply_scrollbar", rval = nil, args = { } },
            { name = "filterlist", rval = nil, args = { } },
            { name = "init", rval = nil, args = { } },
            { name = "inputfilter", rval = "string", args = { } },
            { name = "query", rval = nil, args = { "bool" } },
            { name = "redraw", rval = nil, args = { "bool" } },
            { name = "refresh", rval = nil, args = { "bool" } },
            { name = "reset", rval = nil, args = { } },
            { name = "scroll_amount_from_action", rval = "int", args = { "string" } },
            { name = "scroll_amount_from_key", rval = "int", args = { "int" } },
            { name = "scrollby", rval = "bool", args = { "int" } },
            { name = "settext", rval = nil, args = { "string" } },
            { name = "setup", rval = nil, args = { } },
            { name = "show", rval = nil, args = { } },
        }
    },
    vehicle = {
        headers = { "vehicle.h", "npc.h", "color.h" },
        attributes = {
            -- vehicle::active_items skipped because it's blocked,
            -- vehicle::face ignored because: unhandled type tileray[CXType_Record] as member (tileray[CXType_Record]),
            -- vehicle::fuel_remainder ignored because: unhandled type std::map<itype_id, float>[CXType_Elaborated] as member (std::map<std::__cxx11::basic_string<char>, float, std::less<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, float> > >[CXType_Record]),
            -- vehicle::move ignored because: unhandled type tileray[CXType_Record] as member (tileray[CXType_Record]),
            -- vehicle::pivot_anchor ignored because: unhandled type std::array<point, 2>[CXType_Elaborated] as member (std::array<point, 2>[CXType_Record]),
            -- vehicle::pivot_rotation ignored because: unhandled type std::array<int, 2>[CXType_Elaborated] as member (std::array<int, 2>[CXType_Record]),
            -- vehicle::type ignored because: unhandled type string_id<vehicle_prototype>[CXType_Unexposed] as member (string_id<vehicle_prototype>[CXType_Record]),
            alarm_epower = { type = "int", writable = true },
            alternator_load = { type = "float", writable = true },
            camera_epower = { type = "int", writable = true },
            camera_on = { type = "bool", writable = true },
            check_environmental_effects = { type = "bool", writable = true },
            cruise_on = { type = "bool", writable = true },
            cruise_velocity = { type = "int", writable = true },
            engine_on = { type = "bool", writable = true },
            extra_drag = { type = "int", writable = true },
            falling = { type = "bool", writable = true },
            insides_dirty = { type = "bool", writable = true },
            is_alarm_on = { type = "bool", writable = true },
            is_locked = { type = "bool", writable = true },
            last_turn = { type = "int", writable = true },
            last_update = { type = "time_point", writable = true },
            name = { type = "string", writable = true },
            occupied_cache_time = { type = "time_point", writable = true },
            of_turn = { type = "float", writable = true },
            of_turn_carry = { type = "float", writable = true },
            om_id = { type = "int", writable = true },
            posx = { type = "int", writable = true },
            posy = { type = "int", writable = true },
            removed_part_count = { type = "int", writable = true },
            skidding = { type = "bool", writable = true },
            smx = { type = "int", writable = true },
            smy = { type = "int", writable = true },
            smz = { type = "int", writable = true },
            tracking_epower = { type = "int", writable = true },
            tracking_on = { type = "bool", writable = true },
            turn_dir = { type = "int", writable = true },
            velocity = { type = "int", writable = true },
            vertical_velocity = { type = "int", writable = true },
        },
        functions = {
            -- vehicle::all_parts_with_feature ignored because: unhandled type vpart_bitflags[CXType_Enum] as argument (vpart_bitflags[CXType_Enum]),
            -- vehicle::deserialize ignored because: unhandled type JsonIn &[CXType_LValueReference] as argument (JsonIn &[CXType_LValueReference]),
            -- vehicle::get_parts ignored because: unhandled type vpart_bitflags[CXType_Enum] as argument (vpart_bitflags[CXType_Enum]),
            -- vehicle::install_part ignored because: unhandled type item &&[CXType_RValueReference] as argument (item &&[CXType_RValueReference]),
            -- vehicle::make_active ignored because: unhandled type item_location &[CXType_LValueReference] as argument (item_location &[CXType_LValueReference]),
            -- vehicle::part_flag ignored because: unhandled type vpart_bitflags[CXType_Enum] as argument (vpart_bitflags[CXType_Enum]),
            -- vehicle::part_id_string ignored because: unhandled type char &[CXType_LValueReference] as argument (char &[CXType_LValueReference]),
            -- vehicle::part_with_feature ignored because: unhandled type vpart_bitflags[CXType_Enum] as argument (vpart_bitflags[CXType_Enum]),
            -- vehicle::print_fuel_indicators ignored because: unhandled type const catacurses::window &[CXType_LValueReference] as argument (const catacurses::window &[CXType_LValueReference]),
            -- vehicle::print_part_desc ignored because: unhandled type const catacurses::window &[CXType_LValueReference] as argument (const catacurses::window &[CXType_LValueReference]),
            -- vehicle::serialize ignored because: unhandled type JsonOut &[CXType_LValueReference] as argument (JsonOut &[CXType_LValueReference]),
            { name = "acceleration", rval = "int", args = { "bool" } },
            { name = "add_charges", rval = "int", args = { "int", "item" } },
            { name = "add_item", rval = "bool", args = { "int", "item" } },
            { name = "add_item", rval = "bool", args = { "vehicle_part", "item" } },
            { name = "alarm", rval = nil, args = { } },
            { name = "all_parts_at_location", rval = nil, args = { "string" } },
            { name = "all_parts_with_feature", rval = nil, args = { "string", "bool" } },
            { name = "assign_seat", rval = "bool", args = { "vehicle_part", "npc" } },
            { name = "backfire", rval = nil, args = { "int" } },
            { name = "balanced_wheel_config", rval = "bool", args = { "bool" } },
            { name = "basic_consumption", rval = "int", args = { "string" } },
            { name = "beeper_sound", rval = nil, args = { } },
            { name = "boarded_parts", rval = nil, args = { } },
            { name = "break_part_into_pieces", rval = nil, args = { "int", "int", "int", "bool" } },
            { name = "can_enable", rval = "bool", args = { "vehicle_part", "bool" } },
            { name = "can_mount", rval = "bool", args = { "int", "int", "vpart_id" } },
            { name = "can_unmount", rval = "bool", args = { "int" } },
            { name = "charge_battery", rval = "int", args = { "int", "bool" } },
            { name = "close", rval = nil, args = { "int" } },
            { name = "consume_fuel", rval = nil, args = { "float" } },
            { name = "control_doors", rval = nil, args = { } },
            { name = "control_engines", rval = nil, args = { } },
            { name = "coord_translate", rval = "point", args = { "point" } },
            { name = "coord_translate", rval = nil, args = { "int", "point", "point", "point" } },
            { name = "cruise_thrust", rval = nil, args = { "int" } },
            { name = "damage", rval = "int", args = { "int", "int", "damage_type", "bool" } },
            { name = "damage_all", rval = nil, args = { "int", "int", "damage_type", "point" } },
            { name = "dir_vec", rval = nil, args = { } },
            { name = "discharge_battery", rval = "int", args = { "int", "bool" } },
            { name = "disp_name", rval = "string", args = { } },
            { name = "do_engine_damage", rval = nil, args = { "int", "int" } },
            { name = "drag", rval = "float", args = { } },
            { name = "drain", rval = "int", args = { "string", "int" } },
            { name = "drain_energy", rval = "float", args = { "string", "float" } },
            { name = "face_vec", rval = nil, args = { } },
            { name = "find_part", rval = "int", args = { "item" } },
            { name = "fold_up", rval = "bool", args = { } },
            { name = "forward_velocity", rval = "float", args = { } },
            { name = "free_volume", rval = "units::volume", args = { "int" } },
            { name = "fuel_capacity", rval = "int", args = { "string" } },
            { name = "fuel_left", rval = "int", args = { "string", "bool" } },
            { name = "fuel_usage", rval = nil, args = { } },
            { name = "fuels_left", rval = nil, args = { } },
            { name = "gain_moves", rval = nil, args = { } },
            { name = "get_items", rval = "vehicle_stack", args = { "int" } },
            { name = "get_parts", rval = nil, args = { "string", "bool" } },
            { name = "get_parts", rval = nil, args = { "tripoint", "string", "bool" } },
            { name = "get_passenger", rval = "player&", args = { "int" } },
            { name = "get_printable_fuel_types", rval = nil, args = { } },
            { name = "get_targeting_npc", rval = nil, args = { "vehicle_part" } },
            { name = "global_part_at", rval = "int", args = { "int", "int" } },
            { name = "global_part_at", rval = "int", args = { "tripoint" } },
            { name = "global_part_pos3", rval = "tripoint", args = { "int" } },
            { name = "global_part_pos3", rval = "tripoint", args = { "vehicle_part" } },
            { name = "global_pos", rval = "point", args = { } },
            { name = "global_pos3", rval = "tripoint", args = { } },
            { name = "global_x", rval = "int", args = { } },
            { name = "global_y", rval = "int", args = { } },
            { name = "handle_trap", rval = nil, args = { "tripoint", "int" } },
            { name = "handling_difficulty", rval = "float", args = { } },
            { name = "has_engine_type", rval = "bool", args = { "string", "bool" } },
            { name = "has_engine_type_not", rval = "bool", args = { "string", "bool" } },
            { name = "has_part", rval = "bool", args = { "string", "bool" } },
            { name = "has_part", rval = "bool", args = { "tripoint", "string", "bool" } },
            { name = "has_security_working", rval = "bool", args = { } },
            { name = "honk_horn", rval = nil, args = { } },
            { name = "idle", rval = nil, args = { "bool" } },
            { name = "index_of_part", rval = "int", args = { "vehicle_part", "bool" } },
            { name = "init_state", rval = nil, args = { "int", "int" } },
            { name = "install_part", rval = "int", args = { "int", "int", "vehicle_part" } },
            { name = "install_part", rval = "int", args = { "int", "int", "vpart_id", "bool" } },
            { name = "interact", rval = nil, args = { } },
            { name = "interact_vehicle_locked", rval = "bool", args = { } },
            { name = "invalidate_mass", rval = nil, args = { } },
            { name = "is_alternator_on", rval = "bool", args = { "int" } },
            { name = "is_engine_on", rval = "bool", args = { "int" } },
            { name = "is_engine_type", rval = "bool", args = { "int", "string" } },
            { name = "is_engine_type_on", rval = "bool", args = { "int", "string" } },
            { name = "is_foldable", rval = "bool", args = { } },
            { name = "is_part_on", rval = "bool", args = { "int" } },
            { name = "k_aerodynamics", rval = "float", args = { } },
            { name = "k_dynamics", rval = "float", args = { } },
            { name = "k_friction", rval = "float", args = { } },
            { name = "k_mass", rval = "float", args = { } },
            { name = "k_traction", rval = "float", args = { "float" } },
            { name = "lift_strength", rval = "int", args = { } },
            { name = "lights", rval = nil, args = { "bool" } },
            { name = "local_center_of_mass", rval = "point", args = { } },
            { name = "max_velocity", rval = "int", args = { "bool" } },
            { name = "max_volume", rval = "units::volume", args = { "int" } },
            { name = "mod_hp", rval = "bool", args = { "vehicle_part", "int", "damage_type" } },
            { name = "move_vec", rval = nil, args = { } },
            { name = "msg_start_engine_fail", rval = nil, args = { } },
            { name = "next_part_to_close", rval = "int", args = { "int", "bool" } },
            { name = "next_part_to_open", rval = "int", args = { "int", "bool" } },
            { name = "noise_and_smoke", rval = nil, args = { "float", "float" } },
            { name = "obstacle_at_part", rval = "int", args = { "int" } },
            { name = "on_move", rval = nil, args = { } },
            { name = "open", rval = nil, args = { "int" } },
            { name = "open_all_at", rval = nil, args = { "int" } },
            { name = "operate_planter", rval = nil, args = { } },
            { name = "operate_plow", rval = nil, args = { } },
            { name = "operate_reaper", rval = nil, args = { } },
            { name = "operate_scoop", rval = nil, args = { } },
            { name = "part_at", rval = "int", args = { "int", "int" } },
            { name = "part_base", rval = nil, args = { "int" } },
            { name = "part_collision", rval = nil, args = { "int", "tripoint", "bool", "bool" } },
            { name = "part_color", rval = "nc_color", args = { "int", "bool" } },
            { name = "part_displayed_at", rval = "int", args = { "int", "int" } },
            { name = "part_flag", rval = "bool", args = { "int", "string" } },
            { name = "part_info", rval = "vpart_info&", args = { "int", "bool" } },
            { name = "part_removal_cleanup", rval = nil, args = { } },
            { name = "part_sym", rval = "int", args = { "int", "bool" } },
            { name = "part_with_feature", rval = "int", args = { "int", "string", "bool" } },
            { name = "part_with_feature_at_relative", rval = "int", args = { "point", "string", "bool" } },
            { name = "parts_at_relative", rval = nil, args = { "int", "int", "bool" } },
            { name = "pivot_displacement", rval = "point", args = { } },
            { name = "pivot_point", rval = "point", args = { } },
            { name = "place_spawn_items", rval = nil, args = { } },
            { name = "play_chimes", rval = nil, args = { } },
            { name = "play_music", rval = nil, args = { } },
            { name = "player_in_control", rval = "bool", args = { "player" } },
            { name = "possibly_recover_from_skid", rval = nil, args = { } },
            { name = "power_parts", rval = nil, args = { } },
            { name = "precalc_mounts", rval = nil, args = { "int", "int", "point" } },
            { name = "real_global_pos", rval = "point", args = { } },
            { name = "real_global_pos3", rval = "tripoint", args = { } },
            { name = "refresh_insides", rval = nil, args = { } },
            { name = "remote_controlled", rval = "bool", args = { "player" } },
            { name = "remove_item", rval = "bool", args = { "int", "int" } },
            { name = "remove_item", rval = "bool", args = { "int", "item" } },
            { name = "remove_part", rval = "bool", args = { "int" } },
            { name = "remove_remote_part", rval = nil, args = { "int" } },
            { name = "restore", rval = "bool", args = { "string" } },
            { name = "roof_at_part", rval = "int", args = { "int" } },
            { name = "rotated_center_of_mass", rval = "point", args = { } },
            { name = "safe_velocity", rval = "int", args = { "bool" } },
            { name = "select_engine", rval = "int", args = { } },
            { name = "set_hp", rval = nil, args = { "vehicle_part", "int" } },
            { name = "set_submap_moved", rval = nil, args = { "int", "int" } },
            { name = "shed_loose_parts", rval = nil, args = { } },
            { name = "shift_if_needed", rval = "bool", args = { } },
            { name = "shift_parts", rval = nil, args = { "point" } },
            { name = "slow_leak", rval = nil, args = { } },
            { name = "smash", rval = nil, args = { } },
            { name = "spew_smoke", rval = nil, args = { "float", "int", "int" } },
            { name = "start_engine", rval = "bool", args = { "int" } },
            { name = "start_engines", rval = nil, args = { "bool" } },
            { name = "steering_effectiveness", rval = "float", args = { } },
            { name = "stop", rval = nil, args = { } },
            { name = "stored_volume", rval = "units::volume", args = { "int" } },
            { name = "strain", rval = "float", args = { } },
            { name = "sufficient_wheel_config", rval = "bool", args = { "bool" } },
            { name = "thrust", rval = nil, args = { "int" } },
            { name = "toggle_specific_engine", rval = nil, args = { "int", "bool" } },
            { name = "toggle_specific_part", rval = nil, args = { "int", "bool" } },
            { name = "total_mass", rval = "units::mass", args = { } },
            { name = "total_power", rval = "int", args = { "bool" } },
            { name = "turn", rval = nil, args = { "int" } },
            { name = "turret_query", rval = nil, args = { "tripoint" } },
            { name = "turret_query", rval = nil, args = { "vehicle_part" } },
            { name = "turrets", rval = nil, args = { "tripoint" } },
            { name = "turrets", rval = nil, args = { } },
            { name = "turrets_aim", rval = "bool", args = { "bool", "bool", "vehicle_part" } },
            { name = "turrets_aim_and_fire", rval = "int", args = { "bool", "bool", "vehicle_part" } },
            { name = "turrets_aim_single", rval = "int", args = { "vehicle_part" } },
            { name = "turrets_set_mode", rval = nil, args = { } },
            { name = "turrets_set_targeting", rval = nil, args = { } },
            { name = "unboard_all", rval = nil, args = { } },
            { name = "update_time", rval = nil, args = { "time_point" } },
            { name = "use_controls", rval = nil, args = { "tripoint" } },
            { name = "use_washing_machine", rval = nil, args = { "int" } },
            { name = "valid_wheel_config", rval = "bool", args = { "bool" } },
            { name = "velo_vec", rval = nil, args = { } },
            { name = "wheel_area", rval = "float", args = { "bool" } },
        }
    },
    vehicle_part = {
        headers = { "vehicle.h" },
        new = {
            -- vehicle_part::vehicle_part ignored because: unhandled type item &&[CXType_RValueReference] as argument (item &&[CXType_RValueReference]),
            { },
        },
        by_value_and_reference = true,
        attributes = {
            -- vehicle_part::precalc ignored because: unhandled type std::array<point, 2>[CXType_Elaborated] as member (std::array<point, 2>[CXType_Record]),
            -- vehicle_part::target ignored because: unhandled type std::pair<tripoint, tripoint>[CXType_Elaborated] as member (std::pair<tripoint, tripoint>[CXType_Record]),
            blood = { type = "int", writable = true },
            direction = { type = "int", writable = true },
            enabled = { type = "bool", writable = true },
            flags = { type = "int", writable = true },
            inside = { type = "bool", writable = true },
            mount = { type = "point", writable = true },
            open = { type = "bool", writable = true },
            passenger_id = { type = "int", writable = true },
            removed = { type = "bool", writable = true },
        },
        functions = {
            -- vehicle_part::deserialize ignored because: unhandled type JsonIn &[CXType_LValueReference] as argument (JsonIn &[CXType_LValueReference]),
            -- vehicle_part::serialize ignored because: unhandled type JsonOut &[CXType_LValueReference] as argument (JsonOut &[CXType_LValueReference]),
            { name = "ammo_capacity", rval = "int", args = { } },
            { name = "ammo_consume", rval = "int", args = { "int", "tripoint" } },
            { name = "ammo_current", rval = "string", args = { } },
            { name = "ammo_remaining", rval = "int", args = { } },
            { name = "ammo_set", rval = "int", args = { "string", "int" } },
            { name = "ammo_unset", rval = nil, args = { } },
            { name = "can_reload", rval = "bool", args = { "string" } },
            { name = "consume_energy", rval = "float", args = { "string", "float" } },
            { name = "crew", rval = "npc&", args = { } },
            { name = "damage", rval = "float", args = { } },
            { name = "fault_set", rval = "bool", args = { "fault_id" } },
            { name = "fill_with", rval = "bool", args = { "item", "int" } },
            { name = "get_base", rval = "item", args = { } },
            { name = "has_flag", rval = "bool", args = { "int" } },
            { name = "hp", rval = "int", args = { } },
            { name = "info", rval = "vpart_info&", args = { } },
            { name = "is_battery", rval = "bool", args = { } },
            { name = "is_broken", rval = "bool", args = { } },
            { name = "is_engine", rval = "bool", args = { } },
            { name = "is_light", rval = "bool", args = { } },
            { name = "is_reactor", rval = "bool", args = { } },
            { name = "is_seat", rval = "bool", args = { } },
            { name = "is_tank", rval = "bool", args = { } },
            { name = "is_turret", rval = "bool", args = { } },
            { name = "name", rval = "string", args = { } },
            { name = "properties_to_item", rval = "item", args = { } },
            { name = "remove_flag", rval = "int", args = { "int" } },
            { name = "reset_target", rval = nil, args = { "tripoint" } },
            { name = "set_crew", rval = "bool", args = { "npc" } },
            { name = "set_flag", rval = "int", args = { "int" } },
            { name = "unset_crew", rval = nil, args = { } },
            { name = "wheel_area", rval = "int", args = { } },
            { name = "wheel_diameter", rval = "int", args = { } },
            { name = "wheel_width", rval = "int", args = { } },
        }
    },
    vehicle_stack = {
        headers = { "vehicle.h" },
        new = {
            -- vehicle_stack::vehicle_stack skipped because it's blocked,
        },
        by_value = true,
        attributes = {
        },
        functions = {
            -- item_stack::operator[] ignored because: operator,
            { name = "amount_can_fit", rval = "int", args = { "item" } },
            { name = "count_limit", rval = "int", args = { } },
            { name = "cppbegin", rval = nil, cpp_name = "begin", args = { } },
            { name = "cppend", rval = nil, cpp_name = "end", args = { } },
            { name = "empty", rval = "bool", args = { } },
            { name = "free_volume", rval = "units::volume", args = { } },
            { name = "front", rval = "item&", args = { } },
            { name = "max_volume", rval = "units::volume", args = { } },
            { name = "push_back", rval = nil, args = { "item" } },
            { name = "rbegin", rval = nil, args = { } },
            { name = "rend", rval = nil, args = { } },
            { name = "size", rval = "int", args = { } },
            { name = "stacks_with", rval = "item&", args = { "item" } },
            { name = "stored_volume", rval = "units::volume", args = { } },
        }
    },
    vitamin = {
        headers = { "vitamin.h" },
        string_id = "vitamin_id",
        attributes = {
        },
        functions = {
            -- static vitamin::check_consistency skipped because it's blocked,
            -- static vitamin::load_vitamin ignored because: unhandled type JsonObject &[CXType_LValueReference] as argument (JsonObject &[CXType_LValueReference]),
            -- static vitamin::reset skipped because it's blocked,
            { name = "all", static = true, rval = nil, args = { } },
            { name = "deficiency", rval = "efftype_id", args = { } },
            { name = "excess", rval = "efftype_id", args = { } },
            { name = "id", rval = "vitamin_id", args = { } },
            { name = "is_null", rval = "bool", args = { } },
            { name = "max", rval = "int", args = { } },
            { name = "min", rval = "int", args = { } },
            { name = "name", rval = "string", args = { } },
            { name = "rate", rval = "time_duration", args = { } },
            { name = "severity", rval = "int", args = { "int" } },
        }
    },
    vpart_info = {
        headers = { "veh_type.h", "requirements.h" },
        string_id = "vpart_id",
        attributes = {
            -- vpart_info::damage_reduction ignored because: unhandled type std::array<float, NUM_DT>[CXType_Elaborated] as member (std::array<float, 10>[CXType_Record]),
            -- vpart_info::install_skills ignored because: unhandled type std::map<skill_id, int>[CXType_Elaborated] as member (std::map<string_id<Skill>, int, std::less<string_id<Skill> >, std::allocator<std::pair<const string_id<Skill>, int> > >[CXType_Record]),
            -- vpart_info::qualities ignored because: unhandled type std::map<quality_id, int>[CXType_Elaborated] as member (std::map<string_id<quality>, int, std::less<string_id<quality> >, std::allocator<std::pair<const string_id<quality>, int> > >[CXType_Record]),
            -- vpart_info::removal_skills ignored because: unhandled type std::map<skill_id, int>[CXType_Elaborated] as member (std::map<string_id<Skill>, int, std::less<string_id<Skill> >, std::allocator<std::pair<const string_id<Skill>, int> > >[CXType_Record]),
            -- vpart_info::repair_skills ignored because: unhandled type std::map<skill_id, int>[CXType_Elaborated] as member (std::map<string_id<Skill>, int, std::less<string_id<Skill> >, std::allocator<std::pair<const string_id<Skill>, int> > >[CXType_Record]),
            bonus = { type = "int", writable = true },
            breaks_into_group = { type = "string", writable = true },
            color = { type = "nc_color", writable = true },
            color_broken = { type = "nc_color", writable = true },
            default_ammo = { type = "string", writable = true },
            difficulty = { type = "int", writable = true },
            dmg_mod = { type = "int", writable = true },
            durability = { type = "int", writable = true },
            epower = { type = "int", writable = true },
            folded_volume = { type = "units::volume", writable = true },
            fuel_type = { type = "string", writable = true },
            install_moves = { type = "int", writable = true },
            item = { type = "string", writable = true },
            legacy = { type = "bool", writable = true },
            list_order = { type = "int", writable = true },
            location = { type = "string", writable = true },
            power = { type = "int", writable = true },
            removal_moves = { type = "int", writable = true },
            repair_moves = { type = "int", writable = true },
            size = { type = "units::volume", writable = true },
            sym = { type = "int", writable = true },
            sym_broken = { type = "int", writable = true },
            z_order = { type = "int", writable = true },
        },
        functions = {
            -- static vpart_info::finalize skipped because it's blocked,
            -- static vpart_info::load ignored because: unhandled type JsonObject &[CXType_LValueReference] as argument (JsonObject &[CXType_LValueReference]),
            -- static vpart_info::reset skipped because it's blocked,
            -- vpart_info::has_flag ignored because: unhandled type const vpart_bitflags[CXType_Enum] as argument (const vpart_bitflags[CXType_Enum]),
            { name = "all", static = true, rval = nil, args = { } },
            { name = "check", static = true, rval = nil, args = { } },
            { name = "get_id", rval = "vpart_id", args = { } },
            { name = "has_flag", rval = "bool", args = { "string" } },
            { name = "install_requirements", rval = nil, args = { } },
            { name = "install_time", rval = "int", args = { "Character" } },
            { name = "is_repairable", rval = "bool", args = { } },
            { name = "name", rval = "string", args = { } },
            { name = "removal_requirements", rval = nil, args = { } },
            { name = "removal_time", rval = "int", args = { "Character" } },
            { name = "repair_requirements", rval = nil, args = { } },
            { name = "repair_time", rval = "int", args = { "Character" } },
            { name = "set_flag", rval = nil, args = { "string" } },
        }
    },
    w_point = {
        headers = { "weather_gen.h" },
        attributes = {
            acidic = { type = "bool", writable = true },
            humidity = { type = "float", writable = true },
            pressure = { type = "float", writable = true },
            temperature = { type = "float", writable = true },
            windpower = { type = "float", writable = true },
        },
        functions = {
        }
    },
}
classes["units::mass"] = {
        forward_declaration = "",
        headers = { "units.h" },
        by_value = true,
        attributes = {
        },
        functions = {
        },
    }
classes["units::volume"] = {
        forward_declaration = "",
        headers = { "units.h" },
        by_value = true,
        attributes = {
        },
        functions = {
        },
    }

enums = {
    add_type = {
        "ADD_NULL",
        "ADD_CAFFEINE",
        "ADD_ALCOHOL",
        "ADD_SLEEP",
        "ADD_PKILLER",
        "ADD_SPEED",
        "ADD_CIG",
        "ADD_COKE",
        "ADD_CRACK",
        "ADD_MUTAGEN",
        "ADD_DIAZEPAM",
        "ADD_MARLOSS_R",
        "ADD_MARLOSS_B",
        "ADD_MARLOSS_Y",
    },
    body_part = {
        "bp_torso",
        "bp_head",
        "bp_eyes",
        "bp_mouth",
        "bp_arm_l",
        "bp_arm_r",
        "bp_hand_l",
        "bp_hand_r",
        "bp_leg_l",
        "bp_leg_r",
        "bp_foot_l",
        "bp_foot_r",
        "num_bp",
    },
    damage_type = {
        "DT_NULL",
        "DT_TRUE",
        "DT_BIOLOGICAL",
        "DT_BASH",
        "DT_CUT",
        "DT_ACID",
        "DT_STAB",
        "DT_HEAT",
        "DT_COLD",
        "DT_ELECTRIC",
        "NUM_DT",
    },
    field_id = {
        "fd_null",
        "fd_blood",
        "fd_bile",
        "fd_gibs_flesh",
        "fd_gibs_veggy",
        "fd_web",
        "fd_slime",
        "fd_acid",
        "fd_sap",
        "fd_sludge",
        "fd_fire",
        "fd_rubble",
        "fd_smoke",
        "fd_toxic_gas",
        "fd_tear_gas",
        "fd_nuke_gas",
        "fd_gas_vent",
        "fd_fire_vent",
        "fd_flame_burst",
        "fd_electricity",
        "fd_fatigue",
        "fd_push_items",
        "fd_shock_vent",
        "fd_acid_vent",
        "fd_plasma",
        "fd_laser",
        "fd_spotlight",
        "fd_dazzling",
        "fd_blood_veggy",
        "fd_blood_insect",
        "fd_blood_invertebrate",
        "fd_gibs_insect",
        "fd_gibs_invertebrate",
        "fd_cigsmoke",
        "fd_weedsmoke",
        "fd_cracksmoke",
        "fd_methsmoke",
        "fd_bees",
        "fd_incendiary",
        "fd_relax_gas",
        "fd_fungal_haze",
        "fd_hot_air1",
        "fd_hot_air2",
        "fd_hot_air3",
        "fd_hot_air4",
        "fd_fungicidal_gas",
        "num_fields",
    },
    hp_part = {
        "hp_head",
        "hp_torso",
        "hp_arm_l",
        "hp_arm_r",
        "hp_leg_l",
        "hp_leg_r",
        "num_hp_parts",
    },
    m_size = {
        "MS_TINY",
        "MS_SMALL",
        "MS_MEDIUM",
        "MS_LARGE",
        "MS_HUGE",
    },
    phase_id = {
        "PNULL",
        "SOLID",
        "LIQUID",
        "GAS",
        "PLASMA",
    },
    season_type = {
        "SPRING",
        "SUMMER",
        "AUTUMN",
        "WINTER",
    },
    side = {
        "BOTH",
        "LEFT",
        "RIGHT",
    },
}
enums_headers = {
    "field.h", "bodypart.h", "itype.h", "creature.h", "output.h", "calendar.h", "pldata.h", "units.h"
}

--[[
Currently, for each function in each class, the bindings generator creates a matching function in
each of the parent classes. For example is_player, which is defined in Creature and player.
Because it's in Creature and monster inherits it from there, the generator adds a wrapper to the
metatable of the monster class that calls is_player on a monster object.
However, it creates the same "wrapper" for the player class (same scenario: it inherits it from
Creature).
Now player::is_player is wrapped twice: once through the heritage from Creature and once on its own.

The following snippet tries to correct this. It simply removes all the redundantly declared
functions in the subclasses.
--]]

for class_name, value in pairs(classes) do
    -- Collect all defined functions of the *parent* classes in this table
    local existing = { }
    value = classes[value.parent]
    while value do
        for _, func in ipairs(value.functions) do
            local n = func.name .. "_" .. table.concat(func.args, "|")
            existing[n] = true
        end
        value = classes[value.parent]
    end
    -- Now back to the actual class, remove all the functions that are in the table
    -- and therefor exist in at least on of the parent classes.
    value = classes[class_name]
    local i = 1
    while i <= #value.functions do
        local func = value.functions[i]
        local n = func.name .. "_" .. table.concat(func.args, "|")
        if existing[n] then
            table.remove(value.functions, i)
        else
            i = i + 1
        end
    end
    if not value.forward_declaration then
        -- @todo could be a struct!
        value.forward_declaration = "class " .. class_name .. ";"
    end
end

-- This adds the int_id wrappers from the class definition as real classes.
-- All int_id<T>s have the same interface, so we only need to add some mark to T, that this class
-- T has an int_id of some name.
-- In the class definition: add "int_id" = "XXX" (XXX is the typedef id that is used by C++).
new_classes = {}
for name, value in pairs(classes) do
    if value.int_id then
        -- This is the common int_id<T> interface:
        local t = {
            forward_declaration = value.forward_declaration .. "using " .. value.int_id .. " = int_id<" .. name .. ">;",
            headers = value.headers,
            by_value = true,
            has_equal = true,
            -- IDs *could* be constructed from int, but where does the Lua script get the int from?
            -- The int is only exposed as int_id<T>, so Lua should never know about it.
            attributes = { },
            -- Copy and default constructor
            new = { { value.int_id }, { } },
            functions = {
                -- Use with care, only for displaying the value for debugging purpose!
                { name = "to_i", rval = "int", args = { } },
                { name = "obj", rval = name .. "&", args = { } },
            }
        }
        if value.string_id then
            -- Allow conversion from int_id to string_id
            t[#t.functions] = { name = "id", rval = value.string_id, args = { } }
            -- And creation of an int_id from a string_id
            t.new = { { value.string_id }, { } }
        end
        new_classes[value.int_id] = t
    end
    -- Very similar to int_id above
    if value.string_id then
        local t = {
            forward_declaration = value.forward_declaration .. "using " .. value.string_id .. " = string_id<" .. name .. ">;",
            headers = value.headers,
            by_value = true,
            has_equal = true,
            -- Copy and default constructor and construct from plain string.
            new = { { value.string_id }, { }, { "string" } },
            attributes = { },
            functions = {
                { name = "str", rval = "string", args = { } },
                { name = "is_valid", rval = "bool", args = { } },
                { name = "obj", rval = name .. "&", args = { } },
            }
        }
        if value.int_id then
            t.functions[#t.functions] = { name = "id", rval = value.int_id, args = { } }
        end
        new_classes[value.string_id] = t
    end
end
for name, value in pairs(new_classes) do
    classes[name] = value
end
new_classes = nil
